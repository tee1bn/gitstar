%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 9.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For:  
%%CreationDate: 10/30/2017
%%BoundingBox: 0 0 697 751
%%HiResBoundingBox: 0 0 696.3453 750.8457
%%CropBox: 0 0 696.3453 750.8457
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.0 x243 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-1-09</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2017-10-30T12:52:08+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2017-10-30T12:52:09+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2017-10-30T12:52:09+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>240</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAADwAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXwL5s81615p1u41fVrh5p5nYxozEpEhPwxxjoqqNtv15eBSEn&#xA;wq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXt3/OL/mvWofN0nlx&#xA;rh5dIuraWUWzsSscsRDB4wfs1FQwHX6MhMJfUmVK7FXYq7FX525kIewfkt+S2g+fNBvtR1G+urWW&#xA;1uvq6Jb+nxK+mr1PNWNatkJSpL0P/oU/yb/1d9R++D/qnkeMq7/oU/yb/wBXfUfvg/6p48ZV3/Qp&#xA;/k3/AKu+o/fB/wBU8eMq7/oU/wAm/wDV31H74P8AqnjxlXf9Cn+Tf+rvqP3wf9U8eMq7/oU/yb/1&#xA;d9R++D/qnjxlXf8AQp/k3/q76j98H/VPHjKu/wChT/Jv/V31H74P+qePGVd/0Kf5N/6u+o/fB/1T&#xA;x4yrv+hT/Jv/AFd9R++D/qnjxlXf9Cn+Tf8Aq76j98H/AFTx4yrv+hT/ACb/ANXfUfvg/wCqePGV&#xA;d/0Kf5N/6u+o/fB/1Tx4yrv+hT/Jv/V31H74P+qePGVd/wBCn+Tf+rvqP3wf9U8eMq7/AKFP8m/9&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:322e714f-4823-ed45-a360-b758aec9d097</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:322e714f-4823-ed45-a360-b758aec9d097</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0036fffc-81e1-4679-8cc9-a083b3657071</stRef:instanceID>
            <stRef:documentID>xmp.did:fcc9ff7d-a9f0-e649-9b2e-119eb0a0ed3d</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fcc9ff7d-a9f0-e649-9b2e-119eb0a0ed3d</stEvt:instanceID>
                  <stEvt:when>2017-10-30T12:30:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:322e714f-4823-ed45-a360-b758aec9d097</stEvt:instanceID>
                  <stEvt:when>2017-10-30T12:52:09+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -750.846 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 750.846 li
696.345 750.846 li
696.345 0 li
cp
clp
645.028 68.6963 mo
644.996 67.4199 645.09 66.1601 644.559 64.9004 cv
643.904 63.2197 642.376 61.8349 640.348 60.5586 cv
637.76 58.9414 633.767 58.3496 630.149 57.4785 cv
629.93 57.4316 629.619 57.4472 629.37 57.4472 cv
625.658 57.4785 621.977 57.2138 618.234 57.4785 cv
617.765 57.5097 617.298 57.5254 616.8 57.541 cv
616.332 57.5566 615.863 57.5566 615.395 57.5566 cv
609.875 57.6338 604.323 57.6963 598.802 57.7588 cv
598.49 57.7588 597.928 57.6806 597.896 57.6035 cv
597.866 57.3076 597.647 57.1982 597.054 57.2451 cv
593 57.5722 589.039 57.1367 584.984 57.3076 cv
582.519 57.416 580.024 57.5097 577.529 57.5097 cv
575.127 57.5254 572.757 57.7431 570.293 57.5254 cv
567.922 57.3076 565.333 57.6035 562.838 57.665 cv
562.276 57.6806 561.621 57.7744 561.715 57.3076 cv
561.715 57.2607 561.309 57.167 561.059 57.167 cv
559.344 57.1982 557.597 57.292 555.882 57.292 cv
554.228 57.292 552.575 57.1982 550.923 57.167 cv
549.893 57.167 548.802 57.2138 547.771 57.2607 cv
546.836 57.3076 545.745 57.292 545.058 57.5254 cv
543.842 57.914 543.156 57.3701 542.188 57.4004 cv
537.447 57.4941 532.707 57.4941 527.966 57.541 cv
527.559 57.541 527.185 57.5566 526.78 57.5722 cv
526.219 57.6181 525.938 57.541 525.907 57.2295 cv
525.907 57.1513 525.314 57.0586 525.002 57.0742 cv
519.575 57.1211 514.147 57.1826 508.689 57.2451 cv
508.408 57.2451 li
502.17 57.3379 495.963 57.416 489.693 57.4941 cv
489.382 57.4941 488.758 57.4004 488.758 57.3701 cv
488.82 56.9033 488.196 56.9804 487.603 56.9961 cv
484.484 56.9961 481.365 57.1211 478.183 57.0429 cv
473.723 56.9336 469.231 57.1982 464.74 57.2607 cv
463.149 57.3076 461.558 57.3076 459.968 57.2607 cv
454.727 57.0898 449.362 57.3232 444.028 57.3701 cv
443.685 57.3701 443.03 57.3232 443.03 57.2763 cv
443.03 56.8877 442.625 56.8252 441.938 56.8564 cv
435.607 57.1826 429.338 56.8408 422.974 57.0898 cv
420.635 57.1826 418.296 57.2138 415.956 57.2295 cv
415.426 57.2451 414.895 57.2451 414.334 57.2451 cv
411.776 57.2607 409.187 57.2607 406.63 57.2763 cv
406.287 57.292 405.725 57.1982 405.694 57.1211 cv
405.663 56.7939 405.382 56.7158 404.79 56.7627 cv
400.174 57.1054 395.65 56.7158 391.034 56.872 cv
387.478 56.9804 383.89 57.1054 380.303 57.167 cv
378.495 57.1826 376.685 57.0429 374.877 57.0429 cv
372.911 57.0586 370.916 57.1513 368.919 57.1982 cv
368.638 57.2138 368.139 57.1367 368.171 57.0898 cv
368.202 56.7002 367.764 56.6386 367.048 56.6855 cv
360.528 56.9961 354.072 56.6386 347.521 56.9033 cv
347.053 56.9189 346.617 56.9336 346.149 56.9492 cv
345.837 56.9648 345.494 56.9804 345.151 56.9804 cv
340.504 57.1211 335.855 57.0586 331.208 57.1054 cv
330.896 57.1054 330.303 57.0117 330.303 56.9336 cv
330.272 56.6074 329.961 56.5449 329.337 56.5918 cv
324.752 56.9189 320.229 56.498 315.675 56.6855 cv
315.487 56.6855 315.301 56.6855 315.113 56.7002 cv
314.677 56.7158 314.24 56.747 313.803 56.747 cv
306.722 57.0586 299.705 56.7939 292.624 57.0273 cv
292.001 57.0586 291.345 57.1054 291.47 56.6386 cv
291.47 56.6074 291.002 56.5136 290.753 56.5136 cv
288.912 56.5449 287.072 56.6386 285.262 56.6543 cv
283.423 56.6543 281.582 56.5136 279.742 56.5293 cv
276.592 56.5761 273.441 56.6386 270.291 56.7939 cv
264.833 57.0586 259.468 56.5918 254.04 56.9336 cv
253.728 56.9492 253.104 56.8408 253.104 56.7627 cv
253.073 56.4365 252.73 56.3896 252.137 56.4209 cv
249.549 56.5449 246.928 56.5605 244.34 56.5293 cv
243.716 56.5293 li
241.189 56.5761 238.632 56.5918 236.136 56.5293 cv
235.325 56.5449 234.483 56.5605 233.672 56.6074 cv
230.178 56.7627 226.592 57.1054 223.16 56.6386 cv
218.794 56.9033 214.489 56.6855 210.153 56.7158 cv
208.501 56.7158 206.846 56.8095 205.194 56.8252 cv
204.944 56.8252 204.695 56.6543 204.445 56.5605 cv
204.476 56.5449 204.508 56.5293 204.539 56.5136 cv
203.416 56.4824 202.293 56.4365 201.17 56.3896 cv
201.046 56.3896 200.952 56.374 200.827 56.3584 cv
198.737 56.4052 196.616 56.4521 194.495 56.3115 cv
192.125 56.1406 189.567 56.3896 187.103 56.4668 cv
184.607 56.5293 182.112 56.5136 179.648 56.6855 cv
179.087 56.7314 178.525 56.7314 177.995 56.7314 cv
176.123 56.7158 174.314 56.4824 172.442 56.5605 cv
169.636 56.6855 166.828 56.6855 164.021 56.8252 cv
162.243 56.9033 160.372 57.0117 158.75 57.3379 cv
157.969 57.4941 156.347 57.3545 156.286 58.1631 cv
156.286 58.1787 156.286 58.1943 156.254 58.2099 cv
156.098 58.334 155.412 58.5049 155.069 58.5049 cv
153.728 58.5049 153.416 59.5009 151.825 59.2676 cv
151.669 59.2676 151.045 59.7812 150.764 60.0771 cv
150.547 60.3261 150.577 60.8076 150.297 60.8388 cv
148.737 61.0722 148.518 61.664 148.113 62.2549 cv
148.051 62.3642 147.677 62.5351 147.458 62.5508 cv
146.771 62.5664 146.678 62.706 146.553 63.0019 cv
146.023 64.1533 145.337 65.289 145.337 66.4716 cv
145.337 186.13 li
145.337 186.52 145.305 186.908 145.337 187.297 cv
145.368 187.436 145.43 187.608 145.618 187.67 cv
146.054 187.826 147.021 187.904 147.021 188.044 cv
147.021 188.37 146.367 188.573 145.587 188.635 cv
145.493 188.65 145.368 188.884 145.337 189.024 cv
145.305 189.366 145.337 189.709 145.337 190.051 cv
145.337 233.475 li
145.337 247.943 145.337 262.412 145.368 276.882 cv
145.368 277.877 145.743 278.842 145.992 279.822 cv
146.023 279.946 146.211 280.071 146.428 280.148 cv
146.865 280.289 147.489 280.352 147.802 280.522 cv
148.144 280.725 148.082 281.051 148.363 281.269 cv
148.831 281.611 149.329 282.156 149.923 282.171 cv
151.451 282.171 150.639 282.825 151.201 283.043 cv
151.482 283.167 151.856 283.353 152.136 283.322 cv
153.166 283.198 153.602 283.525 154.226 283.728 cv
157.003 284.691 160.059 285.33 163.803 285.112 cv
165.362 285.019 166.922 284.94 168.481 284.879 cv
169.667 284.816 170.665 285.159 171.974 285.019 cv
173.004 284.895 174.064 284.895 175.187 285.081 cv
176.217 285.252 177.621 284.987 178.868 284.94 cv
179.118 284.94 179.586 285.019 179.586 285.065 cv
179.586 285.36 179.772 285.501 180.459 285.454 cv
181.488 285.376 182.549 285.299 183.578 285.299 cv
184.638 285.299 185.668 285.454 186.728 285.408 cv
189.223 285.33 191.688 285.205 194.183 285.05 cv
194.994 284.987 195.774 285.003 196.585 285.019 cv
196.928 285.034 197.24 285.05 197.583 285.065 cv
197.895 285.081 198.207 285.097 198.518 285.097 cv
199.454 285.128 200.39 285.112 201.357 284.987 cv
201.887 284.925 202.636 284.801 202.636 285.299 cv
202.636 285.36 203.229 285.454 203.572 285.454 cv
205.443 285.376 207.315 285.408 209.186 285.408 cv
210.652 285.408 212.149 285.345 213.615 285.283 cv
214.302 285.236 214.957 285.205 215.643 285.189 cv
216.08 285.159 216.485 285.144 216.922 285.144 cv
218.17 285.112 219.418 285.097 220.665 285.174 cv
221.757 285.236 223.316 284.707 223.815 285.579 cv
224.688 285.548 225.656 285.687 226.31 285.205 cv
226.809 284.816 227.153 284.909 227.621 285.144 cv
228.556 285.579 229.803 285.641 231.114 285.532 cv
235.886 285.112 240.596 285.252 245.306 285.112 cv
245.649 285.097 246.273 285.174 246.273 285.252 cv
246.304 285.563 246.585 285.641 247.209 285.594 cv
248.239 285.532 249.267 285.454 250.265 285.454 cv
251.202 285.438 252.137 285.594 253.073 285.579 cv
255.225 285.501 257.378 285.408 259.499 285.252 cv
261.714 285.081 263.74 285.548 265.986 285.236 cv
266.548 285.144 267.265 285.097 267.172 285.579 cv
267.172 285.625 267.608 285.703 267.858 285.703 cv
268.98 285.656 270.103 285.563 271.226 285.548 cv
272.256 285.548 273.285 285.687 274.315 285.656 cv
277.995 285.609 281.644 285.221 285.356 285.345 cv
288.101 285.423 290.939 285.314 293.653 285.548 cv
294.745 285.656 295.899 285.687 297.053 285.672 cv
299.985 285.641 302.918 285.299 305.912 285.47 cv
308.75 285.641 311.776 285.408 314.708 285.36 cv
315.082 285.36 315.706 285.423 315.706 285.485 cv
315.737 285.781 315.956 285.89 316.579 285.844 cv
318.731 285.734 320.852 285.672 323.005 285.766 cv
325.251 285.844 327.621 285.594 329.929 285.438 cv
332.207 285.299 334.327 285.687 336.604 285.423 cv
337.135 285.36 338.133 285.097 338.101 285.719 cv
338.101 285.781 338.538 285.874 338.757 285.858 cv
340.753 285.656 342.656 285.952 344.527 285.828 cv
348.893 285.548 353.167 285.656 357.503 285.501 cv
357.846 285.485 358.47 285.548 358.47 285.609 cv
358.501 285.921 358.72 286.015 359.344 285.983 cv
361.496 285.874 363.585 285.797 365.706 285.89 cv
367.827 285.983 370.073 285.672 372.288 285.609 cv
374.502 285.548 376.685 285.563 378.9 285.548 cv
379.462 285.532 380.148 285.392 380.086 285.874 cv
380.086 285.936 380.522 286.029 380.741 286.015 cv
382.892 285.812 384.982 286.076 387.072 285.952 cv
391.377 285.687 395.619 285.797 399.924 285.625 cv
400.235 285.609 400.859 285.687 400.859 285.75 cv
400.89 286.061 401.14 286.139 401.732 286.107 cv
403.853 285.999 405.943 285.921 408.064 286.015 cv
410.154 286.107 412.4 285.797 414.553 285.734 cv
416.767 285.672 418.951 285.687 421.134 285.672 cv
421.695 285.656 422.382 285.532 422.288 286.015 cv
422.288 286.061 422.724 286.154 422.943 286.139 cv
425.095 285.936 427.154 286.093 429.213 286.093 cv
432.363 286.093 435.545 285.703 438.726 285.858 cv
441.72 286.015 444.84 285.781 447.896 285.719 cv
448.427 285.703 448.863 285.672 448.863 286.015 cv
448.863 286.093 449.237 286.217 449.425 286.201 cv
450.516 286.17 451.608 286.061 452.669 286.061 cv
453.667 286.045 454.665 286.201 455.663 286.17 cv
457.721 286.107 459.78 285.983 461.839 285.858 cv
463.835 285.719 465.707 286.139 467.765 285.844 cv
468.077 285.797 468.732 285.858 468.763 285.921 cv
468.826 286.186 468.857 286.356 469.544 286.325 cv
471.54 286.217 473.505 286.186 475.47 286.248 cv
477.747 286.325 480.148 286.076 482.488 285.921 cv
484.764 285.766 486.948 286.186 489.257 285.874 cv
489.756 285.812 490.504 285.656 490.472 286.154 cv
490.472 286.217 490.879 286.341 491.065 286.325 cv
493.374 286.015 495.526 286.45 497.834 286.279 cv
498.489 286.217 499.176 286.232 499.861 286.154 cv
503.324 285.781 506.661 286.217 510.093 285.921 cv
510.342 285.905 510.81 285.968 510.81 286.015 cv
510.81 286.294 510.934 286.45 511.59 286.403 cv
512.463 286.341 513.368 286.279 514.21 286.279 cv
515.114 286.279 515.988 286.435 516.892 286.403 cv
519.201 286.325 521.54 286.201 523.848 286.045 cv
526.125 285.89 528.246 286.31 530.554 285.999 cv
531.053 285.921 531.77 285.797 531.77 286.279 cv
531.77 286.341 532.176 286.466 532.332 286.45 cv
534.733 286.123 536.979 286.621 539.319 286.372 cv
543.124 285.983 546.867 286.325 550.641 286.076 cv
550.891 286.061 551.359 286.123 551.359 286.17 cv
551.328 286.45 551.453 286.621 552.138 286.559 cv
555.539 286.248 558.845 286.637 562.276 286.325 cv
564.272 286.154 566.3 286.093 568.358 286.232 cv
570.885 286.388 573.536 286.186 576.156 286.139 cv
576.686 286.139 577.342 285.999 577.279 286.466 cv
577.279 286.528 577.684 286.605 577.903 286.605 cv
580.617 286.574 583.3 286.652 585.981 286.45 cv
589.569 286.186 593.062 286.481 596.618 286.217 cv
596.837 286.201 597.054 286.388 597.304 286.481 cv
597.461 286.543 597.647 286.699 597.803 286.684 cv
600.142 286.388 602.388 286.729 604.697 286.621 cv
606.787 286.513 608.877 286.403 610.967 286.294 cv
611.434 286.264 612.12 286.123 612.37 286.232 cv
613.524 286.699 614.896 286.248 616.144 286.294 cv
617.391 286.341 618.639 286.356 619.887 286.388 cv
622.32 286.45 624.628 285.766 627.03 285.719 cv
628.184 285.081 630.773 285.672 631.178 284.381 cv
631.178 284.381 631.553 284.396 631.709 284.35 cv
633.206 283.977 634.922 283.728 635.421 282.747 cv
635.483 282.638 635.92 282.482 636.169 282.451 cv
637.199 282.374 637.479 282.109 637.729 281.611 cv
638.01 281.066 638.072 280.382 639.507 280.071 cv
639.725 280.024 639.788 279.76 639.943 279.589 cv
640.505 279.075 640.536 278.547 640.505 278.002 cv
640.505 277.831 640.661 277.504 640.723 277.488 cv
642.033 277.427 641.628 276.99 641.628 276.664 cv
641.659 273.91 641.628 271.156 641.628 268.402 cv
641.628 265.648 641.69 262.895 641.628 260.141 cv
641.565 257.418 642.314 254.695 642.252 251.973 cv
642.22 251.102 642.22 250.23 642.22 249.359 cv
642.127 243.089 642.22 236.819 642.189 230.564 cv
642.189 229.942 642.469 229.289 641.69 228.728 cv
641.378 228.511 641.378 227.997 641.69 227.779 cv
642.469 227.22 642.127 226.706 642.189 226.178 cv
642.252 225.648 642.189 225.15 642.189 224.637 cv
642.189 221.557 li
642.189 221.043 642.532 220.436 642.127 220.031 cv
641.628 219.534 642.252 219.145 642.252 218.709 cv
642.189 215.255 642.376 211.785 642.158 208.347 cv
641.939 204.894 642.813 201.408 642.782 197.939 cv
642.751 186.706 642.782 175.457 642.782 164.209 cv
642.782 163.804 642.532 163.321 642.876 162.979 cv
644.092 161.781 642.501 160.521 643.904 159.354 cv
642.657 158.468 643.406 157.394 643.374 156.414 cv
643.281 150.875 643.344 145.32 643.344 139.767 cv
643.344 139.02 643.312 138.272 643.312 137.526 cv
643.312 136.919 643.312 136.312 643.344 135.706 cv
643.406 134.383 643.499 133.076 643.78 131.738 cv
644.373 129.124 643.374 126.511 644.466 123.866 cv
644.466 118.498 644.373 113.146 644.497 107.778 cv
644.653 102.442 643.843 97.1367 645.028 91.7841 cv
645.028 84.083 645.059 76.3818 645.028 68.6963 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.188235 .184314 .239216 rgb
f
205.961 559.897 mo
168.131 640.658 li
156.06 640.658 li
196.045 555.191 li
193.782 553.071 191.95 550.413 190.979 547.216 cv
190.297 544.845 190.082 542.438 190.333 540.139 cv
132.96 515.063 li
122.326 510.428 li
110.183 505.111 li
110.183 493.148 li
130.229 501.914 li
140.899 506.584 li
194.752 530.115 li
196.907 527.672 199.745 525.732 203.087 524.727 cv
204.344 524.331 205.637 524.116 206.894 524.044 cv
225.756 444.11 li
228.45 432.686 li
253.49 326.525 li
250.22 323.651 248.532 319.125 249.61 314.562 cv
251.19 307.988 257.765 303.929 264.34 305.474 cv
270.914 307.019 274.973 313.593 273.428 320.167 cv
272.315 324.909 268.579 328.322 264.124 329.292 cv
240.09 431.141 li
237.395 442.565 li
217.564 526.595 li
221.264 528.822 224.211 532.343 225.576 536.834 cv
228.45 546.354 223.025 556.448 213.469 559.287 cv
210.954 560.077 208.403 560.221 205.961 559.897 cv
cp
f
563.598 544.306 mo
554.797 546.965 545.492 541.971 542.834 533.133 cv
542.618 532.486 542.582 531.876 542.438 531.229 cv
436.889 514.057 li
433.692 519.302 427.405 522.176 421.082 520.703 cv
418.999 520.2 417.166 519.266 415.55 518.009 cv
311.114 579.082 li
313.557 589.033 307.881 599.236 297.966 602.218 cv
291.103 604.266 284.062 602.29 279.213 597.727 cv
205.673 640.658 li
183.938 640.658 li
273.68 588.243 li
271.237 578.327 276.914 568.124 286.829 565.143 cv
293.654 563.095 300.696 565.071 305.582 569.634 cv
410.017 508.561 li
409.765 506.8 409.802 504.932 410.233 503.1 cv
411.023 499.794 412.891 497.1 415.334 495.124 cv
401.862 450.253 li
393.347 450.325 385.444 444.9 382.857 436.313 cv
379.732 425.932 385.624 414.975 396.042 411.849 cv
406.425 408.724 417.382 414.615 420.508 424.997 cv
423.094 433.584 419.502 442.457 412.352 447.092 cv
425.824 491.963 li
426.507 492.034 427.153 492.07 427.836 492.25 cv
433.44 493.543 437.464 497.962 438.649 503.207 cv
544.127 520.38 li
546.175 516.644 549.624 513.661 554.007 512.332 cv
562.844 509.71 572.149 514.703 574.807 523.541 cv
577.466 532.343 572.436 541.684 563.598 544.306 cv
cp
f
336.837 439.116 mo
329.185 444.182 318.803 442.098 313.737 434.374 cv
313.342 433.835 313.126 433.261 312.803 432.686 cv
237.395 442.565 li
240.09 431.141 li
311.294 421.8 li
312.192 417.633 314.636 413.789 318.443 411.238 cv
326.167 406.208 336.513 408.292 341.579 416.017 cv
346.68 423.668 344.525 434.051 336.837 439.116 cv
cp
f
34.033 656.825 mo
477.211 656.825 li
480.741 680.732 491.967 702.168 508.297 718.509 cv
110.183 718.509 li
110.174 718.509 110.165 718.512 110.156 718.512 cv
72.783 718.497 41.4929 692.012 34.033 656.825 cv
cp
126.349 32.333 mo
664.01 32.333 li
664.01 640.659 li
664.01 683.587 629.102 718.509 586.195 718.509 cv
586.061 718.509 li
543.196 718.434 508.347 683.544 508.347 640.662 cv
508.347 638.43 507.893 636.302 507.075 634.367 cv
504.621 628.564 498.876 624.492 492.178 624.492 cv
126.349 624.492 li
126.349 32.333 li
cp
696.344 640.646 mo
696.344 16.166 li
696.344 7.23728 689.106 -2.69988e-05 680.177 -2.69988e-05 cv
110.183 -2.69988e-05 li
101.255 -2.69988e-05 94.0164 7.23728 94.0164 16.166 cv
94.0164 624.492 li
16.1668 624.492 li
7.23806 624.492 -.000226133 631.73 -.000226133 640.659 cv
-.000226133 640.667 .00172699 640.674 .00172699 640.682 cv
.0124692 701.427 49.4373 750.846 110.186 750.846 cv
110.198 750.846 110.21 750.842 110.221 750.842 cv
586.06 750.842 li
586.107 750.842 586.152 750.846 586.199 750.846 cv
646.933 750.846 696.345 701.417 696.345 640.662 cv
696.345 640.656 696.344 640.651 696.344 640.646 cv
cp
f
521.446 329.527 mo
520.582 329.527 519.771 329.78 518.943 330.292 cv
514.023 333.337 510.834 343.787 509.976 349.659 cv
508.304 361.142 509.538 372.833 511.863 384.454 cv
517.302 373.697 521.438 362.274 524.055 350.475 cv
524.494 348.58 li
525.795 343.061 528.5 331.579 523.18 329.832 cv
522.569 329.631 521.996 329.527 521.446 329.527 cv
cp
537.682 414.625 mo
536.465 415.817 535.564 417.093 535.133 418.272 cv
534.601 419.732 534.265 422.494 535.052 423.658 cv
535.42 424.2 536.253 424.497 537.528 424.541 cv
540.387 424.629 540.387 423.576 540.424 422.458 cv
540.501 420.123 539.335 417.157 537.682 414.625 cv
cp
556.939 425.584 mo
556.952 425.584 557.357 425.881 558.694 425.925 cv
560.705 425.977 561.569 425.705 561.866 425.571 cv
561.926 424.773 561.357 423.078 558.97 419.495 cv
557.662 421.694 556.456 424.646 556.939 425.586 cv
556.939 425.584 556.939 425.584 556.939 425.584 cv
cp
512.235 416.527 mo
508.983 419.726 505.648 424.249 502.231 430.608 cv
495.545 443.054 490.625 460.088 495.63 468.076 cv
497.934 471.759 502.34 473.413 509.184 473.127 cv
512.903 472.972 515.559 471.738 517.306 469.355 cv
523.922 460.341 517.76 437.453 514.452 425.158 cv
513.882 423.044 513.379 421.171 513.002 419.622 cv
512.751 418.592 512.496 417.562 512.235 416.527 cv
cp
507.764 480.436 mo
499.147 480.436 492.997 477.584 489.461 471.942 cv
480.198 457.156 494.194 430.188 495.82 427.161 cv
500.314 418.801 504.983 412.689 510.183 408.573 cv
510.16 408.482 510.137 408.39 510.111 408.297 cv
509.726 406.823 509.342 405.345 508.96 403.863 cv
495.438 424.2 477.241 441.368 456.003 453.169 cv
454.247 454.139 452.033 453.515 451.053 451.754 cv
450.077 449.996 450.709 447.779 452.467 446.804 cv
474.66 434.478 493.366 415.988 506.529 394.109 cv
503.001 379.186 500.539 363.949 502.776 348.608 cv
502.885 347.853 505.587 329.997 515.113 324.103 cv
518.282 322.142 521.856 321.733 525.457 322.915 cv
537.115 326.751 533.378 342.623 531.579 350.25 cv
531.164 352.054 li
527.796 367.229 522.032 381.816 514.292 395.253 cv
515.058 398.379 515.861 401.493 516.669 404.594 cv
521.08 402.599 525.888 401.744 531.279 401.927 cv
533.852 402.01 536.405 403.179 538.702 405.004 cv
541.193 403.731 543.897 402.872 546.582 402.593 cv
552.22 401.999 556.911 404.03 559.923 408.292 cv
566.424 403.228 572.582 400.856 578.644 401.05 cv
592.801 401.509 599.423 409.678 605.266 416.884 cv
611.156 424.148 616.246 430.423 628.44 430.82 cv
630.448 430.885 632.025 432.567 631.958 434.575 cv
631.893 436.586 630.123 438.171 628.203 438.094 cv
612.683 437.588 605.739 429.024 599.611 421.467 cv
594.047 414.604 589.239 408.677 578.407 408.322 cv
574.073 408.258 569.347 410.155 564.196 414.197 cv
567.476 418.851 570.646 424.56 568.336 429.009 cv
566.805 431.953 563.484 433.373 558.457 433.197 cv
552.794 433.015 550.802 429.948 550.12 428.137 cv
548.189 423.006 552.112 416.282 554.487 413.268 cv
554.394 413.134 554.314 413.01 554.244 412.898 cv
552.756 410.504 550.487 409.52 547.336 409.833 cv
546.143 409.956 544.945 410.264 543.795 410.705 cv
546.282 414.52 547.82 418.959 547.699 422.695 cv
547.509 428.526 543.578 432.142 537.291 431.814 cv
532.635 431.664 530.224 429.512 529.021 427.736 cv
525.813 422.99 528.03 416.504 528.294 415.781 cv
529.104 413.557 530.556 411.425 532.43 409.544 cv
531.951 409.334 531.483 409.216 531.042 409.2 cv
527.029 409.087 522.866 409.494 518.54 411.797 cv
519.067 413.838 519.58 415.874 520.073 417.897 cv
520.44 419.397 520.93 421.214 521.48 423.267 cv
525.364 437.688 531.86 461.827 523.176 473.663 cv
520.079 477.883 515.474 480.149 509.489 480.399 cv
508.903 480.423 508.33 480.436 507.764 480.436 cv
cp
f
252.643 91.0976 mo
252.643 99.9531 256.029 108.81 252.253 115.842 cv
245.48 114.019 238.709 116.623 233.499 114.019 cv
234.02 109.591 234.15 107.897 233.499 103.34 cv
229.201 102.949 225.685 103.99 222.95 102.558 cv
220.475 106.596 222.429 110.763 221.647 114.931 cv
226.467 119.358 234.02 120.921 238.578 125.609 cv
239.75 125.609 240.662 125.609 241.704 125.609 cv
244.569 129.386 250.169 130.428 252.643 134.596 cv
255.118 141.759 254.987 148.661 253.685 155.823 cv
253.034 157.256 254.987 156.084 254.467 157.646 cv
253.295 163.377 253.034 170.54 248.997 173.275 cv
246.261 172.754 245.48 174.186 244.308 174.968 cv
237.927 174.838 228.159 177.442 222.429 174.577 cv
220.997 174.316 220.606 175.358 219.824 175.88 cv
211.359 174.186 202.634 172.754 200.289 164.81 cv
201.982 158.688 198.857 151.526 201.071 144.754 cv
208.103 142.54 215.266 145.796 221.257 143.973 cv
219.955 147.88 221.778 149.572 220.475 152.828 cv
221.387 158.168 226.596 156.605 232.718 156.735 cv
235.844 153.87 231.546 150.353 233.499 147.749 cv
230.243 141.498 222.82 139.153 216.178 136.158 cv
215.266 133.293 211.098 133.684 208.885 131.991 cv
207.061 127.433 202.763 125.479 201.071 120.921 cv
202.373 110.372 198.726 95.7861 204.587 88.1025 cv
206.931 88.2324 208.233 87.4511 208.364 85.497 cv
219.564 83.6738 227.768 85.2373 237.797 84.1953 cv
239.75 84.456 239.229 85.2373 241.182 84.5859 cv
244.178 85.8877 247.434 86.7998 250.169 88.1025 cv
250.169 89.9258 251.601 90.1855 252.643 91.0976 cv
cp
.721569 .666667 .427451 rgb
f
280.639 85.1064 mo
289.104 86.1484 300.175 85.6279 308.379 85.497 cv
309.03 87.581 308.639 90.8369 309.291 93.0508 cv
313.197 97.7392 310.853 108.549 315.412 112.456 cv
313.979 117.665 319.709 122.614 317.886 126.651 cv
319.449 127.693 319.318 130.428 320.882 131.47 cv
319.84 136.419 322.314 139.675 323.747 143.973 cv
324.919 137.07 328.565 130.298 328.695 123.656 cv
329.607 122.093 330.779 122.744 329.476 120.791 cv
329.346 119.228 331.43 120.01 331.56 118.707 cv
331.17 106.074 337.811 99.3017 337.811 88.1025 cv
339.765 87.7119 340.025 85.8877 341.849 85.497 cv
343.151 85.497 344.193 85.7578 344.714 86.4091 cv
348.36 83.2832 354.351 87.4511 357.607 85.1064 cv
360.993 84.9765 363.338 86.0185 366.333 85.1064 cv
366.072 94.4834 366.072 104.512 366.333 115.842 cv
364.38 122.483 366.854 133.554 366.723 139.023 cv
364.249 148.661 366.723 160.772 366.723 169.498 cv
366.984 171.452 365.552 171.452 365.942 173.405 cv
362.296 172.103 360.082 175.749 358.128 173.015 cv
354.221 174.838 351.486 173.535 347.319 173.015 cv
347.188 159.601 346.537 148.53 347.71 136.158 cv
346.537 130.559 346.277 125.739 347.71 120.4 cv
344.063 120.53 344.063 126.131 344.714 128.214 cv
343.803 131.601 341.198 133.424 341.849 138.503 cv
341.849 139.675 340.547 139.675 340.286 140.586 cv
339.895 153.609 333.905 160.902 332.732 173.405 cv
325.961 173.796 322.444 172.363 315.803 173.796 cv
314.239 170.801 311.505 167.154 312.937 162.596 cv
311.244 159.601 309.681 154.392 309.681 150.875 cv
308.118 150.094 305.904 146.447 307.858 144.754 cv
305.644 143.842 307.207 138.894 305.123 137.722 cv
304.732 136.028 305.644 135.638 305.513 133.944 cv
302.648 131.47 302.909 126 301.867 121.572 cv
298.35 123.005 301.606 128.084 299.653 131.86 cv
299.523 133.554 300.695 133.944 300.565 135.768 cv
298.742 138.763 298.611 146.707 300.565 149.703 cv
299.262 156.996 300.565 166.373 299.653 173.796 cv
293.532 172.885 287.542 173.926 281.551 173.796 cv
279.597 170.02 282.463 166.503 280.639 162.596 cv
282.722 155.563 279.207 144.754 281.551 137.33 cv
280.769 129.907 279.988 123.916 281.941 118.707 cv
279.337 108.679 282.202 97.8701 280.639 85.1064 cv
cp
f
413.343 144.493 mo
416.338 141.889 422.198 142.409 424.282 139.023 cv
423.11 136.549 423.501 134.726 422.589 132.642 cv
424.151 129.907 420.505 126.912 422.198 123.005 cv
420.505 122.614 420.636 119.749 421.287 118.316 cv
418.161 115.712 421.807 107.377 417.9 106.205 cv
417.249 118.968 412.301 132.902 413.343 144.493 cv
cp
402.402 84.7158 mo
413.343 86.0185 425.584 84.456 434.831 85.1064 cv
433.919 91.4883 439.259 95.6552 436.915 100.734 cv
437.045 101.517 438.477 101.126 438.607 101.907 cv
437.826 108.679 440.301 115.061 441.863 120.921 cv
440.04 123.395 444.208 126 442.385 129.646 cv
441.994 131.21 443.947 130.428 444.077 131.34 cv
444.208 132.902 443.556 133.684 443.166 134.726 cv
443.296 135.638 444.728 135.116 444.859 136.028 cv
445.25 148.14 449.548 162.466 450.72 173.796 cv
442.254 175.619 437.826 173.666 429.752 174.708 cv
429.882 167.545 427.538 164.68 427.147 157.517 cv
423.37 157.907 421.547 160.512 417.51 160.772 cv
416.858 161.294 416.858 162.466 416.208 162.986 cv
411.649 161.685 411.259 164.289 408.263 165.461 cv
408.784 169.368 407.221 171.061 406.961 174.316 cv
401.1 174.838 393.156 174.968 386.774 173.796 cv
388.338 155.563 394.328 139.805 394.849 124.307 cv
394.459 122.875 396.151 123.656 396.021 122.614 cv
395.631 119.619 395.631 116.493 397.715 115.061 cv
398.496 103.47 401.621 95.2646 402.402 84.7158 cv
cp
f
493.56 125.609 mo
493.821 127.433 491.998 127.172 492.519 128.995 cv
496.426 126.261 503.459 126.912 505.282 122.353 cv
505.803 115.972 503.849 109.069 505.282 103.34 cv
501.765 100.604 496.686 102.558 493.04 101.907 cv
494.602 108.549 491.087 118.837 493.56 125.609 cv
cp
471.942 83.8047 mo
489.263 84.9765 506.974 82.1113 521.04 86.4091 cv
522.603 90.0556 524.427 93.4414 525.989 97.3486 cv
526.38 101.386 523.775 106.205 526.51 109.2 cv
525.989 110.372 525.989 111.935 524.686 112.456 cv
528.203 117.796 522.994 126 525.468 131.991 cv
524.166 133.684 523.385 135.897 522.994 138.763 cv
521.04 140.847 516.742 140.456 515.44 143.321 cv
517.915 147.88 518.696 153.74 522.212 157.256 cv
521.821 163.768 526.77 167.806 527.291 174.708 cv
518.956 174.838 514.398 175.749 506.454 175.099 cv
506.454 173.926 506.454 172.754 506.454 171.712 cv
505.151 170.41 503.068 167.936 503.979 165.722 cv
500.594 163.117 501.895 155.693 498.51 153.089 cv
498.9 150.875 498.119 149.572 497.728 148.01 cv
496.166 148.4 494.733 149.052 493.56 149.703 cv
493.04 157.646 492.91 164.68 492.519 172.885 cv
486.528 175.88 479.235 172.493 473.505 174.186 cv
471.552 165.722 473.505 155.042 471.942 147.619 cv
472.072 146.577 472.984 146.186 473.114 145.015 cv
471.552 138.503 472.594 125.219 471.942 118.056 cv
472.594 104.772 472.072 97.3486 471.942 83.8047 cv
cp
f
542.394 83.8047 mo
560.105 84.3252 577.817 84.5859 596.441 83.8047 cv
596.832 90.4463 595.268 94.7441 596.441 101.776 cv
592.273 103.47 585.501 101.776 580.682 102.558 cv
579.771 110.502 579.25 118.446 580.682 126.521 cv
580.813 128.084 579.771 128.735 579.51 129.907 cv
580.292 139.805 579.51 156.605 580.682 166.112 cv
580.292 167.414 579.381 168.196 578.99 169.498 cv
579.381 170.931 581.204 172.493 579.901 174.186 cv
574.302 174.447 567.92 174.708 560.236 174.968 cv
556.459 159.991 560.757 141.889 558.543 124.698 cv
558.933 123.005 559.715 121.702 559.845 119.619 cv
558.282 114.019 558.803 108.028 559.455 103.079 cv
554.115 102.037 550.078 103.209 542.785 102.558 cv
542.134 96.5674 543.435 90.707 542.394 83.8047 cv
cp
f
233.862 239.725 mo
234.913 240.496 235.508 241.547 235.648 242.877 cv
235.648 243.822 li
235.648 244.943 235.192 246.028 234.283 247.079 cv
233.931 247.43 233.563 247.745 233.179 248.024 cv
232.794 248.305 232.391 248.586 231.971 248.864 cv
231.48 249.216 231.026 249.513 230.606 249.758 cv
230.185 250.004 229.765 250.301 229.345 250.65 cv
228.574 251.212 227.786 251.667 226.981 252.017 cv
226.176 252.367 225.387 252.717 224.618 253.067 cv
224.127 253.277 223.654 253.471 223.199 253.645 cv
222.743 253.82 222.236 253.978 221.677 254.117 cv
221.256 254.188 220.852 254.259 220.468 254.327 cv
220.082 254.398 219.68 254.433 219.26 254.433 cv
218.698 254.363 218.191 254.327 217.736 254.327 cv
217.28 254.327 216.773 254.327 216.214 254.327 cv
216.214 254.398 216.248 254.433 216.318 254.433 cv
213.377 254.433 li
212.536 254.433 211.749 254.327 211.013 254.117 cv
210.278 253.907 209.558 253.628 208.859 253.277 cv
208.158 252.928 207.475 252.612 206.81 252.331 cv
206.144 252.053 205.498 251.771 204.867 251.491 cv
203.046 250.65 201.54 249.531 200.35 248.129 cv
200.139 247.851 199.912 247.604 199.667 247.394 cv
199.421 247.184 199.158 246.939 198.879 246.658 cv
198.598 246.38 198.354 246.117 198.143 245.871 cv
197.933 245.626 197.653 245.363 197.303 245.083 cv
196.253 244.242 195.376 243.052 194.677 241.511 cv
194.116 240.392 193.627 239.27 193.206 238.149 cv
192.786 237.029 192.506 235.874 192.366 234.683 cv
192.224 234.193 192.137 233.702 192.103 233.212 cv
192.067 232.723 191.98 232.231 191.841 231.741 cv
191.421 230.27 191.281 228.66 191.421 226.908 cv
191.489 226.278 191.559 225.631 191.631 224.965 cv
191.699 224.3 191.804 223.651 191.945 223.021 cv
192.156 222.251 192.366 221.516 192.576 220.815 cv
192.786 220.116 193.065 219.381 193.417 218.609 cv
193.555 218.259 193.731 217.892 193.941 217.506 cv
194.152 217.122 194.362 216.754 194.572 216.402 cv
194.992 215.843 195.376 215.3 195.727 214.774 cv
196.077 214.249 196.427 213.671 196.778 213.041 cv
197.687 211.36 199.018 209.854 200.77 208.523 cv
201.54 207.964 202.294 207.421 203.029 206.895 cv
203.764 206.37 204.587 205.897 205.498 205.477 cv
206.267 205.127 207.073 204.777 207.914 204.427 cv
208.755 204.077 209.63 203.762 210.54 203.481 cv
211.171 203.342 211.801 203.202 212.431 203.061 cv
213.061 202.921 213.726 202.851 214.428 202.851 cv
214.637 202.851 214.864 202.834 215.11 202.798 cv
215.354 202.764 215.617 202.745 215.898 202.745 cv
217.159 202.745 li
218.42 202.745 219.68 202.851 220.94 203.061 cv
222.48 203.27 224.161 203.762 225.983 204.531 cv
227.244 205.093 228.434 205.739 229.555 206.475 cv
230.675 207.21 231.761 208.069 232.812 209.049 cv
233.091 209.33 233.337 209.592 233.548 209.837 cv
233.758 210.083 234.002 210.346 234.283 210.625 cv
234.843 211.186 235.228 211.99 235.438 213.041 cv
235.718 214.092 235.559 215.142 234.966 216.192 cv
234.37 217.243 233.442 217.909 232.181 218.188 cv
230.359 218.609 228.82 218.154 227.559 216.823 cv
227.138 216.402 226.701 216.001 226.246 215.615 cv
225.79 215.23 225.282 214.863 224.722 214.512 cv
223.951 214.022 223.147 213.603 222.306 213.251 cv
221.466 212.901 220.59 212.657 219.68 212.516 cv
218.769 212.306 217.876 212.185 217.001 212.148 cv
216.125 212.113 215.267 212.166 214.428 212.306 cv
211.764 212.657 209.419 213.637 207.388 215.247 cv
207.037 215.599 206.687 215.93 206.338 216.245 cv
205.987 216.561 205.637 216.894 205.288 217.243 cv
204.657 217.944 204.044 218.661 203.449 219.396 cv
202.853 220.132 202.381 220.92 202.031 221.761 cv
201.469 223.021 201.12 224.423 200.98 225.963 cv
200.839 226.664 200.77 227.347 200.77 228.012 cv
200.77 228.678 200.77 229.36 200.77 230.06 cv
200.839 230.831 200.91 231.583 200.98 232.318 cv
201.05 233.054 201.224 233.808 201.506 234.577 cv
201.716 235.139 201.96 235.698 202.241 236.258 cv
202.52 236.819 202.871 237.345 203.292 237.834 cv
203.712 238.464 204.167 239.025 204.657 239.515 cv
205.077 240.076 205.551 240.583 206.075 241.038 cv
206.6 241.494 207.142 241.931 207.704 242.352 cv
209.874 243.893 212.221 244.804 214.742 245.083 cv
215.021 245.153 215.284 245.206 215.53 245.24 cv
215.775 245.276 216.072 245.293 216.424 245.293 cv
217.403 245.293 218.524 245.119 219.785 244.768 cv
220.416 244.558 221.046 244.348 221.677 244.138 cv
222.306 243.927 222.9 243.648 223.462 243.297 cv
225.072 242.527 226.403 241.547 227.454 240.355 cv
227.664 240.216 227.856 240.059 228.032 239.883 cv
228.206 239.709 228.399 239.551 228.61 239.41 cv
228.749 239.341 228.888 239.288 229.03 239.252 cv
229.17 239.218 229.309 239.165 229.45 239.095 cv
230.219 238.885 230.973 238.798 231.709 238.832 cv
232.444 238.868 233.162 239.165 233.862 239.725 cv
cp
f
278.615 235.838 mo
279.175 234.858 279.542 233.842 279.718 232.791 cv
279.891 231.741 280.015 230.69 280.086 229.64 cv
280.086 229.15 280.086 228.678 280.086 228.222 cv
280.086 227.767 280.015 227.328 279.876 226.908 cv
279.876 226.278 279.787 225.647 279.613 225.018 cv
279.437 224.387 279.28 223.757 279.14 223.126 cv
278.859 222.566 278.579 221.988 278.3 221.393 cv
278.019 220.799 277.704 220.221 277.354 219.659 cv
276.443 218.33 275.253 217.069 273.782 215.878 cv
271.12 213.847 268.215 212.797 265.062 212.726 cv
263.172 212.726 li
261.631 212.726 260.125 213.041 258.654 213.671 cv
258.303 213.812 257.935 213.986 257.552 214.196 cv
257.166 214.406 256.798 214.617 256.448 214.827 cv
255.397 215.528 254.382 216.402 253.401 217.453 cv
252.771 218.154 252.21 218.907 251.72 219.712 cv
251.23 220.518 250.705 221.306 250.145 222.076 cv
249.444 223.126 249.024 224.353 248.885 225.753 cv
248.885 230.165 li
248.885 230.795 248.936 231.392 249.042 231.951 cv
249.147 232.513 249.268 233.072 249.41 233.632 cv
250.04 235.943 251.159 238.01 252.771 239.83 cv
253.68 240.951 254.662 241.826 255.713 242.456 cv
255.923 242.598 256.115 242.719 256.291 242.824 cv
256.465 242.929 256.622 243.052 256.763 243.191 cv
257.323 243.333 257.866 243.507 258.391 243.717 cv
258.917 243.927 259.459 244.138 260.02 244.348 cv
260.16 244.418 260.44 244.452 260.86 244.452 cv
261.421 244.594 261.945 244.698 262.436 244.768 cv
262.926 244.838 263.451 244.838 264.012 244.768 cv
264.852 244.768 li
265.273 244.838 265.693 244.838 266.113 244.768 cv
266.534 244.698 266.954 244.628 267.374 244.558 cv
270.315 243.927 272.976 242.492 275.358 240.25 cv
275.918 239.83 276.373 239.341 276.723 238.779 cv
277.354 238.01 277.984 237.029 278.615 235.838 cv
cp
288.595 222.916 mo
288.734 223.336 288.821 223.757 288.857 224.177 cv
288.892 224.597 288.945 225.018 289.015 225.437 cv
289.084 226.488 289.084 227.538 289.015 228.589 cv
288.945 229.64 288.91 230.69 288.91 231.741 cv
288.91 232.092 288.91 232.441 288.91 232.791 cv
288.91 233.143 288.84 233.492 288.7 233.842 cv
288.559 234.403 288.437 234.91 288.333 235.365 cv
288.227 235.821 288.104 236.329 287.965 236.889 cv
287.894 237.239 287.719 237.765 287.439 238.464 cv
286.494 240.355 li
286.352 240.496 286.248 240.583 286.178 240.618 cv
286.108 240.654 286.003 240.741 285.864 240.881 cv
285.864 240.951 285.845 241.021 285.811 241.091 cv
285.775 241.161 285.759 241.267 285.759 241.406 cv
285.267 242.178 284.761 242.965 284.235 243.77 cv
283.71 244.575 283.133 245.363 282.502 246.133 cv
282.082 246.624 281.643 247.079 281.188 247.499 cv
280.732 247.919 280.296 248.34 279.876 248.76 cv
279.595 248.97 279.332 249.198 279.088 249.442 cv
278.842 249.688 278.579 249.881 278.3 250.02 cv
277.948 250.161 277.651 250.319 277.407 250.493 cv
277.161 250.669 276.863 250.826 276.513 250.966 cv
275.952 251.317 275.34 251.614 274.676 251.858 cv
274.009 252.105 273.362 252.367 272.732 252.646 cv
271.96 252.998 271.173 253.261 270.368 253.435 cv
269.562 253.61 268.774 253.803 268.005 254.013 cv
267.303 254.153 266.602 254.259 265.903 254.327 cv
265.202 254.398 264.467 254.433 263.697 254.433 cv
262.786 254.433 261.911 254.327 261.071 254.117 cv
260.51 254.049 259.984 253.943 259.495 253.803 cv
259.004 253.663 258.478 253.523 257.919 253.382 cv
256.517 253.103 255.047 252.578 253.507 251.807 cv
253.087 251.596 252.682 251.404 252.299 251.228 cv
251.913 251.055 251.511 250.826 251.091 250.546 cv
250.599 250.196 250.145 249.862 249.724 249.548 cv
249.304 249.232 248.919 248.83 248.569 248.34 cv
248.428 248.061 248.236 247.814 247.991 247.604 cv
247.745 247.394 247.518 247.184 247.308 246.974 cv
246.888 246.484 246.45 246.028 245.995 245.608 cv
245.539 245.187 245.102 244.698 244.682 244.138 cv
243.981 243.297 243.456 242.492 243.106 241.721 cv
242.686 240.951 242.301 240.163 241.951 239.357 cv
241.599 238.553 241.284 237.728 241.005 236.889 cv
240.864 236.258 240.743 235.645 240.637 235.05 cv
240.532 234.456 240.409 233.878 240.269 233.316 cv
240.129 232.686 240.042 232.074 240.008 231.478 cv
239.971 230.884 239.955 230.27 239.955 229.64 cv
239.955 229.36 239.955 229.08 239.955 228.799 cv
239.955 228.52 239.919 228.205 239.849 227.853 cv
239.709 227.504 239.709 227.118 239.849 226.698 cv
239.989 226.349 240.042 226.052 240.008 225.805 cv
239.971 225.561 239.955 225.332 239.955 225.122 cv
240.023 224.562 240.094 224.02 240.165 223.494 cv
240.233 222.969 240.339 222.427 240.48 221.865 cv
241.04 219.765 241.809 217.873 242.791 216.192 cv
243.632 214.792 244.472 213.566 245.312 212.516 cv
246.642 210.835 248.218 209.364 250.04 208.103 cv
252.351 206.423 254.873 205.162 257.604 204.321 cv
259.353 203.691 261.139 203.376 262.962 203.376 cv
263.311 203.376 263.592 203.342 263.803 203.27 cv
264.152 203.132 264.502 203.132 264.852 203.27 cv
264.992 203.342 265.132 203.376 265.273 203.376 cv
266.392 203.307 267.461 203.376 268.477 203.586 cv
269.491 203.796 270.525 204.042 271.576 204.321 cv
273.468 204.952 li
275.988 205.934 278.158 207.228 279.98 208.839 cv
280.19 208.979 280.401 209.154 280.611 209.364 cv
280.821 209.574 281.031 209.75 281.241 209.89 cv
282.15 210.871 282.991 211.922 283.762 213.041 cv
284.182 213.742 284.603 214.406 285.023 215.037 cv
285.443 215.667 285.864 216.298 286.284 216.928 cv
286.844 217.769 287.299 218.714 287.649 219.765 cv
287.789 220.326 287.947 220.852 288.122 221.34 cv
288.297 221.831 288.454 222.356 288.595 222.916 cv
cp
f
333.032 207.578 mo
333.032 208.279 333.014 208.943 332.98 209.574 cv
332.944 210.204 332.928 210.871 332.928 211.57 cv
332.928 219.449 li
332.928 219.801 332.944 220.168 332.98 220.553 cv
333.014 220.938 332.962 221.306 332.822 221.655 cv
332.752 221.797 332.733 221.918 332.769 222.023 cv
332.804 222.128 332.822 222.251 332.822 222.391 cv
332.822 228.799 li
332.822 229.01 332.804 229.22 332.769 229.43 cv
332.733 229.64 332.786 229.815 332.928 229.955 cv
332.996 230.096 333.014 230.218 332.98 230.322 cv
332.944 230.428 332.928 230.551 332.928 230.69 cv
332.928 244.662 li
332.928 244.943 332.909 245.206 332.875 245.45 cv
332.839 245.696 332.856 245.994 332.928 246.344 cv
332.996 246.624 333.032 246.904 333.032 247.184 cv
333.032 247.465 333.032 247.779 333.032 248.129 cv
333.032 249.811 li
333.032 250.511 332.962 251.036 332.822 251.386 cv
332.681 251.596 332.559 251.824 332.455 252.069 cv
332.349 252.315 332.226 252.507 332.087 252.646 cv
332.016 252.788 331.946 252.893 331.877 252.962 cv
331.806 253.032 331.735 253.138 331.667 253.277 cv
331.315 253.628 330.913 253.907 330.459 254.117 cv
330.002 254.327 329.565 254.502 329.145 254.643 cv
328.304 254.782 327.533 254.643 326.834 254.223 cv
326.344 253.873 325.958 253.453 325.678 252.962 cv
325.469 252.683 325.275 252.402 325.1 252.121 cv
324.925 251.843 324.733 251.561 324.523 251.281 cv
324.172 250.722 323.822 250.214 323.472 249.758 cv
323.121 249.303 322.771 248.796 322.422 248.234 cv
321.65 247.184 320.915 245.959 320.216 244.558 cv
319.586 243.228 318.779 241.896 317.8 240.565 cv
317.274 240.04 li
315.384 237.519 li
315.242 237.169 315.05 236.872 314.805 236.626 cv
314.559 236.381 314.297 236.118 314.017 235.838 cv
313.036 234.997 311.951 234.613 310.761 234.683 cv
309.22 234.823 308.169 235.454 307.609 236.573 cv
307.399 236.925 307.223 237.292 307.084 237.677 cv
306.942 238.062 306.908 238.464 306.978 238.885 cv
306.978 239.446 306.942 239.9 306.874 240.25 cv
306.803 240.392 306.768 240.602 306.768 240.881 cv
306.768 249.075 li
306.768 249.426 306.732 249.775 306.664 250.125 cv
306.593 250.477 306.558 250.826 306.558 251.176 cv
305.997 252.856 304.982 253.943 303.512 254.433 cv
301.831 254.853 300.36 254.502 299.099 253.382 cv
298.609 252.893 298.26 252.331 298.049 251.701 cv
297.839 251.212 297.734 250.616 297.734 249.915 cv
297.734 247.814 297.716 245.731 297.681 243.664 cv
297.645 241.6 297.629 239.515 297.629 237.414 cv
297.629 236.573 297.645 235.717 297.681 234.84 cv
297.716 233.965 297.734 233.072 297.734 232.161 cv
297.734 231.53 li
297.874 231.252 297.926 230.989 297.891 230.743 cv
297.855 230.498 297.839 230.235 297.839 229.955 cv
297.978 229.395 297.978 228.799 297.839 228.169 cv
297.839 227.819 297.855 227.486 297.891 227.171 cv
297.926 226.855 297.874 226.524 297.734 226.173 cv
297.663 226.033 297.645 225.929 297.681 225.857 cv
297.716 225.789 297.734 225.684 297.734 225.543 cv
297.734 224.177 li
297.734 221.655 297.716 219.118 297.681 216.561 cv
297.645 214.005 297.629 211.465 297.629 208.943 cv
297.629 208.665 297.645 208.419 297.681 208.208 cv
297.716 207.998 297.734 207.754 297.734 207.473 cv
297.874 206.283 298.328 205.232 299.099 204.321 cv
299.309 204.111 299.536 203.937 299.782 203.796 cv
300.027 203.656 300.324 203.518 300.676 203.376 cv
300.886 203.376 301.13 203.307 301.411 203.166 cv
302.462 203.166 li
303.791 203.446 304.842 204.253 305.613 205.582 cv
306.312 206.633 306.995 207.684 307.662 208.733 cv
308.326 209.784 309.01 210.871 309.71 211.99 cv
310.48 213.183 311.197 214.319 311.864 215.404 cv
312.528 216.491 313.246 217.629 314.017 218.819 cv
315.347 220.71 317.028 221.971 319.06 222.601 cv
319.27 222.742 319.497 222.811 319.743 222.811 cv
319.987 222.811 320.179 222.848 320.321 222.916 cv
320.671 222.848 320.968 222.759 321.214 222.653 cv
321.458 222.549 321.72 222.427 322.002 222.286 cv
322.491 221.865 322.877 221.201 323.157 220.29 cv
323.507 219.449 323.682 218.75 323.682 218.188 cv
323.682 217.909 323.717 217.734 323.788 217.663 cv
323.856 217.313 323.892 216.788 323.892 216.088 cv
323.892 211.675 li
323.892 211.325 323.909 210.958 323.945 210.572 cv
323.979 210.188 324.032 209.784 324.102 209.364 cv
324.102 208.313 li
324.102 207.614 324.189 206.948 324.365 206.317 cv
324.539 205.687 324.907 205.093 325.469 204.531 cv
326.028 203.972 326.729 203.586 327.569 203.376 cv
328.83 203.376 li
329.81 203.376 330.65 203.656 331.351 204.217 cv
332.051 204.777 332.576 205.548 332.928 206.527 cv
332.996 206.737 333.032 207.089 333.032 207.578 cv
cp
f
372.111 203.376 mo
373.02 203.937 373.704 204.637 374.16 205.477 cv
374.615 206.317 374.772 207.228 374.633 208.208 cv
374.352 209.61 373.74 210.661 372.795 211.36 cv
371.848 212.061 370.92 212.446 370.011 212.516 cv
369.59 212.516 369.17 212.516 368.75 212.516 cv
368.33 212.516 367.909 212.586 367.489 212.726 cv
365.598 213.146 364.127 214.162 363.077 215.772 cv
362.305 216.964 361.816 218.435 361.606 220.185 cv
361.465 221.025 361.412 221.85 361.448 222.653 cv
361.483 223.46 361.501 224.282 361.501 225.122 cv
361.43 225.684 361.412 226.209 361.448 226.698 cv
361.483 227.188 361.501 227.68 361.501 228.169 cv
361.501 228.52 361.483 228.835 361.448 229.114 cv
361.412 229.395 361.465 229.71 361.606 230.06 cv
361.675 230.201 361.693 230.322 361.658 230.428 cv
361.622 230.532 361.606 230.655 361.606 230.795 cv
361.606 235.628 li
361.606 235.838 361.622 236.048 361.658 236.258 cv
361.693 236.468 361.64 236.679 361.501 236.889 cv
361.43 236.959 361.412 237.046 361.448 237.151 cv
361.483 237.256 361.501 237.379 361.501 237.519 cv
361.501 239.515 li
361.43 239.866 361.412 240.216 361.448 240.565 cv
361.483 240.917 361.43 241.267 361.291 241.616 cv
361.22 241.826 361.185 242.142 361.185 242.561 cv
361.185 246.658 li
361.185 250.02 li
361.185 251.212 360.765 252.263 359.925 253.172 cv
359.224 253.873 358.313 254.327 357.193 254.538 cv
356.843 254.677 356.527 254.677 356.248 254.538 cv
355.758 254.398 355.319 254.24 354.935 254.064 cv
354.55 253.891 354.216 253.592 353.937 253.172 cv
353.866 253.103 353.779 253.051 353.675 253.015 cv
353.569 252.979 353.48 252.928 353.412 252.856 cv
352.64 251.807 352.256 250.546 352.256 249.075 cv
352.325 246.414 352.361 243.788 352.361 241.195 cv
352.361 238.605 352.361 235.979 352.361 233.316 cv
352.361 232.896 352.361 232.46 352.361 232.003 cv
352.361 231.549 352.291 231.11 352.151 230.69 cv
352.08 230.551 352.062 230.464 352.098 230.428 cv
352.133 230.394 352.151 230.306 352.151 230.165 cv
352.151 227.014 li
352.08 226.874 352.08 226.716 352.151 226.541 cv
352.22 226.366 352.291 226.209 352.361 226.067 cv
352.22 225.857 352.151 225.647 352.151 225.437 cv
352.151 225.228 352.151 225.018 352.151 224.808 cv
352.08 224.107 352.062 223.425 352.098 222.759 cv
352.133 222.094 352.115 221.411 352.046 220.71 cv
351.905 218.54 351.274 216.578 350.155 214.827 cv
349.034 213.427 347.563 212.516 345.743 212.096 cv
345.601 212.026 345.48 212.009 345.375 212.043 cv
345.27 212.079 345.146 212.096 345.008 212.096 cv
343.431 212.096 li
342.1 212.096 340.876 211.711 339.755 210.939 cv
339.755 210.871 339.738 210.835 339.702 210.835 cv
339.668 210.835 339.649 210.801 339.649 210.729 cv
338.95 210.03 338.53 209.277 338.388 208.471 cv
338.249 207.667 338.302 206.895 338.547 206.16 cv
338.793 205.425 339.247 204.777 339.912 204.217 cv
340.579 203.656 341.366 203.307 342.276 203.166 cv
347.318 203.166 li
347.807 203.097 348.263 203.079 348.684 203.113 cv
349.104 203.149 349.524 203.097 349.945 202.956 cv
350.365 202.956 li
351.555 202.956 352.728 202.956 353.885 202.956 cv
355.04 202.956 356.212 202.921 357.404 202.851 cv
357.964 202.851 358.384 202.816 358.664 202.745 cv
359.505 202.745 li
364.232 202.745 li
364.442 202.745 li
365.423 202.887 366.368 202.939 367.279 202.903 cv
368.188 202.869 369.099 202.851 370.011 202.851 cv
370.71 202.851 371.411 203.026 372.111 203.376 cv
cp
f
398.69 212.2 mo
398.129 212.2 397.622 212.219 397.167 212.253 cv
396.711 212.289 396.203 212.376 395.643 212.516 cv
394.242 212.726 393.122 213.217 392.282 213.986 cv
391.511 214.617 390.95 215.457 390.6 216.508 cv
390.46 216.928 390.354 217.349 390.286 217.769 cv
390.215 218.188 390.144 218.645 390.076 219.134 cv
390.076 222.181 li
390.076 224.177 li
390.144 224.457 390.197 224.702 390.233 224.912 cv
390.267 225.122 390.32 225.368 390.39 225.647 cv
390.53 226.488 390.88 227.084 391.441 227.434 cv
392.702 228.379 li
393.543 229.01 394.312 229.36 395.013 229.43 cv
395.082 229.43 395.135 229.447 395.171 229.482 cv
395.205 229.519 395.258 229.534 395.328 229.534 cv
398.269 229.534 li
399.32 229.534 400.371 229.36 401.422 229.01 cv
403.312 228.239 404.747 226.874 405.728 224.912 cv
406.218 223.933 406.464 222.776 406.464 221.445 cv
406.603 219.765 406.183 218.225 405.204 216.823 cv
404.363 215.353 403.242 214.196 401.842 213.356 cv
401.001 212.726 399.951 212.342 398.69 212.2 cv
cp
411.822 232.581 mo
411.261 233.353 410.841 234.122 410.561 234.893 cv
410.141 236.573 410.21 238.114 410.771 239.515 cv
411.541 241.477 412.557 243.473 413.818 245.503 cv
414.028 245.854 414.22 246.169 414.395 246.448 cv
414.57 246.729 414.763 247.044 414.973 247.394 cv
415.113 247.604 415.219 247.851 415.289 248.129 cv
415.357 248.41 415.463 248.69 415.604 248.97 cv
415.604 249.39 415.586 249.811 415.552 250.23 cv
415.515 250.65 415.428 251.036 415.289 251.386 cv
414.658 252.998 413.503 254.013 411.822 254.433 cv
410.911 254.712 409.93 254.625 408.881 254.17 cv
407.83 253.715 407.058 252.998 406.569 252.017 cv
405.868 250.826 405.378 249.775 405.098 248.864 cv
404.957 248.444 404.783 248.042 404.573 247.656 cv
404.363 247.272 404.153 246.904 403.943 246.554 cv
403.732 246.064 403.539 245.573 403.365 245.083 cv
403.189 244.594 402.997 244.068 402.787 243.507 cv
402.436 242.456 401.842 241.547 401.001 240.775 cv
399.599 239.585 398.023 239.131 396.274 239.41 cv
395.363 239.551 394.556 239.866 393.857 240.355 cv
392.246 241.547 391.195 243.052 390.706 244.873 cv
390.636 245.224 390.583 245.573 390.549 245.923 cv
390.512 246.274 390.496 246.624 390.496 246.974 cv
390.496 247.394 390.46 247.709 390.39 247.919 cv
390.32 248.061 390.303 248.2 390.338 248.34 cv
390.373 248.48 390.39 248.62 390.39 248.76 cv
390.39 250.546 li
389.761 252.646 388.464 253.943 386.504 254.433 cv
384.928 254.433 li
384.508 254.363 384.122 254.188 383.772 253.907 cv
382.231 253.067 381.39 251.771 381.251 250.02 cv
381.18 249.741 381.146 249.39 381.146 248.97 cv
381.146 244.662 li
381.146 244.242 381.162 243.84 381.198 243.454 cv
381.233 243.07 381.18 242.666 381.041 242.246 cv
381.041 241.477 381.007 240.671 380.935 239.83 cv
380.867 238.989 380.901 238.186 381.041 237.414 cv
381.041 237.135 381.11 236.853 381.251 236.573 cv
381.39 236.014 381.461 235.594 381.461 235.312 cv
381.32 234.543 381.32 233.772 381.461 233.001 cv
381.461 232.651 381.425 232.337 381.356 232.056 cv
381.285 231.777 381.251 231.462 381.251 231.11 cv
381.251 230.341 381.233 229.605 381.198 228.904 cv
381.162 228.205 381.146 227.47 381.146 226.698 cv
381.146 225.929 381.162 225.193 381.198 224.492 cv
381.233 223.793 381.251 223.092 381.251 222.391 cv
381.251 221.901 381.285 221.516 381.356 221.235 cv
381.425 221.096 381.461 220.852 381.461 220.5 cv
381.461 211.36 li
381.461 210.871 381.39 210.52 381.251 210.31 cv
381.251 209.68 li
381.251 207.578 li
381.251 206.038 381.916 204.777 383.247 203.796 cv
383.596 203.446 383.982 203.236 384.402 203.166 cv
384.823 203.097 385.243 203.026 385.663 202.956 cv
386.084 202.956 386.504 202.939 386.924 202.903 cv
387.345 202.869 387.728 202.887 388.08 202.956 cv
388.779 203.097 389.462 203.149 390.128 203.113 cv
390.793 203.079 391.475 203.097 392.177 203.166 cv
396.169 203.166 li
396.448 203.166 396.728 203.166 397.01 203.166 cv
397.288 203.166 397.569 203.202 397.849 203.27 cv
398.129 203.342 398.514 203.376 399.006 203.376 cv
399.845 203.307 400.668 203.359 401.474 203.533 cv
402.278 203.709 403.066 203.972 403.838 204.321 cv
404.258 204.463 404.642 204.603 404.993 204.741 cv
406.953 205.442 408.775 206.633 410.456 208.313 cv
412.487 210.415 413.923 212.936 414.763 215.878 cv
414.903 216.508 415.026 217.122 415.131 217.716 cv
415.236 218.311 415.357 218.924 415.499 219.555 cv
415.638 219.905 415.691 220.273 415.656 220.657 cv
415.62 221.043 415.604 221.411 415.604 221.761 cv
415.533 222.742 415.446 223.67 415.342 224.545 cv
415.236 225.421 415.008 226.314 414.658 227.224 cv
414.307 228.205 413.905 229.15 413.45 230.06 cv
412.994 230.971 412.452 231.811 411.822 232.581 cv
cp
f
443.024 235.312 mo
443.374 235.312 443.723 235.278 444.075 235.208 cv
444.425 235.139 444.774 235.068 445.126 234.997 cv
445.685 234.929 446.14 234.543 446.491 233.842 cv
446.701 233.422 446.806 233.001 446.806 232.581 cv
446.806 232.161 446.736 231.741 446.596 231.32 cv
446.315 230.411 446.053 229.534 445.808 228.694 cv
445.562 227.853 445.336 226.944 445.126 225.963 cv
444.984 225.403 444.793 224.965 444.548 224.649 cv
444.302 224.334 444.005 224.003 443.655 223.651 cv
443.303 223.441 442.884 223.407 442.394 223.547 cv
442.043 223.827 441.746 224.143 441.501 224.492 cv
441.255 224.843 441.063 225.193 440.924 225.543 cv
440.432 226.593 440.065 227.662 439.82 228.747 cv
439.574 229.833 439.277 230.9 438.928 231.951 cv
438.786 232.441 438.822 232.862 439.032 233.212 cv
439.172 233.492 439.311 233.702 439.453 233.842 cv
440.188 234.577 li
440.608 234.858 440.924 234.997 441.134 234.997 cv
441.483 235.068 441.799 235.139 442.079 235.208 cv
442.358 235.278 442.674 235.312 443.024 235.312 cv
cp
461.934 246.974 mo
462.214 247.604 462.389 248.2 462.46 248.76 cv
462.529 249.881 462.318 250.966 461.829 252.017 cv
461.057 253.348 459.798 254.117 458.048 254.327 cv
456.855 254.538 455.666 254.153 454.475 253.172 cv
453.914 252.612 453.494 252.017 453.215 251.386 cv
452.934 250.686 452.513 249.986 451.954 249.285 cv
451.813 249.075 451.655 248.849 451.481 248.603 cv
451.305 248.357 451.148 248.129 451.009 247.919 cv
450.657 247.641 450.343 247.394 450.063 247.184 cv
449.783 246.974 449.502 246.729 449.222 246.448 cv
448.872 246.169 448.417 245.923 447.857 245.713 cv
445.966 244.943 444.109 244.662 442.289 244.873 cv
441.378 244.943 440.503 245.153 439.663 245.503 cv
438.822 245.783 437.911 246.186 436.931 246.711 cv
435.95 247.236 435.179 247.779 434.62 248.34 cv
434.34 248.55 434.095 248.796 433.885 249.075 cv
433.533 249.495 433.236 249.915 432.992 250.336 cv
432.746 250.756 432.483 251.176 432.204 251.596 cv
431.713 252.436 431.117 253.103 430.418 253.592 cv
429.717 254.153 428.911 254.433 428.002 254.433 cv
427.266 254.433 li
426.985 254.293 426.723 254.17 426.478 254.064 cv
426.232 253.96 425.97 253.839 425.69 253.697 cv
424.149 252.856 423.344 251.596 423.274 249.915 cv
423.205 249.216 423.274 248.444 423.484 247.604 cv
423.834 246.624 424.131 245.679 424.378 244.768 cv
424.622 243.858 424.919 242.913 425.27 241.931 cv
425.41 241.652 425.533 241.39 425.637 241.144 cv
425.743 240.898 425.864 240.636 426.006 240.355 cv
426.565 239.446 427.004 238.517 427.319 237.571 cv
427.634 236.626 427.931 235.664 428.212 234.683 cv
428.351 233.912 428.544 233.195 428.79 232.528 cv
429.034 231.864 429.297 231.181 429.578 230.48 cv
429.717 230.131 429.822 229.833 429.892 229.587 cv
429.962 229.343 430.066 229.08 430.208 228.799 cv
430.557 228.029 430.854 227.241 431.1 226.436 cv
431.345 225.631 431.608 224.843 431.888 224.071 cv
432.378 222.882 432.834 221.691 433.255 220.5 cv
433.675 219.31 434.095 218.12 434.515 216.928 cv
434.794 216.228 435.041 215.528 435.251 214.827 cv
435.461 214.128 435.671 213.393 435.881 212.621 cv
436.091 211.851 436.317 211.134 436.563 210.467 cv
436.808 209.803 437.036 209.085 437.247 208.313 cv
437.457 207.754 437.648 207.21 437.824 206.686 cv
437.998 206.16 438.156 205.618 438.297 205.057 cv
438.576 204.357 438.928 203.796 439.347 203.376 cv
440.678 201.905 442.358 201.521 444.39 202.221 cv
445.58 202.641 446.455 203.518 447.016 204.847 cv
447.366 205.968 447.647 206.948 447.857 207.788 cv
448.207 208.56 448.504 209.364 448.75 210.204 cv
448.995 211.045 449.258 211.886 449.538 212.726 cv
449.887 213.566 450.203 214.425 450.483 215.3 cv
450.762 216.176 451.078 217.033 451.428 217.873 cv
452.339 220.116 453.178 222.391 453.95 224.702 cv
454.72 227.014 455.49 229.324 456.262 231.636 cv
456.541 232.407 456.84 233.195 457.154 233.999 cv
457.47 234.806 457.766 235.594 458.048 236.363 cv
460.254 242.352 li
460.533 243.123 460.796 243.893 461.042 244.662 cv
461.286 245.434 461.583 246.204 461.934 246.974 cv
cp
f
509.418 239.725 mo
510.469 240.496 511.063 241.547 511.204 242.877 cv
511.204 243.822 li
511.204 244.943 510.748 246.028 509.839 247.079 cv
509.487 247.43 509.119 247.745 508.735 248.024 cv
508.349 248.305 507.947 248.586 507.527 248.864 cv
507.036 249.216 506.582 249.513 506.162 249.758 cv
505.741 250.004 505.321 250.301 504.901 250.65 cv
504.13 251.212 503.342 251.667 502.537 252.017 cv
501.731 252.367 500.943 252.717 500.174 253.067 cv
499.682 253.277 499.21 253.471 498.755 253.645 cv
498.299 253.82 497.792 253.978 497.232 254.117 cv
496.811 254.188 496.408 254.259 496.023 254.327 cv
495.637 254.398 495.236 254.433 494.815 254.433 cv
494.254 254.363 493.747 254.327 493.292 254.327 cv
492.836 254.327 492.329 254.327 491.769 254.327 cv
491.769 254.398 491.803 254.433 491.874 254.433 cv
488.932 254.433 li
488.092 254.433 487.304 254.327 486.569 254.117 cv
485.834 253.907 485.114 253.628 484.415 253.277 cv
483.714 252.928 483.031 252.612 482.366 252.331 cv
481.7 252.053 481.053 251.771 480.423 251.491 cv
478.601 250.65 477.095 249.531 475.906 248.129 cv
475.695 247.851 475.468 247.604 475.222 247.394 cv
474.976 247.184 474.714 246.939 474.434 246.658 cv
474.154 246.38 473.91 246.117 473.699 245.871 cv
473.489 245.626 473.209 245.363 472.859 245.083 cv
471.808 244.242 470.931 243.052 470.232 241.511 cv
469.672 240.392 469.182 239.27 468.762 238.149 cv
468.342 237.029 468.061 235.874 467.922 234.683 cv
467.78 234.193 467.693 233.702 467.659 233.212 cv
467.623 232.723 467.536 232.231 467.396 231.741 cv
466.976 230.27 466.837 228.66 466.976 226.908 cv
467.045 226.278 467.115 225.631 467.186 224.965 cv
467.255 224.3 467.36 223.651 467.501 223.021 cv
467.712 222.251 467.922 221.516 468.132 220.815 cv
468.342 220.116 468.621 219.381 468.972 218.609 cv
469.111 218.259 469.287 217.892 469.497 217.506 cv
469.708 217.122 469.918 216.754 470.128 216.402 cv
470.548 215.843 470.931 215.3 471.283 214.774 cv
471.633 214.249 471.982 213.671 472.334 213.041 cv
473.243 211.36 474.574 209.854 476.326 208.523 cv
477.095 207.964 477.849 207.421 478.585 206.895 cv
479.32 206.37 480.142 205.897 481.053 205.477 cv
481.823 205.127 482.629 204.777 483.47 204.427 cv
484.31 204.077 485.185 203.762 486.095 203.481 cv
486.726 203.342 487.356 203.202 487.987 203.061 cv
488.617 202.921 489.282 202.851 489.983 202.851 cv
490.193 202.851 490.42 202.834 490.666 202.798 cv
490.91 202.764 491.173 202.745 491.454 202.745 cv
492.715 202.745 li
493.975 202.745 495.236 202.851 496.496 203.061 cv
498.036 203.27 499.717 203.762 501.539 204.531 cv
502.8 205.093 503.99 205.739 505.111 206.475 cv
506.23 207.21 507.317 208.069 508.368 209.049 cv
508.646 209.33 508.892 209.592 509.103 209.837 cv
509.313 210.083 509.557 210.346 509.839 210.625 cv
510.398 211.186 510.784 211.99 510.994 213.041 cv
511.273 214.092 511.115 215.142 510.521 216.192 cv
509.926 217.243 508.998 217.909 507.737 218.188 cv
505.915 218.609 504.376 218.154 503.115 216.823 cv
502.694 216.402 502.257 216.001 501.802 215.615 cv
501.345 215.23 500.838 214.863 500.278 214.512 cv
499.507 214.022 498.703 213.603 497.862 213.251 cv
497.021 212.901 496.145 212.657 495.236 212.516 cv
494.325 212.306 493.431 212.185 492.556 212.148 cv
491.68 212.113 490.823 212.166 489.983 212.306 cv
487.32 212.657 484.974 213.637 482.944 215.247 cv
482.593 215.599 482.243 215.93 481.893 216.245 cv
481.543 216.561 481.193 216.894 480.844 217.243 cv
480.213 217.944 479.599 218.661 479.005 219.396 cv
478.409 220.132 477.936 220.92 477.587 221.761 cv
477.025 223.021 476.676 224.423 476.536 225.963 cv
476.394 226.664 476.326 227.347 476.326 228.012 cv
476.326 228.678 476.326 229.36 476.326 230.06 cv
476.394 230.831 476.466 231.583 476.536 232.318 cv
476.605 233.054 476.78 233.808 477.061 234.577 cv
477.271 235.139 477.515 235.698 477.797 236.258 cv
478.076 236.819 478.427 237.345 478.847 237.834 cv
479.267 238.464 479.722 239.025 480.213 239.515 cv
480.633 240.076 481.106 240.583 481.631 241.038 cv
482.156 241.494 482.698 241.931 483.26 242.352 cv
485.429 243.893 487.777 244.804 490.298 245.083 cv
490.577 245.153 490.84 245.206 491.086 245.24 cv
491.331 245.276 491.628 245.293 491.979 245.293 cv
492.959 245.293 494.08 245.119 495.341 244.768 cv
495.971 244.558 496.601 244.348 497.232 244.138 cv
497.862 243.927 498.456 243.648 499.017 243.297 cv
500.628 242.527 501.959 241.547 503.01 240.355 cv
503.22 240.216 503.412 240.059 503.588 239.883 cv
503.762 239.709 503.955 239.551 504.166 239.41 cv
504.304 239.341 504.444 239.288 504.586 239.252 cv
504.725 239.218 504.865 239.165 505.006 239.095 cv
505.775 238.885 506.529 238.798 507.264 238.832 cv
508 238.868 508.718 239.165 509.418 239.725 cv
cp
f
549.653 203.376 mo
550.562 203.937 551.246 204.637 551.702 205.477 cv
552.157 206.317 552.314 207.228 552.175 208.208 cv
551.894 209.61 551.282 210.661 550.337 211.36 cv
549.39 212.061 548.462 212.446 547.552 212.516 cv
547.132 212.516 546.712 212.516 546.292 212.516 cv
545.872 212.516 545.451 212.586 545.031 212.726 cv
543.14 213.146 541.669 214.162 540.619 215.772 cv
539.847 216.964 539.358 218.435 539.148 220.185 cv
539.007 221.025 538.954 221.85 538.99 222.653 cv
539.025 223.46 539.043 224.282 539.043 225.122 cv
538.972 225.684 538.954 226.209 538.99 226.698 cv
539.025 227.188 539.043 227.68 539.043 228.169 cv
539.043 228.52 539.025 228.835 538.99 229.114 cv
538.954 229.395 539.007 229.71 539.148 230.06 cv
539.217 230.201 539.235 230.322 539.2 230.428 cv
539.164 230.532 539.148 230.655 539.148 230.795 cv
539.148 235.628 li
539.148 235.838 539.164 236.048 539.2 236.258 cv
539.235 236.468 539.182 236.679 539.043 236.889 cv
538.972 236.959 538.954 237.046 538.99 237.151 cv
539.025 237.256 539.043 237.379 539.043 237.519 cv
539.043 239.515 li
538.972 239.866 538.954 240.216 538.99 240.565 cv
539.025 240.917 538.972 241.267 538.833 241.616 cv
538.762 241.826 538.727 242.142 538.727 242.561 cv
538.727 246.658 li
538.727 250.02 li
538.727 251.212 538.307 252.263 537.467 253.172 cv
536.766 253.873 535.855 254.327 534.735 254.538 cv
534.385 254.677 534.069 254.677 533.79 254.538 cv
533.3 254.398 532.861 254.24 532.477 254.064 cv
532.092 253.891 531.758 253.592 531.479 253.172 cv
531.408 253.103 531.321 253.051 531.217 253.015 cv
531.111 252.979 531.022 252.928 530.954 252.856 cv
530.182 251.807 529.798 250.546 529.798 249.075 cv
529.867 246.414 529.903 243.788 529.903 241.195 cv
529.903 238.605 529.903 235.979 529.903 233.316 cv
529.903 232.896 529.903 232.46 529.903 232.003 cv
529.903 231.549 529.833 231.11 529.693 230.69 cv
529.622 230.551 529.604 230.464 529.64 230.428 cv
529.675 230.394 529.693 230.306 529.693 230.165 cv
529.693 227.014 li
529.622 226.874 529.622 226.716 529.693 226.541 cv
529.761 226.366 529.833 226.209 529.903 226.067 cv
529.761 225.857 529.693 225.647 529.693 225.437 cv
529.693 225.228 529.693 225.018 529.693 224.808 cv
529.622 224.107 529.604 223.425 529.64 222.759 cv
529.675 222.094 529.657 221.411 529.588 220.71 cv
529.447 218.54 528.816 216.578 527.697 214.827 cv
526.576 213.427 525.105 212.516 523.285 212.096 cv
523.143 212.026 523.022 212.009 522.917 212.043 cv
522.812 212.079 522.688 212.096 522.55 212.096 cv
520.973 212.096 li
519.642 212.096 518.418 211.711 517.297 210.939 cv
517.297 210.871 517.28 210.835 517.244 210.835 cv
517.21 210.835 517.191 210.801 517.191 210.729 cv
516.492 210.03 516.072 209.277 515.93 208.471 cv
515.791 207.667 515.844 206.895 516.089 206.16 cv
516.335 205.425 516.789 204.777 517.454 204.217 cv
518.121 203.656 518.908 203.307 519.818 203.166 cv
524.86 203.166 li
525.349 203.097 525.805 203.079 526.226 203.113 cv
526.646 203.149 527.066 203.097 527.487 202.956 cv
527.907 202.956 li
529.097 202.956 530.27 202.956 531.427 202.956 cv
532.582 202.956 533.754 202.921 534.946 202.851 cv
535.506 202.851 535.926 202.816 536.206 202.745 cv
537.047 202.745 li
541.774 202.745 li
541.984 202.745 li
542.965 202.887 543.91 202.939 544.821 202.903 cv
545.73 202.869 546.641 202.851 547.552 202.851 cv
548.252 202.851 548.953 203.026 549.653 203.376 cv
cp
f
589.679 233.212 mo
590.029 233.772 590.326 234.333 590.572 234.893 cv
590.816 235.454 591.009 236.014 591.15 236.573 cv
591.57 237.976 591.71 239.551 591.57 241.301 cv
591.5 241.862 591.413 242.404 591.307 242.929 cv
591.202 243.454 591.045 243.998 590.835 244.558 cv
590.204 246.238 589.364 247.814 588.313 249.285 cv
587.402 250.686 586.071 251.771 584.321 252.542 cv
582.43 253.453 580.503 254.049 578.543 254.327 cv
577.843 254.467 577.159 254.572 576.495 254.643 cv
575.828 254.712 575.145 254.677 574.446 254.538 cv
573.605 254.467 572.765 254.38 571.925 254.275 cv
571.085 254.17 570.278 253.943 569.509 253.592 cv
565.726 252.017 li
564.325 251.246 563.205 250.23 562.365 248.97 cv
561.944 248.41 561.577 247.814 561.261 247.184 cv
560.946 246.554 560.613 245.889 560.263 245.187 cv
560.193 245.048 560.123 244.891 560.053 244.715 cv
559.983 244.541 559.948 244.348 559.948 244.138 cv
559.948 244.068 559.878 243.893 559.738 243.612 cv
559.387 242.771 559.213 241.931 559.213 241.091 cv
559.213 240.355 li
559.072 239.446 559.335 238.535 560.001 237.624 cv
560.666 236.715 561.454 236.153 562.365 235.943 cv
563.416 235.594 564.448 235.611 565.464 235.995 cv
566.478 236.381 567.232 237.029 567.722 237.939 cv
567.862 238.29 568.002 238.675 568.142 239.095 cv
568.282 239.515 568.353 239.935 568.353 240.355 cv
568.353 240.846 568.492 241.371 568.773 241.931 cv
569.824 244.103 571.434 245.503 573.605 246.133 cv
573.745 246.133 573.85 246.169 573.921 246.238 cv
574.83 246.238 575.707 246.238 576.548 246.238 cv
577.387 246.238 578.192 246.064 578.964 245.713 cv
580.224 245.224 581.17 244.384 581.8 243.191 cv
581.939 242.842 582.062 242.527 582.168 242.246 cv
582.272 241.967 582.36 241.652 582.43 241.301 cv
582.64 240.11 582.43 238.989 581.8 237.939 cv
581.099 236.889 580.259 236.118 579.279 235.628 cv
578.508 235.208 577.703 234.858 576.862 234.577 cv
576.022 234.298 575.216 234.018 574.446 233.736 cv
574.026 233.598 573.622 233.458 573.238 233.316 cv
572.852 233.177 572.484 233.037 572.135 232.896 cv
571.573 232.547 570.979 232.231 570.349 231.951 cv
569.719 231.672 569.123 231.356 568.563 231.006 cv
568.142 230.727 567.896 230.551 567.828 230.48 cv
566.987 229.92 566.146 229.36 565.306 228.799 cv
564.466 228.239 563.694 227.609 562.995 226.908 cv
562.575 226.629 562.242 226.314 561.997 225.963 cv
561.751 225.613 561.454 225.264 561.104 224.912 cv
560.823 224.633 560.595 224.334 560.422 224.02 cv
560.246 223.704 560.088 223.372 559.948 223.021 cv
559.038 220.99 558.652 218.75 558.793 216.298 cv
558.793 215.528 558.88 214.811 559.055 214.145 cv
559.229 213.479 559.492 212.797 559.844 212.096 cv
560.193 211.396 560.526 210.729 560.842 210.1 cv
561.157 209.469 561.524 208.839 561.944 208.208 cv
562.785 206.879 563.975 205.828 565.516 205.057 cv
567.407 204.147 569.509 203.481 571.82 203.061 cv
573.43 202.851 575.216 202.816 577.177 202.956 cv
578.297 203.026 579.489 203.307 580.75 203.796 cv
581.309 204.006 581.816 204.217 582.272 204.427 cv
582.727 204.637 583.234 204.847 583.796 205.057 cv
584.776 205.477 585.721 206.073 586.633 206.843 cv
587.122 207.263 587.542 207.754 587.893 208.313 cv
588.523 209.295 589.083 210.275 589.574 211.255 cv
590.063 212.236 590.483 213.251 590.835 214.302 cv
590.974 214.792 591.079 215.266 591.15 215.72 cv
591.219 216.176 591.219 216.684 591.15 217.243 cv
591.079 218.995 590.273 220.29 588.733 221.13 cv
588.383 221.34 588.067 221.481 587.788 221.551 cv
587.508 221.621 587.192 221.691 586.843 221.761 cv
586.701 221.831 586.527 221.831 586.317 221.761 cv
586.107 221.691 585.931 221.655 585.792 221.655 cv
584.81 221.516 583.954 221.025 583.219 220.185 cv
582.483 219.345 582.079 218.435 582.01 217.453 cv
582.01 216.474 581.659 215.457 580.96 214.406 cv
580.539 213.847 580.066 213.304 579.541 212.778 cv
579.016 212.253 578.368 211.851 577.597 211.57 cv
577.247 211.431 576.931 211.325 576.652 211.255 cv
576.372 211.186 576.056 211.15 575.707 211.15 cv
574.656 211.081 573.535 211.15 572.344 211.36 cv
570.803 211.78 569.614 212.621 568.773 213.882 cv
568.353 214.512 568.072 215.317 567.932 216.298 cv
567.862 216.438 567.828 216.561 567.828 216.665 cv
567.828 216.77 567.792 216.894 567.722 217.033 cv
567.792 217.174 567.828 217.349 567.828 217.559 cv
567.896 218.12 568.054 218.627 568.301 219.082 cv
568.545 219.538 568.842 219.94 569.193 220.29 cv
569.964 221.13 570.838 221.761 571.82 222.181 cv
572.59 222.532 573.343 222.811 574.078 223.021 cv
574.814 223.231 575.565 223.512 576.337 223.861 cv
577.527 224.143 578.682 224.633 579.803 225.332 cv
579.943 225.474 580.066 225.561 580.172 225.595 cv
580.276 225.631 580.398 225.684 580.539 225.753 cv
581.238 226.103 581.905 226.488 582.535 226.908 cv
583.166 227.328 583.796 227.749 584.427 228.169 cv
584.566 228.311 584.723 228.432 584.899 228.536 cv
585.073 228.642 585.23 228.765 585.372 228.904 cv
586.213 229.534 587 230.201 587.735 230.9 cv
588.47 231.602 589.118 232.371 589.679 233.212 cv
cp
f
251.059 436.673 mo
251.059 446.759 242.883 454.936 232.797 454.936 cv
222.711 454.936 214.535 446.759 214.535 436.673 cv
214.535 426.588 222.711 418.411 232.797 418.411 cv
242.883 418.411 251.059 426.588 251.059 436.673 cv
cp
.188235 .184314 .239216 rgb
f
113.111 669.95 mo
113.723 670.328 114.183 670.799 114.491 671.365 cv
114.797 671.931 114.903 672.544 114.809 673.204 cv
114.62 674.148 114.208 674.856 113.571 675.327 cv
112.934 675.799 112.308 676.059 111.696 676.105 cv
111.413 676.105 111.13 676.105 110.846 676.105 cv
110.564 676.105 110.281 676.152 109.998 676.247 cv
108.724 676.53 107.734 677.214 107.026 678.299 cv
106.507 679.102 106.178 680.092 106.036 681.271 cv
105.94 681.836 105.905 682.392 105.929 682.933 cv
105.953 683.476 105.965 684.029 105.965 684.596 cv
105.918 684.974 105.905 685.327 105.929 685.657 cv
105.953 685.987 105.965 686.318 105.965 686.647 cv
105.965 686.884 105.953 687.097 105.929 687.284 cv
105.905 687.474 105.94 687.686 106.036 687.921 cv
106.082 688.017 106.094 688.098 106.071 688.169 cv
106.047 688.239 106.036 688.322 106.036 688.416 cv
106.036 691.671 li
106.036 691.813 106.047 691.954 106.071 692.096 cv
106.094 692.237 106.058 692.379 105.965 692.521 cv
105.918 692.567 105.905 692.626 105.929 692.697 cv
105.953 692.768 105.965 692.851 105.965 692.944 cv
105.965 694.289 li
105.918 694.525 105.905 694.761 105.929 694.996 cv
105.953 695.233 105.918 695.469 105.823 695.704 cv
105.776 695.846 105.753 696.058 105.753 696.341 cv
105.753 699.101 li
105.753 701.364 li
105.753 702.167 105.469 702.874 104.903 703.487 cv
104.431 703.959 103.818 704.266 103.064 704.406 cv
102.827 704.501 102.615 704.501 102.428 704.406 cv
102.096 704.313 101.802 704.207 101.543 704.088 cv
101.283 703.971 101.058 703.77 100.871 703.487 cv
100.823 703.44 100.764 703.405 100.694 703.381 cv
100.623 703.357 100.563 703.322 100.516 703.274 cv
99.9968 702.567 99.739 701.718 99.739 700.728 cv
99.7849 698.936 99.8093 697.167 99.8093 695.421 cv
99.8093 693.677 99.8093 691.907 99.8093 690.114 cv
99.8093 689.831 99.8093 689.537 99.8093 689.23 cv
99.8093 688.924 99.7615 688.629 99.6677 688.346 cv
99.6199 688.252 99.6082 688.193 99.6326 688.169 cv
99.656 688.146 99.6677 688.087 99.6677 687.992 cv
99.6677 685.869 li
99.6199 685.775 99.6199 685.669 99.6677 685.551 cv
99.7146 685.434 99.7615 685.327 99.8093 685.232 cv
99.7146 685.091 99.6677 684.949 99.6677 684.808 cv
99.6677 684.666 99.6677 684.525 99.6677 684.384 cv
99.6199 683.912 99.6082 683.452 99.6326 683.004 cv
99.656 682.556 99.6433 682.096 99.5974 681.624 cv
99.5017 680.162 99.0779 678.842 98.323 677.662 cv
97.5681 676.719 96.5779 676.105 95.3523 675.822 cv
95.2566 675.775 95.1746 675.764 95.1043 675.787 cv
95.033 675.812 94.9509 675.822 94.8562 675.822 cv
93.7957 675.822 li
92.8982 675.822 92.074 675.563 91.3191 675.044 cv
91.3191 674.997 91.3074 674.974 91.284 674.974 cv
91.2605 674.974 91.2478 674.95 91.2478 674.902 cv
90.7771 674.432 90.4939 673.924 90.3992 673.381 cv
90.3054 672.84 90.3406 672.32 90.5056 671.824 cv
90.6707 671.329 90.9773 670.894 91.4246 670.516 cv
91.8738 670.139 92.4041 669.903 93.0173 669.809 cv
96.4129 669.809 li
96.7429 669.762 97.0496 669.75 97.3328 669.772 cv
97.616 669.797 97.8992 669.762 98.1824 669.667 cv
98.4646 669.667 li
99.2664 669.667 100.057 669.667 100.836 669.667 cv
101.613 669.667 102.403 669.644 103.206 669.596 cv
103.583 669.596 103.865 669.572 104.054 669.525 cv
104.621 669.525 li
107.804 669.525 li
107.946 669.525 li
108.606 669.62 109.243 669.655 109.856 669.631 cv
110.469 669.608 111.083 669.596 111.696 669.596 cv
112.167 669.596 112.638 669.714 113.111 669.95 cv
cp
f
147.285 698.393 mo
147.803 698.676 148.204 699.16 148.487 699.843 cv
148.77 700.527 148.817 701.199 148.629 701.859 cv
148.534 702.19 148.404 702.496 148.24 702.779 cv
148.074 703.063 147.874 703.322 147.638 703.558 cv
147.072 704.029 146.482 704.266 145.87 704.266 cv
140.987 704.266 li
134.476 704.266 li
134.142 704.266 133.834 704.254 133.549 704.229 cv
133.263 704.207 132.978 704.219 132.693 704.266 cv
132.454 704.313 132.239 704.347 132.05 704.371 cv
131.859 704.395 131.669 704.406 131.479 704.406 cv
130.955 704.359 130.468 704.277 130.016 704.159 cv
129.564 704.042 129.124 703.841 128.696 703.558 cv
128.125 703.229 127.673 702.874 127.34 702.496 cv
126.675 701.836 126.365 701.058 126.412 700.161 cv
126.412 699.784 126.4 699.396 126.377 698.994 cv
126.352 698.594 126.387 698.205 126.483 697.826 cv
126.529 697.449 126.553 697.096 126.553 696.766 cv
126.553 696.436 126.553 696.082 126.553 695.704 cv
126.553 695.279 li
126.459 694.809 126.412 694.337 126.412 693.864 cv
126.412 693.394 126.412 692.898 126.412 692.379 cv
126.412 688.699 li
126.412 687.238 126.412 685.787 126.412 684.348 cv
126.412 682.91 126.435 681.459 126.483 679.997 cv
126.483 679.667 126.507 679.431 126.553 679.289 cv
126.553 678.724 li
126.553 673.346 li
126.553 672.639 126.719 671.979 127.053 671.365 cv
127.339 670.894 127.695 670.54 128.124 670.304 cv
128.885 669.833 129.741 669.596 130.694 669.596 cv
131.455 669.55 132.192 669.537 132.906 669.561 cv
133.619 669.585 134.355 669.596 135.115 669.596 cv
136.459 669.596 li
142.473 669.596 li
145.587 669.596 li
146.057 669.55 146.553 669.667 147.072 669.95 cv
147.732 670.328 148.18 670.917 148.417 671.719 cv
148.604 672.426 148.604 673.134 148.417 673.841 cv
148.086 674.785 147.426 675.397 146.435 675.681 cv
146.057 675.822 145.704 675.893 145.374 675.893 cv
142.969 675.893 li
142.827 675.893 142.709 675.917 142.615 675.964 cv
142.142 676.059 141.695 676.059 141.27 675.964 cv
141.082 675.917 140.822 675.893 140.492 675.893 cv
138.087 675.893 li
137.142 675.893 136.222 676.2 135.327 676.813 cv
135.044 677.002 134.832 677.167 134.69 677.308 cv
133.738 678.11 133.382 679.147 133.62 680.421 cv
133.667 680.517 133.702 680.634 133.726 680.775 cv
133.751 680.917 133.81 681.058 133.905 681.199 cv
134.238 681.907 134.83 682.427 135.681 682.756 cv
136.482 683.087 137.402 683.251 138.44 683.251 cv
139.502 683.251 li
140.539 683.251 141.647 683.37 142.827 683.605 cv
143.629 683.7 144.289 684.007 144.808 684.525 cv
144.902 684.62 144.985 684.714 145.055 684.808 cv
145.127 684.903 145.185 685.021 145.232 685.162 cv
145.469 685.917 145.421 686.624 145.092 687.284 cv
144.713 688.229 143.982 688.841 142.898 689.124 cv
142.757 689.219 142.602 689.266 142.438 689.266 cv
142.272 689.266 142.12 689.266 141.978 689.266 cv
140.634 689.266 li
140.445 689.266 140.267 689.254 140.103 689.23 cv
139.937 689.207 139.761 689.242 139.572 689.336 cv
139.477 689.384 139.395 689.396 139.325 689.371 cv
139.254 689.349 139.171 689.336 139.077 689.336 cv
137.379 689.336 li
136.152 689.432 135.137 689.879 134.334 690.681 cv
134.143 690.869 133.976 691.034 133.834 691.176 cv
133.691 691.317 133.573 691.506 133.477 691.742 cv
133.239 692.12 133.121 692.449 133.121 692.732 cv
132.977 693.487 133.024 694.313 133.263 695.209 cv
133.549 696.012 134.071 696.624 134.832 697.048 cv
135.492 697.427 136.294 697.686 137.237 697.826 cv
137.756 697.922 138.252 697.957 138.723 697.933 cv
139.194 697.909 139.689 697.922 140.209 697.968 cv
140.68 697.874 141.14 697.839 141.589 697.862 cv
142.037 697.887 142.519 697.874 143.039 697.826 cv
143.322 697.826 143.535 697.851 143.677 697.897 cv
143.77 697.945 143.934 697.968 144.172 697.968 cv
146.011 697.968 li
146.199 697.968 146.365 697.992 146.507 698.039 cv
146.648 698.086 146.789 698.134 146.93 698.181 cv
147.025 698.228 147.084 698.264 147.107 698.286 cv
147.131 698.311 147.189 698.347 147.285 698.393 cv
cp
f
188.321 694.431 mo
189.028 694.95 189.428 695.657 189.524 696.553 cv
189.524 697.189 li
189.524 697.945 189.217 698.676 188.604 699.383 cv
188.367 699.62 188.12 699.832 187.861 700.02 cv
187.601 700.209 187.331 700.398 187.048 700.586 cv
186.717 700.822 186.411 701.022 186.128 701.188 cv
185.844 701.354 185.561 701.554 185.278 701.789 cv
184.759 702.167 184.228 702.473 183.686 702.709 cv
183.143 702.945 182.613 703.181 182.094 703.416 cv
181.764 703.558 181.446 703.688 181.139 703.806 cv
180.832 703.924 180.491 704.029 180.114 704.124 cv
179.831 704.171 179.558 704.219 179.3 704.266 cv
179.04 704.313 178.769 704.336 178.486 704.336 cv
178.108 704.289 177.766 704.266 177.461 704.266 cv
177.153 704.266 176.811 704.266 176.434 704.266 cv
176.434 704.313 176.458 704.336 176.505 704.336 cv
174.524 704.336 li
173.958 704.336 173.428 704.266 172.932 704.124 cv
172.437 703.982 171.953 703.794 171.481 703.558 cv
171.01 703.322 170.55 703.11 170.102 702.921 cv
169.653 702.733 169.218 702.544 168.793 702.354 cv
167.566 701.789 166.553 701.035 165.751 700.091 cv
165.609 699.902 165.456 699.737 165.291 699.596 cv
165.125 699.454 164.948 699.289 164.761 699.101 cv
164.571 698.912 164.406 698.735 164.264 698.569 cv
164.123 698.405 163.934 698.228 163.699 698.039 cv
162.991 697.473 162.401 696.671 161.929 695.633 cv
161.552 694.879 161.222 694.124 160.939 693.369 cv
160.656 692.615 160.468 691.837 160.374 691.034 cv
160.278 690.705 160.219 690.374 160.196 690.044 cv
160.172 689.714 160.113 689.384 160.019 689.053 cv
159.736 688.063 159.642 686.979 159.736 685.799 cv
159.783 685.374 159.831 684.938 159.878 684.489 cv
159.925 684.042 159.995 683.605 160.091 683.181 cv
160.232 682.662 160.374 682.167 160.514 681.694 cv
160.656 681.224 160.844 680.729 161.081 680.209 cv
161.175 679.974 161.293 679.726 161.434 679.466 cv
161.576 679.207 161.718 678.96 161.859 678.724 cv
162.142 678.346 162.401 677.98 162.637 677.627 cv
162.873 677.272 163.108 676.884 163.344 676.459 cv
163.958 675.327 164.854 674.313 166.034 673.417 cv
166.553 673.04 167.059 672.674 167.554 672.32 cv
168.051 671.966 168.604 671.647 169.218 671.365 cv
169.736 671.129 170.279 670.894 170.844 670.657 cv
171.411 670.422 172 670.21 172.614 670.021 cv
173.038 669.927 173.463 669.833 173.887 669.737 cv
174.311 669.644 174.76 669.596 175.231 669.596 cv
175.373 669.596 175.525 669.585 175.691 669.561 cv
175.856 669.537 176.033 669.525 176.222 669.525 cv
177.071 669.525 li
177.921 669.525 178.769 669.596 179.618 669.737 cv
180.655 669.879 181.787 670.21 183.014 670.728 cv
183.863 671.106 184.665 671.542 185.42 672.037 cv
186.174 672.532 186.906 673.11 187.613 673.771 cv
187.802 673.959 187.968 674.137 188.109 674.301 cv
188.25 674.467 188.415 674.644 188.604 674.832 cv
188.981 675.21 189.241 675.752 189.383 676.459 cv
189.57 677.167 189.464 677.874 189.064 678.582 cv
188.663 679.289 188.038 679.738 187.189 679.926 cv
185.962 680.209 184.925 679.902 184.076 679.006 cv
183.793 678.724 183.498 678.452 183.191 678.192 cv
182.884 677.934 182.543 677.687 182.166 677.449 cv
181.646 677.12 181.104 676.837 180.538 676.601 cv
179.972 676.365 179.382 676.2 178.769 676.105 cv
178.156 675.964 177.554 675.882 176.965 675.857 cv
176.375 675.834 175.798 675.87 175.231 675.964 cv
173.438 676.2 171.858 676.86 170.491 677.945 cv
170.255 678.182 170.019 678.404 169.784 678.617 cv
169.547 678.829 169.311 679.054 169.076 679.289 cv
168.651 679.762 168.238 680.244 167.838 680.739 cv
167.436 681.235 167.118 681.766 166.883 682.332 cv
166.505 683.181 166.269 684.125 166.176 685.162 cv
166.08 685.634 166.034 686.094 166.034 686.541 cv
166.034 686.99 166.034 687.45 166.034 687.921 cv
166.08 688.44 166.128 688.947 166.176 689.442 cv
166.221 689.938 166.34 690.445 166.529 690.964 cv
166.671 691.342 166.835 691.719 167.024 692.096 cv
167.212 692.474 167.449 692.827 167.731 693.157 cv
168.014 693.581 168.321 693.96 168.651 694.289 cv
168.934 694.667 169.253 695.009 169.606 695.314 cv
169.961 695.622 170.325 695.916 170.703 696.199 cv
172.165 697.237 173.746 697.851 175.444 698.039 cv
175.632 698.086 175.808 698.122 175.974 698.145 cv
176.139 698.169 176.34 698.181 176.576 698.181 cv
177.236 698.181 177.991 698.063 178.84 697.826 cv
179.264 697.686 179.689 697.544 180.114 697.402 cv
180.538 697.261 180.938 697.072 181.316 696.836 cv
182.401 696.317 183.298 695.657 184.005 694.854 cv
184.146 694.761 184.276 694.655 184.394 694.536 cv
184.511 694.419 184.641 694.313 184.783 694.218 cv
184.878 694.172 184.971 694.137 185.066 694.112 cv
185.16 694.089 185.255 694.054 185.349 694.006 cv
185.868 693.864 186.375 693.806 186.871 693.829 cv
187.366 693.854 187.849 694.054 188.321 694.431 cv
cp
f
226.456 682.686 mo
226.55 683.063 226.527 683.417 226.386 683.747 cv
226.527 684.125 226.55 684.549 226.456 685.021 cv
226.408 685.257 226.386 685.61 226.386 686.081 cv
226.338 686.931 226.314 687.792 226.314 688.664 cv
226.314 689.537 226.314 690.422 226.314 691.317 cv
226.314 691.601 li
226.219 692.166 226.173 692.732 226.173 693.299 cv
226.173 693.864 226.173 694.455 226.173 695.067 cv
226.173 698.393 li
226.173 698.629 226.173 698.853 226.173 699.064 cv
226.173 699.277 226.219 699.502 226.314 699.737 cv
226.267 700.067 226.267 700.374 226.314 700.657 cv
226.361 700.939 226.338 701.223 226.244 701.506 cv
226.196 701.647 226.173 701.836 226.173 702.072 cv
225.984 702.686 225.666 703.169 225.218 703.522 cv
224.769 703.876 224.273 704.101 223.732 704.194 cv
223.189 704.289 222.636 704.242 222.069 704.053 cv
221.504 703.865 221.054 703.534 220.725 703.063 cv
220.63 702.827 220.536 702.614 220.442 702.426 cv
220.346 702.237 220.276 702.025 220.229 701.789 cv
220.229 701.506 220.229 701.223 220.229 700.939 cv
220.229 700.657 220.206 700.374 220.159 700.091 cv
220.064 699.289 220.028 698.487 220.053 697.686 cv
220.076 696.884 220.089 696.082 220.089 695.279 cv
220.041 695.044 220.006 694.819 219.982 694.607 cv
219.958 694.396 219.899 694.172 219.805 693.936 cv
219.805 693.889 219.793 693.841 219.769 693.794 cv
219.746 693.747 219.734 693.699 219.734 693.652 cv
219.593 693.086 219.356 692.58 219.027 692.131 cv
218.696 691.684 218.319 691.271 217.895 690.893 cv
217.8 690.799 217.682 690.716 217.541 690.646 cv
217.399 690.574 217.281 690.492 217.187 690.397 cv
216.716 690.068 216.101 689.855 215.347 689.761 cv
214.734 689.667 214.145 689.69 213.579 689.831 cv
213.012 689.973 212.47 690.186 211.952 690.468 cv
210.866 690.988 210.016 691.742 209.404 692.732 cv
208.98 693.369 li
208.697 693.794 208.484 694.266 208.344 694.784 cv
208.154 695.539 208.06 696.341 208.06 697.189 cv
208.06 697.851 208.06 698.487 208.06 699.101 cv
208.06 699.714 208.084 700.351 208.131 701.011 cv
208.131 701.766 207.965 702.45 207.636 703.063 cv
207.164 703.817 206.55 704.266 205.796 704.406 cv
204.993 704.643 204.262 704.523 203.602 704.053 cv
202.941 703.628 202.517 703.133 202.329 702.567 cv
202.187 702.332 202.104 702.096 202.082 701.859 cv
202.057 701.624 202.046 701.389 202.046 701.152 cv
202.046 700.917 202.057 700.704 202.082 700.516 cv
202.104 700.327 202.069 700.115 201.975 699.879 cv
201.928 699.784 201.916 699.714 201.94 699.666 cv
201.963 699.62 201.975 699.549 201.975 699.454 cv
201.975 698.322 li
201.928 697.756 201.928 697.189 201.975 696.624 cv
202.021 696.058 202.093 695.492 202.187 694.926 cv
202.281 694.359 202.281 693.771 202.187 693.157 cv
202.093 692.922 202.057 692.709 202.082 692.521 cv
202.104 692.332 202.093 692.12 202.046 691.884 cv
202.046 691.742 202.057 691.601 202.082 691.459 cv
202.104 691.317 202.069 691.176 201.975 691.034 cv
201.975 690.681 li
201.975 685.304 li
201.975 685.115 201.999 684.974 202.046 684.879 cv
202.046 684.313 li
202.046 682.614 li
202.046 682.521 202.057 682.45 202.082 682.402 cv
202.104 682.355 202.093 682.285 202.046 682.19 cv
201.999 682.049 201.975 681.813 201.975 681.482 cv
201.975 679.289 li
201.975 679.054 201.986 678.829 202.011 678.617 cv
202.034 678.404 202.046 678.182 202.046 677.945 cv
202.093 676.908 202.093 675.893 202.046 674.902 cv
202.046 674.124 li
202.046 674.03 202.057 673.947 202.082 673.877 cv
202.104 673.806 202.093 673.724 202.046 673.629 cv
201.951 673.346 201.928 673.11 201.975 672.921 cv
202.069 672.733 202.104 672.557 202.082 672.391 cv
202.057 672.226 202.093 672.049 202.187 671.86 cv
202.329 671.436 202.612 671.011 203.037 670.587 cv
203.461 670.162 203.932 669.903 204.452 669.809 cv
204.781 669.667 205.076 669.62 205.336 669.667 cv
205.594 669.714 205.867 669.785 206.15 669.879 cv
206.621 670.021 207.046 670.351 207.424 670.869 cv
207.894 671.483 208.131 672.12 208.131 672.78 cv
208.036 673.11 208.06 673.394 208.202 673.629 cv
208.202 673.982 li
208.202 674.644 208.213 675.28 208.237 675.893 cv
208.261 676.507 208.272 677.144 208.272 677.804 cv
208.224 678.369 208.272 678.96 208.414 679.572 cv
208.508 680.139 208.649 680.658 208.839 681.129 cv
208.98 681.648 209.286 682.073 209.759 682.402 cv
209.852 682.497 209.97 682.579 210.112 682.65 cv
210.254 682.721 210.371 682.804 210.466 682.897 cv
211.078 683.229 211.762 683.511 212.517 683.747 cv
214.074 684.077 215.583 684.007 217.046 683.534 cv
217.754 683.299 218.366 682.827 218.886 682.119 cv
219.31 681.648 219.593 681.012 219.734 680.209 cv
219.734 679.88 219.805 679.572 219.947 679.289 cv
220.135 678.724 220.229 678.063 220.229 677.308 cv
220.229 676.79 220.218 676.259 220.194 675.716 cv
220.17 675.175 220.159 674.644 220.159 674.124 cv
220.159 673.912 li
220.064 673.629 220.028 673.37 220.053 673.134 cv
220.076 672.898 220.111 672.663 220.159 672.426 cv
220.253 671.955 220.394 671.577 220.584 671.294 cv
221.149 670.351 221.928 669.809 222.919 669.667 cv
223.531 669.62 224.121 669.762 224.687 670.091 cv
225.347 670.47 225.843 671.106 226.173 672.002 cv
226.173 672.144 li
226.173 672.19 226.196 672.214 226.244 672.214 cv
226.244 672.262 226.255 672.297 226.279 672.32 cv
226.303 672.345 226.314 672.38 226.314 672.426 cv
226.314 673.487 li
226.314 673.724 226.314 673.937 226.314 674.124 cv
226.314 674.313 226.29 674.525 226.244 674.761 cv
226.148 674.997 226.113 675.221 226.137 675.434 cv
226.161 675.646 226.173 675.87 226.173 676.105 cv
226.173 676.483 226.161 676.86 226.137 677.237 cv
226.113 677.615 226.148 677.992 226.244 678.369 cv
226.338 678.936 226.361 679.501 226.314 680.067 cv
226.267 680.634 226.267 681.199 226.314 681.766 cv
226.361 681.955 226.386 682.119 226.386 682.261 cv
226.386 682.402 226.408 682.544 226.456 682.686 cv
cp
f
263.035 672.78 mo
263.035 673.252 263.023 673.699 263 674.124 cv
262.975 674.549 262.965 674.997 262.965 675.469 cv
262.965 680.775 li
262.965 681.012 262.975 681.259 263 681.518 cv
263.023 681.777 262.987 682.025 262.893 682.261 cv
262.846 682.355 262.834 682.438 262.858 682.509 cv
262.882 682.579 262.893 682.662 262.893 682.756 cv
262.893 687.072 li
262.893 687.214 262.882 687.355 262.858 687.497 cv
262.834 687.638 262.869 687.757 262.965 687.851 cv
263.011 687.945 263.023 688.027 263 688.098 cv
262.975 688.169 262.965 688.252 262.965 688.346 cv
262.965 697.756 li
262.965 697.945 262.952 698.122 262.928 698.286 cv
262.905 698.452 262.917 698.652 262.965 698.888 cv
263.011 699.077 263.035 699.266 263.035 699.454 cv
263.035 699.643 263.035 699.855 263.035 700.091 cv
263.035 701.223 li
263.035 701.695 262.987 702.049 262.893 702.284 cv
262.799 702.426 262.717 702.579 262.646 702.744 cv
262.575 702.91 262.492 703.039 262.398 703.133 cv
262.35 703.229 262.303 703.299 262.257 703.346 cv
262.209 703.393 262.162 703.464 262.115 703.558 cv
261.879 703.794 261.608 703.982 261.302 704.124 cv
260.994 704.266 260.7 704.383 260.417 704.478 cv
259.851 704.571 259.332 704.478 258.86 704.194 cv
258.53 703.959 258.27 703.676 258.082 703.346 cv
257.941 703.157 257.81 702.969 257.693 702.779 cv
257.575 702.592 257.445 702.402 257.304 702.213 cv
257.067 701.836 256.832 701.495 256.596 701.188 cv
256.36 700.881 256.125 700.54 255.888 700.161 cv
255.369 699.454 254.874 698.629 254.403 697.686 cv
253.978 696.79 253.435 695.893 252.776 694.996 cv
252.422 694.643 li
251.148 692.944 li
251.053 692.709 250.924 692.509 250.76 692.343 cv
250.594 692.179 250.417 692.002 250.228 691.813 cv
249.567 691.246 248.837 690.988 248.035 691.034 cv
246.997 691.129 246.29 691.554 245.913 692.308 cv
245.771 692.544 245.653 692.792 245.559 693.051 cv
245.464 693.311 245.44 693.581 245.488 693.864 cv
245.488 694.242 245.464 694.549 245.418 694.784 cv
245.37 694.879 245.346 695.021 245.346 695.209 cv
245.346 700.728 li
245.346 700.964 245.322 701.199 245.276 701.435 cv
245.228 701.672 245.205 701.907 245.205 702.143 cv
244.827 703.274 244.144 704.007 243.153 704.336 cv
242.021 704.619 241.031 704.383 240.181 703.628 cv
239.851 703.299 239.616 702.921 239.474 702.496 cv
239.333 702.167 239.261 701.766 239.261 701.294 cv
239.261 699.879 239.25 698.476 239.226 697.084 cv
239.202 695.693 239.191 694.289 239.191 692.874 cv
239.191 692.308 239.202 691.73 239.226 691.141 cv
239.25 690.551 239.261 689.95 239.261 689.336 cv
239.261 688.912 li
239.356 688.724 239.391 688.547 239.368 688.381 cv
239.344 688.216 239.333 688.039 239.333 687.851 cv
239.427 687.474 239.427 687.072 239.333 686.647 cv
239.333 686.412 239.344 686.188 239.368 685.976 cv
239.391 685.763 239.356 685.54 239.261 685.304 cv
239.215 685.209 239.202 685.139 239.226 685.091 cv
239.25 685.045 239.261 684.974 239.261 684.879 cv
239.261 683.959 li
239.261 682.261 239.25 680.552 239.226 678.829 cv
239.202 677.108 239.191 675.397 239.191 673.699 cv
239.191 673.512 239.202 673.346 239.226 673.204 cv
239.25 673.063 239.261 672.898 239.261 672.709 cv
239.356 671.907 239.662 671.2 240.181 670.587 cv
240.323 670.445 240.475 670.328 240.641 670.232 cv
240.806 670.139 241.007 670.045 241.243 669.95 cv
241.385 669.95 241.55 669.903 241.738 669.809 cv
242.446 669.809 li
243.342 669.997 244.049 670.54 244.568 671.436 cv
245.039 672.144 245.499 672.851 245.948 673.559 cv
246.396 674.266 246.855 674.997 247.328 675.752 cv
247.846 676.554 248.329 677.32 248.778 678.051 cv
249.226 678.783 249.709 679.549 250.228 680.351 cv
251.124 681.624 252.257 682.473 253.625 682.897 cv
253.766 682.993 253.919 683.039 254.085 683.039 cv
254.25 683.039 254.379 683.063 254.473 683.11 cv
254.71 683.063 254.909 683.004 255.075 682.933 cv
255.24 682.862 255.417 682.78 255.606 682.686 cv
255.935 682.402 256.195 681.955 256.385 681.341 cv
256.62 680.775 256.738 680.304 256.738 679.926 cv
256.738 679.738 256.762 679.62 256.808 679.572 cv
256.855 679.337 256.88 678.983 256.88 678.511 cv
256.88 675.539 li
256.88 675.304 256.89 675.056 256.915 674.796 cv
256.938 674.538 256.973 674.266 257.021 673.982 cv
257.021 673.275 li
257.021 672.804 257.08 672.355 257.198 671.931 cv
257.315 671.506 257.562 671.106 257.941 670.728 cv
258.318 670.351 258.79 670.091 259.356 669.95 cv
260.205 669.95 li
260.865 669.95 261.43 670.139 261.903 670.516 cv
262.374 670.894 262.727 671.412 262.965 672.072 cv
263.011 672.214 263.035 672.45 263.035 672.78 cv
cp
f
302.02 691.813 mo
302.397 691.152 302.644 690.468 302.762 689.761 cv
302.88 689.053 302.963 688.346 303.011 687.638 cv
303.011 687.309 303.011 686.99 303.011 686.683 cv
303.011 686.377 302.963 686.081 302.869 685.799 cv
302.869 685.374 302.809 684.949 302.692 684.525 cv
302.574 684.101 302.468 683.676 302.374 683.251 cv
302.184 682.874 301.996 682.485 301.807 682.084 cv
301.619 681.684 301.406 681.295 301.171 680.917 cv
300.557 680.021 299.756 679.172 298.765 678.369 cv
296.972 677.002 295.015 676.294 292.892 676.247 cv
291.619 676.247 li
290.581 676.247 289.567 676.459 288.577 676.884 cv
288.34 676.979 288.093 677.096 287.834 677.237 cv
287.574 677.379 287.326 677.521 287.091 677.662 cv
286.384 678.134 285.699 678.724 285.039 679.431 cv
284.614 679.902 284.236 680.41 283.907 680.952 cv
283.576 681.495 283.222 682.025 282.845 682.544 cv
282.374 683.251 282.091 684.077 281.997 685.021 cv
281.997 687.992 li
281.997 688.416 282.032 688.817 282.102 689.194 cv
282.174 689.573 282.256 689.95 282.35 690.327 cv
282.775 691.884 283.529 693.275 284.614 694.501 cv
285.227 695.256 285.888 695.846 286.595 696.271 cv
286.737 696.365 286.866 696.447 286.985 696.518 cv
287.102 696.589 287.208 696.671 287.303 696.766 cv
287.68 696.86 288.046 696.978 288.4 697.119 cv
288.754 697.261 289.118 697.402 289.497 697.544 cv
289.591 697.591 289.779 697.614 290.062 697.614 cv
290.439 697.709 290.794 697.78 291.124 697.826 cv
291.453 697.874 291.807 697.874 292.185 697.826 cv
292.751 697.826 li
293.034 697.874 293.317 697.874 293.6 697.826 cv
293.884 697.78 294.166 697.732 294.449 697.686 cv
296.43 697.261 298.222 696.294 299.827 694.784 cv
300.204 694.501 300.51 694.172 300.746 693.794 cv
301.171 693.275 301.595 692.615 302.02 691.813 cv
cp
308.741 683.11 mo
308.836 683.393 308.894 683.676 308.919 683.959 cv
308.941 684.242 308.977 684.525 309.024 684.808 cv
309.071 685.516 309.071 686.223 309.024 686.931 cv
308.977 687.638 308.954 688.346 308.954 689.053 cv
308.954 689.29 308.954 689.525 308.954 689.761 cv
308.954 689.997 308.906 690.232 308.812 690.468 cv
308.718 690.847 308.636 691.188 308.564 691.494 cv
308.494 691.802 308.411 692.144 308.317 692.521 cv
308.269 692.757 308.151 693.11 307.963 693.581 cv
307.326 694.854 li
307.231 694.95 307.161 695.009 307.114 695.032 cv
307.066 695.057 306.996 695.115 306.902 695.209 cv
306.902 695.256 306.889 695.304 306.866 695.351 cv
306.843 695.397 306.831 695.469 306.831 695.563 cv
306.501 696.082 306.159 696.612 305.805 697.154 cv
305.451 697.697 305.062 698.228 304.637 698.746 cv
304.354 699.077 304.059 699.383 303.754 699.666 cv
303.446 699.949 303.152 700.232 302.869 700.516 cv
302.679 700.657 302.503 700.811 302.339 700.976 cv
302.173 701.141 301.996 701.271 301.807 701.364 cv
301.571 701.459 301.371 701.565 301.206 701.683 cv
301.041 701.801 300.841 701.907 300.605 702.001 cv
300.226 702.237 299.814 702.438 299.367 702.603 cv
298.918 702.769 298.482 702.945 298.057 703.133 cv
297.538 703.37 297.008 703.547 296.466 703.664 cv
295.923 703.782 295.392 703.911 294.874 704.053 cv
294.402 704.148 293.929 704.219 293.459 704.266 cv
292.987 704.313 292.491 704.336 291.972 704.336 cv
291.359 704.336 290.77 704.266 290.204 704.124 cv
289.826 704.077 289.472 704.007 289.142 703.911 cv
288.812 703.817 288.459 703.724 288.082 703.628 cv
287.137 703.44 286.146 703.087 285.11 702.567 cv
284.827 702.426 284.554 702.296 284.296 702.178 cv
284.036 702.061 283.765 701.907 283.482 701.718 cv
283.152 701.482 282.845 701.258 282.562 701.046 cv
282.28 700.834 282.02 700.563 281.784 700.232 cv
281.689 700.044 281.56 699.879 281.395 699.737 cv
281.229 699.596 281.077 699.454 280.935 699.313 cv
280.652 698.983 280.357 698.676 280.051 698.393 cv
279.744 698.109 279.449 697.78 279.167 697.402 cv
278.694 696.836 278.341 696.294 278.105 695.774 cv
277.822 695.256 277.562 694.726 277.327 694.183 cv
277.091 693.641 276.878 693.086 276.69 692.521 cv
276.595 692.096 276.513 691.684 276.442 691.282 cv
276.372 690.882 276.289 690.492 276.195 690.114 cv
276.099 689.69 276.041 689.277 276.018 688.876 cv
275.994 688.477 275.982 688.063 275.982 687.638 cv
275.982 687.45 275.982 687.261 275.982 687.072 cv
275.982 686.884 275.958 686.672 275.912 686.436 cv
275.817 686.2 275.817 685.94 275.912 685.657 cv
276.006 685.422 276.041 685.222 276.018 685.056 cv
275.994 684.891 275.982 684.737 275.982 684.596 cv
276.029 684.219 276.077 683.853 276.124 683.499 cv
276.171 683.146 276.241 682.78 276.337 682.402 cv
276.714 680.987 277.232 679.714 277.893 678.582 cv
278.459 677.639 279.025 676.813 279.591 676.105 cv
280.486 674.974 281.548 673.982 282.775 673.134 cv
284.332 672.002 286.029 671.152 287.869 670.587 cv
289.048 670.162 290.251 669.95 291.477 669.95 cv
291.713 669.95 291.902 669.927 292.044 669.879 cv
292.279 669.785 292.514 669.785 292.751 669.879 cv
292.845 669.927 292.939 669.95 293.034 669.95 cv
293.788 669.903 294.508 669.95 295.192 670.091 cv
295.876 670.232 296.572 670.398 297.279 670.587 cv
298.553 671.011 li
300.251 671.672 301.713 672.544 302.939 673.629 cv
303.081 673.724 303.222 673.841 303.364 673.982 cv
303.506 674.124 303.647 674.242 303.789 674.337 cv
304.401 674.997 304.968 675.705 305.487 676.459 cv
305.769 676.931 306.053 677.379 306.336 677.804 cv
306.619 678.228 306.902 678.652 307.185 679.077 cv
307.562 679.643 307.868 680.279 308.104 680.987 cv
308.199 681.365 308.304 681.719 308.423 682.049 cv
308.54 682.379 308.646 682.732 308.741 683.11 cv
cp
f
337.679 697.968 mo
338.387 697.922 339.012 698.134 339.554 698.604 cv
340.095 699.077 340.485 699.643 340.721 700.303 cv
341.051 701.199 340.909 702.096 340.297 702.991 cv
340.25 703.087 340.214 703.146 340.191 703.169 cv
340.167 703.192 340.132 703.251 340.085 703.346 cv
339.99 703.44 339.908 703.511 339.837 703.558 cv
339.766 703.605 339.683 703.652 339.59 703.699 cv
339.023 704.124 338.41 704.336 337.75 704.336 cv
337.467 704.336 337.195 704.336 336.936 704.336 cv
336.677 704.336 336.428 704.383 336.193 704.478 cv
335.674 704.478 335.143 704.488 334.601 704.513 cv
334.058 704.536 333.528 704.501 333.01 704.406 cv
332.82 704.359 332.632 704.336 332.443 704.336 cv
332.255 704.336 332.065 704.336 331.878 704.336 cv
328.198 704.336 li
328.01 704.336 327.868 704.359 327.773 704.406 cv
327.254 704.501 326.783 704.501 326.358 704.406 cv
326.263 704.359 326.122 704.336 325.934 704.336 cv
325.368 704.336 324.755 704.171 324.095 703.841 cv
323.15 703.416 322.513 702.709 322.184 701.718 cv
321.995 701.294 321.901 700.822 321.901 700.303 cv
321.901 699.974 321.901 699.655 321.901 699.348 cv
321.901 699.042 321.947 698.746 322.043 698.464 cv
322.089 698.181 322.101 697.887 322.078 697.579 cv
322.053 697.272 322.089 696.954 322.184 696.624 cv
322.278 696.199 322.255 695.822 322.113 695.492 cv
322.066 695.397 322.043 695.256 322.043 695.067 cv
322.043 689.053 li
322.043 688.771 322.043 688.487 322.043 688.204 cv
322.043 687.921 321.995 687.662 321.901 687.426 cv
321.901 687.214 li
321.901 682.19 li
321.901 682.002 321.925 681.884 321.971 681.836 cv
322.018 681.648 322.043 681.412 322.043 681.129 cv
322.043 676.105 li
322.043 675.964 322.03 675.834 322.008 675.716 cv
321.983 675.599 321.971 675.493 321.971 675.397 cv
321.925 674.879 321.888 674.384 321.866 673.912 cv
321.842 673.441 321.853 672.945 321.901 672.426 cv
321.995 671.766 322.278 671.212 322.75 670.764 cv
323.221 670.315 323.787 670.045 324.448 669.95 cv
324.683 669.809 324.931 669.762 325.191 669.809 cv
325.45 669.855 325.721 669.927 326.005 670.021 cv
326.052 670.021 326.087 670.032 326.111 670.056 cv
326.135 670.08 326.193 670.091 326.288 670.091 cv
327.137 670.611 327.655 671.271 327.845 672.072 cv
327.89 672.214 327.915 672.426 327.915 672.709 cv
327.915 675.044 li
327.915 675.563 327.903 676.094 327.88 676.636 cv
327.855 677.179 327.89 677.709 327.986 678.228 cv
327.986 678.889 327.997 679.514 328.021 680.103 cv
328.045 680.693 328.056 681.317 328.056 681.978 cv
328.056 682.215 328.056 682.438 328.056 682.65 cv
328.056 682.862 328.08 683.087 328.128 683.322 cv
328.174 683.7 328.174 684.054 328.128 684.384 cv
328.032 684.714 327.997 685.021 328.021 685.304 cv
328.045 685.586 328.056 685.894 328.056 686.223 cv
328.01 686.506 327.962 686.778 327.915 687.037 cv
327.868 687.297 327.868 687.567 327.915 687.851 cv
327.915 689.549 li
327.915 689.831 327.938 690.068 327.986 690.256 cv
328.032 690.445 328.056 690.751 328.056 691.176 cv
327.962 691.931 328.056 692.615 328.34 693.228 cv
328.387 693.417 328.422 693.605 328.446 693.794 cv
328.469 693.982 328.527 694.172 328.623 694.359 cv
328.764 694.737 328.952 695.138 329.188 695.563 cv
329.235 695.657 329.283 695.729 329.33 695.774 cv
329.377 695.822 329.425 695.893 329.471 695.987 cv
329.66 696.459 330.084 696.907 330.745 697.331 cv
330.98 697.473 331.252 697.591 331.559 697.686 cv
331.865 697.78 332.16 697.874 332.443 697.968 cv
332.537 698.016 332.632 698.027 332.726 698.004 cv
332.82 697.98 332.914 697.968 333.01 697.968 cv
333.811 697.968 334.59 697.98 335.345 698.004 cv
336.098 698.027 336.877 698.016 337.679 697.968 cv
cp
f
375.037 691.813 mo
375.414 691.152 375.661 690.468 375.779 689.761 cv
375.896 689.053 375.979 688.346 376.027 687.638 cv
376.027 687.309 376.027 686.99 376.027 686.683 cv
376.027 686.377 375.979 686.081 375.886 685.799 cv
375.886 685.374 375.826 684.949 375.709 684.525 cv
375.591 684.101 375.484 683.676 375.39 683.251 cv
375.201 682.874 375.012 682.485 374.824 682.084 cv
374.636 681.684 374.423 681.295 374.187 680.917 cv
373.574 680.021 372.772 679.172 371.782 678.369 cv
369.989 677.002 368.032 676.294 365.909 676.247 cv
364.636 676.247 li
363.597 676.247 362.584 676.459 361.594 676.884 cv
361.356 676.979 361.109 677.096 360.85 677.237 cv
360.591 677.379 360.343 677.521 360.107 677.662 cv
359.4 678.134 358.716 678.724 358.055 679.431 cv
357.631 679.902 357.253 680.41 356.924 680.952 cv
356.593 681.495 356.239 682.025 355.862 682.544 cv
355.39 683.251 355.107 684.077 355.013 685.021 cv
355.013 687.992 li
355.013 688.416 355.049 688.817 355.119 689.194 cv
355.19 689.573 355.272 689.95 355.367 690.327 cv
355.792 691.884 356.546 693.275 357.631 694.501 cv
358.244 695.256 358.905 695.846 359.612 696.271 cv
359.754 696.365 359.883 696.447 360.002 696.518 cv
360.119 696.589 360.224 696.671 360.32 696.766 cv
360.697 696.86 361.062 696.978 361.417 697.119 cv
361.77 697.261 362.135 697.402 362.513 697.544 cv
362.607 697.591 362.796 697.614 363.079 697.614 cv
363.456 697.709 363.81 697.78 364.14 697.826 cv
364.47 697.874 364.824 697.874 365.202 697.826 cv
365.767 697.826 li
366.051 697.874 366.334 697.874 366.617 697.826 cv
366.9 697.78 367.182 697.732 367.466 697.686 cv
369.447 697.261 371.239 696.294 372.844 694.784 cv
373.22 694.501 373.526 694.172 373.762 693.794 cv
374.187 693.275 374.612 692.615 375.037 691.813 cv
cp
381.758 683.11 mo
381.852 683.393 381.911 683.676 381.935 683.959 cv
381.958 684.242 381.994 684.525 382.041 684.808 cv
382.088 685.516 382.088 686.223 382.041 686.931 cv
381.994 687.638 381.97 688.346 381.97 689.053 cv
381.97 689.29 381.97 689.525 381.97 689.761 cv
381.97 689.997 381.923 690.232 381.829 690.468 cv
381.734 690.847 381.652 691.188 381.581 691.494 cv
381.511 691.802 381.428 692.144 381.334 692.521 cv
381.286 692.757 381.168 693.11 380.979 693.581 cv
380.343 694.854 li
380.248 694.95 380.178 695.009 380.131 695.032 cv
380.083 695.057 380.012 695.115 379.919 695.209 cv
379.919 695.256 379.906 695.304 379.883 695.351 cv
379.859 695.397 379.847 695.469 379.847 695.563 cv
379.517 696.082 379.176 696.612 378.822 697.154 cv
378.468 697.697 378.079 698.228 377.654 698.746 cv
377.371 699.077 377.076 699.383 376.77 699.666 cv
376.463 699.949 376.169 700.232 375.886 700.516 cv
375.696 700.657 375.519 700.811 375.355 700.976 cv
375.189 701.141 375.012 701.271 374.824 701.364 cv
374.588 701.459 374.387 701.565 374.222 701.683 cv
374.057 701.801 373.857 701.907 373.622 702.001 cv
373.243 702.237 372.831 702.438 372.384 702.603 cv
371.934 702.769 371.499 702.945 371.074 703.133 cv
370.554 703.37 370.024 703.547 369.482 703.664 cv
368.939 703.782 368.409 703.911 367.89 704.053 cv
367.419 704.148 366.946 704.219 366.475 704.266 cv
366.004 704.313 365.508 704.336 364.989 704.336 cv
364.376 704.336 363.787 704.266 363.22 704.124 cv
362.843 704.077 362.489 704.007 362.159 703.911 cv
361.829 703.817 361.475 703.724 361.098 703.628 cv
360.154 703.44 359.163 703.087 358.127 702.567 cv
357.844 702.426 357.571 702.296 357.312 702.178 cv
357.053 702.061 356.782 701.907 356.499 701.718 cv
356.169 701.482 355.862 701.258 355.579 701.046 cv
355.297 700.834 355.037 700.563 354.801 700.232 cv
354.706 700.044 354.577 699.879 354.412 699.737 cv
354.246 699.596 354.094 699.454 353.952 699.313 cv
353.669 698.983 353.374 698.676 353.067 698.393 cv
352.761 698.109 352.466 697.78 352.183 697.402 cv
351.711 696.836 351.357 696.294 351.122 695.774 cv
350.839 695.256 350.579 694.726 350.344 694.183 cv
350.107 693.641 349.894 693.086 349.707 692.521 cv
349.612 692.096 349.53 691.684 349.459 691.282 cv
349.388 690.882 349.305 690.492 349.212 690.114 cv
349.116 689.69 349.057 689.277 349.035 688.876 cv
349.011 688.477 348.999 688.063 348.999 687.638 cv
348.999 687.45 348.999 687.261 348.999 687.072 cv
348.999 686.884 348.974 686.672 348.928 686.436 cv
348.834 686.2 348.834 685.94 348.928 685.657 cv
349.022 685.422 349.057 685.222 349.035 685.056 cv
349.011 684.891 348.999 684.737 348.999 684.596 cv
349.046 684.219 349.094 683.853 349.14 683.499 cv
349.187 683.146 349.258 682.78 349.353 682.402 cv
349.73 680.987 350.249 679.714 350.91 678.582 cv
351.475 677.639 352.042 676.813 352.607 676.105 cv
353.503 674.974 354.564 673.982 355.792 673.134 cv
357.348 672.002 359.046 671.152 360.886 670.587 cv
362.064 670.162 363.267 669.95 364.494 669.95 cv
364.729 669.95 364.919 669.927 365.06 669.879 cv
365.296 669.785 365.531 669.785 365.767 669.879 cv
365.862 669.927 365.956 669.95 366.051 669.95 cv
366.804 669.903 367.524 669.95 368.209 670.091 cv
368.892 670.232 369.589 670.398 370.296 670.587 cv
371.569 671.011 li
373.267 671.672 374.729 672.544 375.956 673.629 cv
376.097 673.724 376.239 673.841 376.381 673.982 cv
376.522 674.124 376.664 674.242 376.805 674.337 cv
377.418 674.997 377.984 675.705 378.504 676.459 cv
378.786 676.931 379.069 677.379 379.352 677.804 cv
379.636 678.228 379.919 678.652 380.202 679.077 cv
380.579 679.643 380.885 680.279 381.121 680.987 cv
381.216 681.365 381.321 681.719 381.439 682.049 cv
381.556 682.379 381.663 682.732 381.758 683.11 cv
cp
f
423.927 690.751 mo
423.927 691.176 423.95 691.612 423.998 692.061 cv
424.044 692.509 424.068 692.944 424.068 693.369 cv
424.068 694.172 423.95 694.996 423.715 695.846 cv
423.384 697.025 422.888 698.205 422.228 699.383 cv
422.087 699.62 421.933 699.832 421.768 700.02 cv
421.603 700.209 421.426 700.421 421.238 700.657 cv
421.096 700.894 420.93 701.105 420.743 701.294 cv
420.553 701.482 420.342 701.672 420.106 701.859 cv
420.011 701.955 419.905 702.014 419.788 702.036 cv
419.67 702.061 419.563 702.119 419.47 702.213 cv
418.903 702.45 418.325 702.686 417.736 702.921 cv
417.145 703.157 416.544 703.393 415.931 703.628 cv
415.553 703.817 415.153 703.959 414.728 704.053 cv
414.304 704.148 413.88 704.242 413.455 704.336 cv
412.983 704.43 412.523 704.488 412.075 704.513 cv
411.627 704.536 411.143 704.523 410.625 704.478 cv
410.388 704.478 410.188 704.465 410.023 704.442 cv
409.858 704.418 409.658 704.383 409.423 704.336 cv
408.902 704.242 408.361 704.136 407.795 704.018 cv
407.229 703.9 406.686 703.794 406.168 703.699 cv
405.13 703.511 404.068 703.063 402.983 702.354 cv
402.605 702.119 402.241 701.872 401.887 701.612 cv
401.533 701.354 401.167 701.081 400.79 700.798 cv
400.177 700.327 399.623 699.832 399.128 699.313 cv
398.633 698.794 398.196 698.205 397.818 697.544 cv
397.582 697.072 397.323 696.636 397.041 696.234 cv
396.758 695.834 396.474 695.421 396.191 694.996 cv
396.05 694.761 395.931 694.525 395.838 694.289 cv
395.742 694.054 395.648 693.794 395.554 693.511 cv
395.46 693.275 395.378 693.051 395.306 692.839 cv
395.236 692.626 395.153 692.403 395.059 692.166 cv
394.918 691.789 394.811 691.412 394.741 691.034 cv
394.67 690.657 394.587 690.28 394.493 689.902 cv
394.398 689.573 394.34 689.254 394.316 688.947 cv
394.292 688.641 394.257 688.322 394.21 687.992 cv
394.163 687.757 394.15 687.521 394.175 687.284 cv
394.198 687.049 394.21 686.813 394.21 686.577 cv
394.163 686.2 394.163 685.846 394.21 685.516 cv
394.257 685.187 394.327 684.832 394.423 684.454 cv
394.469 684.125 394.516 683.807 394.564 683.499 cv
394.61 683.192 394.681 682.874 394.776 682.544 cv
394.918 681.884 395.095 681.224 395.306 680.563 cv
395.519 679.902 395.813 679.266 396.191 678.652 cv
396.427 678.275 396.662 677.898 396.899 677.521 cv
397.135 677.144 397.394 676.767 397.678 676.389 cv
398.243 675.681 398.809 675.068 399.375 674.549 cv
400.035 673.889 400.79 673.252 401.639 672.639 cv
401.875 672.45 402.087 672.284 402.276 672.144 cv
402.464 672.002 402.677 671.86 402.913 671.719 cv
403.573 671.342 404.186 671.011 404.753 670.728 cv
405.271 670.492 405.79 670.351 406.309 670.304 cv
406.686 670.257 407.028 670.197 407.335 670.127 cv
407.641 670.056 407.983 669.997 408.361 669.95 cv
408.69 669.855 409.009 669.772 409.316 669.702 cv
409.622 669.631 409.94 669.572 410.271 669.525 cv
410.648 669.525 411.025 669.514 411.403 669.49 cv
411.78 669.467 412.157 669.502 412.535 669.596 cv
412.96 669.691 413.395 669.772 413.845 669.844 cv
414.292 669.914 414.752 669.997 415.224 670.091 cv
416.733 670.374 418.077 670.917 419.257 671.719 cv
420.058 672.238 420.789 672.757 421.45 673.275 cv
421.78 673.559 422.098 673.841 422.405 674.124 cv
422.712 674.407 422.982 674.69 423.22 674.974 cv
423.879 675.775 424.068 676.648 423.785 677.591 cv
423.643 678.299 423.337 678.842 422.865 679.219 cv
422.3 679.69 421.663 679.938 420.955 679.961 cv
420.248 679.985 419.611 679.738 419.045 679.219 cv
418.62 678.794 li
418.384 678.559 418.113 678.334 417.806 678.122 cv
417.499 677.909 417.18 677.709 416.851 677.521 cv
416.427 677.285 415.99 677.072 415.543 676.884 cv
415.094 676.695 414.61 676.53 414.092 676.389 cv
413.762 676.294 413.43 676.224 413.101 676.176 cv
412.771 676.13 412.417 676.105 412.04 676.105 cv
411.662 676.105 411.308 676.094 410.978 676.07 cv
410.648 676.047 410.295 676.059 409.918 676.105 cv
408.407 676.105 406.992 676.53 405.673 677.379 cv
405.153 677.709 404.681 678.075 404.258 678.476 cv
403.833 678.877 403.408 679.289 402.983 679.714 cv
402.653 680.092 402.346 680.492 402.064 680.917 cv
401.781 681.341 401.521 681.79 401.286 682.261 cv
400.861 683.205 400.578 684.148 400.436 685.091 cv
400.342 685.61 400.283 686.117 400.26 686.612 cv
400.235 687.107 400.248 687.615 400.295 688.134 cv
400.389 689.219 400.625 690.232 401.003 691.176 cv
401.38 692.12 401.945 692.992 402.701 693.794 cv
402.888 694.03 403.065 694.23 403.231 694.396 cv
403.396 694.561 403.573 694.761 403.762 694.996 cv
404.563 695.799 405.435 696.436 406.38 696.907 cv
407.465 697.521 408.549 697.897 409.635 698.039 cv
409.87 698.086 410.07 698.122 410.236 698.145 cv
410.4 698.169 410.6 698.181 410.838 698.181 cv
411.592 698.228 412.311 698.169 412.995 698.004 cv
413.678 697.839 414.35 697.614 415.012 697.331 cv
415.2 697.285 415.482 697.167 415.861 696.978 cv
416.096 696.836 416.332 696.684 416.568 696.518 cv
416.803 696.353 417.039 696.129 417.276 695.846 cv
417.37 695.516 417.476 695.186 417.595 694.854 cv
417.712 694.525 417.817 694.172 417.913 693.794 cv
417.913 693.228 li
417.913 692.992 417.924 692.744 417.948 692.484 cv
417.971 692.226 417.959 691.979 417.913 691.742 cv
417.913 690.751 417.44 689.997 416.498 689.478 cv
416.402 689.432 416.344 689.407 416.321 689.407 cv
416.297 689.407 416.238 689.384 416.143 689.336 cv
415.765 689.29 415.401 689.242 415.047 689.194 cv
414.693 689.148 414.327 689.124 413.95 689.124 cv
413.385 689.172 412.83 689.03 412.288 688.699 cv
411.745 688.37 411.356 687.851 411.12 687.143 cv
411.073 687.049 411.05 686.931 411.05 686.789 cv
411.05 686.152 li
410.955 685.209 411.262 684.454 411.97 683.888 cv
412.015 683.842 412.04 683.794 412.04 683.747 cv
412.465 683.511 412.912 683.322 413.385 683.181 cv
413.62 683.181 413.88 683.181 414.163 683.181 cv
414.446 683.181 414.728 683.157 415.012 683.11 cv
415.672 683.016 416.332 682.969 416.993 682.969 cv
417.653 682.969 418.313 682.969 418.974 682.969 cv
419.351 682.969 419.692 682.969 420 682.969 cv
420.306 682.969 420.647 682.993 421.026 683.039 cv
422.062 683.039 422.936 683.534 423.643 684.525 cv
423.927 685.091 424.068 685.657 424.068 686.223 cv
424.068 686.46 424.068 686.707 424.068 686.966 cv
424.068 687.226 424.02 687.474 423.927 687.709 cv
423.927 690.751 li
cp
f
457.465 670.021 mo
457.794 670.257 458.101 670.516 458.384 670.799 cv
458.62 671.082 458.797 671.412 458.915 671.789 cv
459.032 672.167 459.138 672.567 459.233 672.992 cv
459.233 673.04 459.22 673.087 459.198 673.134 cv
459.174 673.182 459.162 673.252 459.162 673.346 cv
459.115 673.818 458.973 674.23 458.738 674.584 cv
458.501 674.938 458.243 675.304 457.96 675.681 cv
457.723 675.917 457.5 676.176 457.287 676.459 cv
457.075 676.742 456.85 677.025 456.615 677.308 cv
454.705 680.279 li
454.563 680.517 454.422 680.752 454.28 680.987 cv
454.138 681.224 454.02 681.459 453.927 681.694 cv
453.785 681.932 453.643 682.19 453.502 682.473 cv
453.36 682.756 453.195 683.016 453.007 683.251 cv
452.535 683.912 452.123 684.585 451.768 685.268 cv
451.415 685.952 451.072 686.647 450.743 687.355 cv
450.601 687.592 450.506 687.851 450.46 688.134 cv
450.412 688.416 450.365 688.699 450.318 688.982 cv
450.223 689.502 450.187 689.997 450.212 690.468 cv
450.235 690.94 450.223 691.436 450.177 691.954 cv
450.177 698.039 li
450.177 698.275 450.152 698.499 450.106 698.711 cv
450.058 698.923 450.035 699.147 450.035 699.383 cv
450.082 699.572 450.094 699.762 450.07 699.949 cv
450.047 700.139 450.035 700.327 450.035 700.516 cv
450.035 700.752 450.011 700.987 449.965 701.223 cv
449.917 701.459 449.893 701.695 449.893 701.931 cv
449.846 702.119 449.727 702.402 449.54 702.779 cv
449.35 702.969 449.232 703.11 449.186 703.204 cv
448.855 703.534 448.513 703.747 448.16 703.841 cv
447.806 703.936 447.44 704.029 447.063 704.124 cv
446.969 704.124 446.862 704.112 446.745 704.088 cv
446.627 704.065 446.52 704.053 446.427 704.053 cv
445.247 703.865 444.446 703.204 444.021 702.072 cv
443.973 701.978 443.95 701.859 443.95 701.718 cv
443.903 701.482 443.867 701.223 443.845 700.939 cv
443.82 700.657 443.785 700.374 443.738 700.091 cv
443.738 699.714 443.714 699.454 443.668 699.313 cv
443.572 699.077 443.549 698.842 443.596 698.604 cv
443.643 698.369 443.643 698.134 443.596 697.897 cv
443.69 697.709 443.738 697.449 443.738 697.119 cv
443.88 696.694 443.95 696.247 443.95 695.774 cv
443.95 695.633 443.95 695.48 443.95 695.314 cv
443.95 695.15 443.973 694.996 444.021 694.854 cv
444.115 694.619 444.138 694.359 444.092 694.077 cv
444.045 693.794 443.973 693.535 443.88 693.299 cv
443.785 693.063 443.738 692.863 443.738 692.697 cv
443.738 692.532 443.738 692.355 443.738 692.166 cv
443.738 689.266 li
443.643 689.03 443.596 688.806 443.596 688.594 cv
443.596 688.381 443.526 688.157 443.385 687.921 cv
443.337 687.827 443.313 687.757 443.313 687.709 cv
443.313 687.662 443.289 687.592 443.243 687.497 cv
443.243 687.119 443.125 686.742 442.889 686.364 cv
442.7 686.129 442.547 685.894 442.429 685.657 cv
442.311 685.422 442.205 685.187 442.111 684.949 cv
441.922 684.572 441.721 684.195 441.51 683.817 cv
441.297 683.44 441.073 683.063 440.837 682.686 cv
440.6 682.355 440.365 682.025 440.13 681.694 cv
439.893 681.365 439.658 681.035 439.422 680.704 cv
439.185 680.375 438.963 680.057 438.75 679.749 cv
438.538 679.442 438.313 679.124 438.078 678.794 cv
437.983 678.606 437.866 678.417 437.724 678.228 cv
437.583 678.04 437.441 677.828 437.3 677.591 cv
437.11 677.308 436.933 677.025 436.769 676.742 cv
436.603 676.459 436.427 676.152 436.238 675.822 cv
435.389 674.549 li
435.294 674.455 435.235 674.337 435.213 674.195 cv
435.188 674.054 435.13 673.937 435.035 673.841 cv
434.988 673.605 434.965 673.37 434.965 673.134 cv
434.965 672.898 434.965 672.663 434.965 672.426 cv
434.965 672.284 435.012 672.12 435.106 671.931 cv
435.435 671.177 435.837 670.657 436.309 670.374 cv
436.497 670.28 436.663 670.174 436.804 670.056 cv
436.946 669.938 437.088 669.833 437.228 669.737 cv
437.37 669.691 437.5 669.655 437.618 669.631 cv
437.735 669.608 437.866 669.572 438.007 669.525 cv
438.053 669.525 438.101 669.537 438.148 669.561 cv
438.195 669.585 438.265 669.596 438.361 669.596 cv
438.88 669.644 439.303 669.797 439.635 670.056 cv
439.964 670.315 440.247 670.634 440.483 671.011 cv
440.672 671.2 440.86 671.483 441.05 671.86 cv
441.379 672.567 441.745 673.24 442.146 673.877 cv
442.547 674.514 442.983 675.162 443.455 675.822 cv
443.502 675.917 443.549 676.012 443.596 676.105 cv
443.643 676.2 443.69 676.294 443.738 676.389 cv
443.832 676.767 443.997 677.108 444.233 677.414 cv
444.469 677.722 444.704 678.016 444.941 678.299 cv
445.177 678.535 445.436 678.735 445.72 678.9 cv
446.002 679.065 446.285 679.195 446.568 679.289 cv
447.063 679.289 li
447.582 679.147 448.007 678.912 448.337 678.582 cv
448.808 678.205 449.162 677.804 449.398 677.379 cv
449.727 676.767 450.129 676.152 450.601 675.539 cv
450.978 675.068 451.308 674.597 451.592 674.124 cv
451.875 673.653 452.181 673.182 452.512 672.709 cv
452.653 672.474 452.795 672.249 452.936 672.037 cv
453.078 671.824 453.22 671.602 453.36 671.365 cv
453.455 671.224 453.549 671.082 453.643 670.94 cv
453.737 670.799 453.856 670.657 453.997 670.516 cv
454.469 669.997 454.988 669.667 455.553 669.525 cv
456.403 669.525 li
456.78 669.62 457.134 669.785 457.465 670.021 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.0.0
%%For: ( ) ()
%%Title: (9.eps)
%%CreationDate: 10/30/2017 12:52 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!*/gp@.s)SnJ$-&9e8`0B0jO-n5SlCOcDI5`fQ'\j-,lp@k*"6@pEOhWYWbgqMSH-RVo:p8'6IBdma)g/Y7\:E"_$"W3)o
%!tgh8K`K;;EZi4i%/8p,91oND\_;C_)O2/%,PZYN@i,MjP+o>)#j.[T?5+9i4`+.&/[aCfFH)13l_P$Gkk;FdWLldEE3.RJMA!Er
%Fkug)8ErgD$25]cr)6YFeZ@/8.K+c.V$N02+u`m$i%>iH581R%P\U;uW:p+m65UZhQd5>hmO80/riFtIX*(Prmj`b1BKrRAC*G$m
%6Pn:5@U=T$[K8;`=bVcbZs$B4HJb5K0Z8R(rNuV8&It=S&CMeI#qurYDPsR#[/!44!;<#jNW1)p^&<VVR/e2ab]sPL1sWq)#Qbb!
%Gdtt"2pcIi@$#'-8E=/MD09rsY7`k$$q3U1&>Ju-moTAjOFnj$RE/T%rLet2.F(6ub#nU8;h&Te%TK:)FtHQ<])AAs$UdJ%^uQU'
%_YHGu],,=d%pTbR9K)!OCfFCTn:q*VFbNB;73q]\_C-kh]%RBP2=pp,@4NH\Z^_G-H0(r]8k3*LS9ED*ag`ThALN9:@X(HS:f1&<
%>*R!V9QRYH6j]/qcU^H=NJiGI&GG$+b,55sGhU^5>'l1$Gm_+#;jNa;GI?^48\'@>rfWtMP3];fs0Yl8[.jH4gKm(g4Je'Db"bBd
%M`>jV>tl1g'LNDG-:,o2?idi9\#p4UOD?PgTOZA9!)FsHgn;&pi'76$0s=/E"ap@epUeG<PAAd/5Q=h[</n1%\5Xu,UC2[U##<>p
%n7=2U8dmFNl7*Mc"26iV;+9fP9c+H*m&C*X.bm\2gAghe5?K?oN8Xa`1t2FseW#T)?k^l4L]q'u/):39i!c")rdlX-n7aj-,-(TW
%?Xn\nFFYrR'S8+rrW`_397Eb\C[F&J&=Co5s"M#Y'UZ$6Lbgm!;>"jMdYPl>g93>&a0_N>af)oPTW]-;Ko:@!Vk[3V%5_@G0Am+X
%%@ftodacLSa=Sh=#/h(\?0sYr1qsM(Ku,WSIR[![Y_II*kqob>+P@e-)M+&[kg&D\>^'e#?R(p,:-XpXJ%!LSY4YuD1i>hb\?&\P
%[J7)[=!oFOiU0^^jR/:6"o]558ulHOq\3uGC:AWF2OXK/'c+Y7(Vk0_pO%i%s6a^K?16#@(M@HJ@YJd`]fE`lS9Z[T'[C.q3E+JD
%Oc4:G+6!ua.,^K`>'Y_-,F`IP)n\n<37.Ned(kWA#;b7&Z(Z8=@X^4IEB#6D"OYa?4X6)GEL!EFMoEkfE-Qe)Q8Y;[JM$Y?I@NNQ
%4G\A[CDBNYPjZj(QXYNr^KZ"'/k1@I@,9`@^`..k@\VUW7WBme9s8`j2Sic&RlLahc:.Z/rtEN25ag])&pgIL4OIqqbp!SPY'X%G
%;Y5NoX&[3u[$?r6!c(&sN@uK1>+/.'h`b`KHb)fDl%=Y]?Uk/lq&uK+C@t'R#:2:fFHc:u"0W5M/A//1`ZQ_DX6cHP=cN2/;U>03
%c\&piO-FAMM/B$?f-%q(k"Uop@57/)2]h=hdX_=i>FnMj=7$H=5LsNnIO-uVaS[RRA>7;[-BdEurZq\%PNc`k>,RY"ns;#+F!H0;
%:lA6LA?s?M:X+(5f)\Fk:P]t+pZZM6;*]V!_.4pmQ6n&TCZuqaiCcR<1^;cn\o/@m5#T5*T2`$Xm;>[7O#&^J*R*+I17$BA15q5c
%\hZH_)5;Sb]oX/68#e<dk45!B6'@MT$eS.R[6SP?8i^cqb0<SiGq&K[Ou"cQk,$kGPl(3sWHAq(<:ghkl[>+/c:9.O_.(\[X*@so
%c"jk8/N9lpk-`uo>g"GD^Jqo!:o_NrDm;;=@D5$%kDtF5YNiXd<RpmhkOV^0/ClmpkU15?D\2\lUsH`'26HkSO`S.Kl8CTt=4(%!
%#NI#YIp':0AJVMR%!k'2Bd^r"2r/bc%s=rLEUD:0o^.*@n.T<4?Pm>PRE*g(0;DS6WVm@/@>8XtPgD=P<pjHF\i8j(P_rYG.(Z#l
%P8F1ue4mt7$r8<QaFc33)WU-<:]1.TO%'e$mLoLL1@U\2l!U%;b[T&P7qIQG%s4Y;1>9FUde6&YgKVCN50?*@RD1gQ>Q#7e_cp`[
%i.-Crr\p68^O.`sf,*$2]Itb3]fSOW'8HPd`)l(<"[d)"oDY0i)o$;/7E\[%<d^I[UrR];RJIKkaUZAkoU`j?X4jZ*4J1BiQo5K5
%,:k[l-$*s4+OUrORn_HE%ID]oi(":;RQ)?,\ET<3+33.66GNER2T\/qiMSjd.UB16BW6DEJsiUjW,$hPMLg%lr3)JPD6`aiS_h[P
%P-5S`Z.c=\aN9joG5N<5pQW^:?,c`+cTcWr-Y4-@ZE("?I.Z^%s+h3#2#BEm?`-KX-[bnnEp3=?)uj-gD><A_9tN?[UHY:2mOD4R
%i('e*in)c)hrSBO<Q!E7I^A=fLL=_rX?8DPSHcgccptmB_D9'U@gd?:2J"d%G@"3_.WaeGmn2YF4E^38%e][EqJFBGQ60t42$9K0
%;m9gT6%/$XgR!\aG/O++Y:/n8Ai"MZoc(W<^rKmY)14`$&#Gc1T\q>QcaZ>'ZP7e7d*VC]!6NhV3V"c=W3:kdqN&Ac0o_S-R--YV
%"&fZ*h,a3CWfnM>nZt7Nk*E3F0B$E9nFQ:c^#b0I9j6k*FJY_kO3ejsS_4E3hr:JgcHe]YhL)+^+"%^p55Ik8CrC&]LsmH:I&PrH
%\Fl-h_thrnrbMc1Ps3LkJ[1=BRr\PkUQV*ms5qKr:V3V'Gp7DY?WuGV_gYYhGM9,mf@m7aj012dFVXi)6Q[9cU4/AXq/P)<H`P*2
%X'JE#.CQupf4at?84Cn>M@N)TU&=O+&hp/rde.<r-K^Y/R#dcRn<5RD?UmIb-+2*18sF'j_k2&C6-g,8X/N&o4G$f_^Z+J?#bq<@
%`3bN4+8JkcK@\t5P8#&E\WFR`/0A#IRll&g'10]L$GH4A<oWuFG\+;N.gr`R^9k1Bg02[dMJ`9o'mtWMZW4`Y8JGlf&nNO"1dB\N
%5Det"M;p[f7.KB4VVNr?ogoi^C,RjgfPc!I`QsInB(.4kr.bf\4oB\_ZRA"8b8E<ungspBYEWYqc_C1hNL:*@o<Tk:ZRF98Ek^X<
%'`*=;/;gWA@HsW:r%-"O)JFR8jhFWrmr0&]Q]n"a;ua"5;>b+[XL3$Ia^(?<4B(:`COF"W^/C9'rUN'XB*maaR(]t/b`3fplRKVh
%"lJ_GKk^*1P,Ef>M)pRbb>5H\<o0#2h-Q-?]AK"IV2k4iDjd$j[EnV*@ID`pY[HnNk'h18f4Mn'A\%l0VebmGD49:LMFor(C3-TP
%3Nk>:f&k*.goJ]5g3<(%mN&"!J,%7//35^3/GO.-1M:G)E,J.;2^<<[7Qsp.2l!o$NLE^1qchSY](5IW4$8ME;ZYaqa[B'bkIqER
%\o>EAWqgQ@q-]B:Y,X@]4oVo?4bnhSWmX]?HL$CqpT*B4len7H-Bg;cn"l`V]G"ZW?;0r"?g.&D?\[!/>K5<lc<l;]'e_qB'U\'%
%6@&T*-su#N"*BKq!]1Gf;??P3K?s&E(gI@ET#X44XoeFC)dfHo2(JM#$0u;$m_@@l(&eU6q@kI7s7.oD.2L+V>Ks'iO/Dnrm'/,A
%#<%XWk(sVDeM2AHLS#'r)>FV%Js9!c9R6^]]s6_05+l*sM"G7mV[j]c*<YlZ^j]],i.Hc(qdLTb\ET<3+7It^b'.9Ab#chYFS)+I
%:OR%Y\lukr;Yto0rQN:&Dtr2+Ik4.9i^Uj6ANPCiDuQQi<:'X6LDP-ZpO>=?cM)h/`RC7/s8A7u9/>E)r?-rdn,N@sWoj2noDRSB
%rpN(@CuGjX6cFF"?Lp>;.GO<Zp4Rn/k<%SmrMkmubjY@.[9@G*kGJH[h@98DUKPO4N&G4mD*Me/k)Lmfc8:BPcaUT7YeQ'qT;o%5
%5:2SkC\:.=&0_j:6)kI\7W8(-r5XRO+*;9p8bnX@(O`m.q:#XRhqmgOjl^LD*O6RKOF<=bm[\RCjrLaQL[6,SF?[",H(/W-g14e:
%*349`[2jnT8rZ+Zf'5`k0?qkoI]TSN@n'O6O58EZpWpS5Prh1@RApbSHo>_E\6kOt83U]bIVGoMJ)$)RH9?n@q8I3>Zpr444?CJ8
%4e%Tm$]_m]Tk@9j_&7[]MOg?*lr.2qpH!$mnuM1sHZJ&&:-/0s3fEQ)ZnL=n1=]uJXZ#cp#86W(&NIF7hKYGI?KR66H/iJmGaUKs
%rd@R$DnO:pj2Gc>R#Mo_$UabDo>\rf=.oBpFo3d2=dV.0jpe+^/u3.q4>YeZqG[ngoc8nXp-e;WHeZJWD]*u"B:A4S:&'!"^pLjm
%_U",YjtE3k%N;5CAJ<tgQS87Y0:r0QphenFTkjUYU5eQLc\(6l41&]4Nq51a9h01#%W>hIn#*$H/q1)-T#\jSf"(SqR(h/kQp)\F
%q:h7uDdW>j2,3/'M@HCsr:h$l]eb.0Oma($GBo_7`uDqYO0_VV8hfjtZhsNkaJt;..O@VmV-8=])!<nB2#KN(jtZPcbG`s;C*0RO
%X&aY[jB8hb;aTOE@L_h!8G@HH"4JTbhma+N4$o?:BX:^4I>=0L7VI6b1)YPHO"X0jr"7m8%K+'oOCfp`6o7km-dj!Q0-c8D6d?4E
%lK_QFKfAI19Q>7K^%rS_]T4d729jA>0r/a7a7)I6]T4eTQ0ta,r4J(Fmpf%\AEJ<!GopONqA=Y"f)_JBmpaN,1ET;jI#!/NjW?\$
%o0lHm(].CN19U0+.5;F<V!5Ub1\P4+R=osdg!%++Vq+itI76@T1dB;CR.j<#ar,YCh`TC0Zqc2?^O0ad)u6OjU7shX2cNh(C::1W
%%b,[@:G"_]5GN+Grh?+>HI:(uH-_R*Ml_&\QCmN%TR@P$hscUs<7JslcL_Q1Z-;u(.d$2JnlNBGhu!&,GDU`Y'*%02T>%K(o9n27
%rN=.9C!\FBFPuh.2?eLDhU>f;c<kng+YB8jf=nOjqmhKpk)Ig2RZb`T%3<gE\7_.@WJTd#ABpD]q=6niZlf(;^=Roh?f]EAHoYp:
%b\nnWlS`o.>lHZsAG7IJd'M<Cp2S_u#.rO;e?lLD[G68j(?X0&]UG<kF#-Y;q/Eh7C2Q('Qre@X8'\c9Roa\&C@9t,k8PI8o'm?O
%)6E"K:c0ohk2kC2SFb/b0B_KZSF:LdatTjgY2VraVS8@Sd,1Lbo1-a+f5plaWonbl1U#uU:Hdn48`ja]Lu7S)143%(oCkjNbqnK<
%s'?#lUPIoCaUcU&oJqCe`r#uX?grZ+Y;nB*n+W'EhJ:Y`-r/#oLYaNH8u3C5Qlr0!<4)YN/RL*H?N6qkVh8dDI20"NKf3^YPXU/J
%U_WRDHR_tO`0U>tK^Tb(rl9Ao1F&f#o51i4H[5U?Ci\6XRub%I=N%(q2Ygp)5@q^q*E,Y&Bb/1?i[`FH@"/nk58q8mWM!H[g`H8>
%I^t:S^#?$Uo5Q[k2sAhWMX"8Z?M&LHqsQMZh\D?P/K,24q$ul'&q%?c8(HRfcN^W^pWF`\lbf2?^U2S-fD^tdq8MSs=sK.emr&kY
%j**,/3.njY3bC.:S&a!'4T.S_or2<^SXG\95#Q<gn5!"!Df>G,qL$4RHaT9V4%<HQ'S4/+AiV</k="p3k^P65.U"_mdn.q7IlDi!
%A*j,`ns&m]IsVebDg)0#9WgAca"7]fqC;1/&]C1!?EiLaJXpZs`pN#;B],bW#!^DBq1ZQW],_=Q^R6tXEDbt8rC0HQp#?Z@'d%S#
%?Vn,7-0.0J:9d0Up>G-^^s@YnFN@nEK;3o\2>(tZP83RL2GV$4rQiL'=mR9WIr'(-PFg[ljC^t(^NC8IW=e%R-b-qa)i5oU3+WkL
%S%mp/M8&)tV9RmR47/W0%T(`KpHCU!a\jB+rTL);3"$49l9j/egthkc'\=lspQbluq0:H0BANF9<d)(%4oU8Al#m`t/)gB.n&G.Z
%c]HEL4#/!DP+ek)[m]:=]NjIjFd]ssSC@Lh-V.nF,nlnAd_;QXc+mr5[l[uQ>6u^SdVjIUos`R%R/tu7]h>$squZUdk0n36q0:h=
%euWQI'C,$#=Ad\QCMGf/Fam=GB,3F[R=L@,G[DoclD<D;UBg[sUeMWp]in[o6+_/$PAVWq#,o=Bc"9Jjp1I=Kkd`L=,qVc=l/<1O
%inu&tV6887ebo?._A);5kH^PU:XVH*/BGKonJ)sTMWnn4l$;UT4mA%QD[B^A=#g5Z^<VdArgk@#^M*kDr"5a$7#n.91@;+5@n6aB
%,O"C1BGY%jnrBE""]).@XmNjnk8u&lE_S<m(%_P)HV/b/";[6#)J(dflje?$^p2<gl=r7sg9&41-X@.J=&Y!ZCNVE7>,Wabco9q@
%6)F+sjit1ue63CpiEa`I+Do@!OFhI&>dM^A0jK7+..S2S0]q>lIt%4!GqIG2(\'rJ4UVMtGsN+`/h"<bn#Ls;J]fU/iP/6PP=5[H
%M$ftNb8g=C!=V05'[?0BFe3CAmMn^[ot.$9qQNF!I9ljS5)`bAo8c5WSA76(L4??@^q1dDdBYD%SsS6$`:oJqB=FK$:k=&iS(s^=
%!=HplWuQkANrOBtpT4]@k^OdbY[MRWpp3sYF<'TG\SZZr3c5.;SS=iSBL*f'<r0UaV5I$,JF4AkH6O((>[cuibN"3V+?O#jh\tW!
%RUr#`?@)H%qCXq50"61'Ijs2[CguT3A@sV$/9b.Do7!6U<jeVBotr*3W&3%]07"fmYu*HWK#"\C`ZP&GI+f<S6"c'is+F5/K2=N'
%5H,@s4]=O<E0d*nYsQ>DO>"fH,O$j_K[2`6XhXeG"iQrAKh"0SK3mGK9nE3=XX^p4;d(2I`>Ar*k[.9g%D+&a51fFFYNL8#Ej,1H
%$M8ZL4F'`S.c8:+"$_rFqL(VIg$"(WbH&&MBih?2DQT#>]Y/#/S2hhaFAu^;0!KW(.N_MNnT:qEMCG5L_X\lmjVUIU8D(kedps=\
%Vh?adVkOgE$PUYQpZ'#!-*Em?rH\MK=bs@'cV>b4f?XJ]Ka`GBG`!K<ftJas'E!pecL4Xe(/FQ@/o,Q5b2h.Z!.%AgeISpulJP.(
%$C.OG\a1KDYB9)F+#5D6oCR';?Y$makr\PQ-AUhLDLm"rY+GrP9nmq2Qkmr65c*'"X'K#1phZM2dAMT5ePMS0c]=WL`V.iCIPB,A
%WuHI:BUp^![W24*)SJ)R#aOQOQ;<J\,#:r2SfF@$h%JN/l).u^7]3GtZsR?2BW;gP<W,muUS[[LWmW!`+Ok$>,QHAR$!"+P+^Z#L
%_VTOh`Aep3f.m,s?D44fRMLj)WgJfEXc=ST\n2m>B2MbcFPG!DPas[34'Ha9\3qs2)"`g'\^CShU&B;tPnH*G%bMHu[%<sAI5OjP
%<RSjqM\)ImH#*=G:(A].Ib@Q/eH#E1ScBcJ3[C<UYfIf>aoq!8eIg?MES\\L8,gFNb!TmlA+BILdPVm%_K4m95_rGMoHs.Dfet<S
%A'bI.A'fLZ.gJ+-8+"/aXarZ`YfE%/Omrca[AS3J;?J6<msZBXebVm@e$Zo\a3ar=Z-H87XjE<\r_)Jj4c;/i0r_3g'q7(I/i.dB
%"+0'&;:Q2A4q+%#,V,5LOj!46-3lJJ<"p?sGWaVrN"U;8EU#LRURA#(=IAoQ#c%5['hQhuEmruZSJWab3Z[-b00hGY"/gXJh+h$m
%N14kp33-Pld73kL2GfLKJ\:iGWkTcf.Sqp`6$=AW?#-Kl?GC84SRB-'F&=FP524jdjK\kn\#"/FG'b&hqV?A8(L5uNmCj?djX<9a
%$gE;,fS1V2ga^*e*>KjtQb!^Mqh3tTr7rIk\IWZ*Z%:n#G*lNN.ii$":4<Iak[E=S5;rLmb>0.Thrp%g8p?OB4pL8NF_'J+E@a5K
%?"k/3JtWWnhb+fW_ZXpm'7Y/'929CQH9J[n4&URBUKDEJGAQS%Cuo\/b1:.u%:.u+,C]`L_;UUn>p1lXq,"R9?0d#r_Yoq<_)'Yn
%K\j<F;)11MC[bXUJokA^mE>C<!=Lnh3s3/TF@/F_-%<oqA-"^:TOSoLXH#9=I_`@Vlcb9QFfb9T:<4Vs/o[s[BH"BCT'(jW6,*M.
%F7Ln@Hf(nVYI*TtV61"07`Y&3DdD-H@-E#rfrMnSkr9cho=I7:I>+6#"*Zhhq>e:_JO6`ubHs>/T.*dlD0[iXgllNiRZE^DqT\cP
%_)qCu/,GorLLAq-6%*ju^6&ZT`ab;g93EA(e@\E`3J6F-/:E1h'2f`\C><?+*>fo9UYT!ns7_$gm;!I"Nla%g]Rq!)>oC_8f-'o/
%E#pb?i7\;-'ZJanK>7:kAY,:TIkFqkUe`V)Z.28AjGgN0j(DN3s/.f]mTfHq2NAHLf7&Sa])(r<g:WPrhW9lkn>WC'4^k9bh+!Hf
%hLsY90d<!(Rpb.I3AsM0fkf^@AAW3CRq0ml?.9hL)DC2rbqhNHJ2UlQ1qY-62II6ZSLb6=Y^CBIqRH%/X%jP'T7Ne9Bjq7mY.fs=
%d8Nbp$0c38B'=KNfLdAG"M9!gf">=*GN=0*VR\'q(npR(='E4Nr-4Dq]g]SICOa+F!B8T7;Ag4#la#ZP=W@jeC.hIB?HV=G##%Z)
%Mkd%mE5lm.Paga2To^hn()1Ccm@CW"Kha*3#`q[YSLi's@4:2)mi@B!6r@K.Ie#nq;X?^g+l:%V-V,=5g!"pJ,pP,)m\ilj/d_jj
%X)`AqJdeekFK90L*PMb::Q3$^3pePQgVtps%VT^BlWVX,R$M]8XB)_pbEW8qGg(bO!f>^.SCCPI@4MLSWs"_h_kLZ34EM]E."4.<
%[sCP\_QoDk^7Tc#GM8V,,4=]/)<!3)ES57Agk;(4<[h,hQ@a&,A0VgPKe#;If#LF5IpVT*POr8(h9BBWHa?Xh25;fo\Zb\`,cGYN
%e2C?DeOaGM`D]gKDb;B9Au/^kU+5G#-ee'Jpt)=@b?06g6L&!B4UJ+RH5^39_-Orm4%1%d4Xp_D<NVtQgd_\-)\XY)`"#bs^HP!5
%]>3\iYbmIEd`L;4ej!]<M5,Xnne=OBfE')%:`SFg7'u.>a376tdDt%FF?85+Bb>eb/7LIFla:RCn:$>U^!#Ti4.WXc;nc>>]!9&r
%U;WlFG^Nm#@TDf0osS'=moqL*[QX&&r4GY*XS#eTXfT`:\7Ou*a`sP8('cs\l>"QK[p?$6JO;1g#.p6j^U)?l]-"0?P9f0oACi+N
%@4Z^tkr*mEhD[KEXQi1Qj^!CL`-55+M9fc([*j20PQ"=dAdi16&"6aDH=$`e^2=7Me#@f3J&DGMV@<+r&97W0J:k/U-g3$pM)kG<
%;^7G_o`U'$f=_(1GEI3:9"R#rUgBmm4(gUoaeLdCpHG9XDKVJfi\!67iT*dK'-+M[bF=i%<Ac[q%7pFtG8fQd_9d=i,RCOel2tag
%e$\)t23&#q'MjodAVfQu5>c%4iHfmN5``m*4-U9&bc0Fbra9UWffX(do,H<kOh2M[rsY^8g0^F!CIdicUuA6R*LK0/f8PcT]GE/8
%R*L-<XXgM%b"6AuUd]fEGL%eAT=.Bqm@E\n"1_)tTOgEF0N!.dk2>XpM"Nr8\(^4D[TjZnjfq#e8SPXC(K#)s7Bl.0I;cLCn.p)l
%Y"Z_&k-l"='_gF5GMGN7:JcShZSopSi#^R,@/uCK:3A5sULHp6k^B7^J:Y==MRP?f:M>8m-^pjlR",OClUU6tMs>D<oI<&EJgpTX
%\\IZPH)T@b^S,fuNRoBPT9.FoU2@<@i3&T(`P.ts!b/@,<7S/JOmXBYg.+#C.I"J@gbH4iKdOO#.0G49HWe6R$mTHAmc[[]c&Y/m
%^HilmBW6Puo911>@dfoV]4n.1MnV.CUb'[KRsi4X&,s2Tehd5sVl#F\furtDGfV$/m$o?f3s2WKF_Ya[mqNDi_qpS[baZ4_S!W7q
%A^Vf,2mPI'8(c\<$Y$m&H(!//(aglY+$?[7GHn_%p23Y`]%%=n&Q*mLXTL"i]D7"[L4tP'/(=8;a?F&7j^J,J!(2L[G>,M#-V\N?
%rk:]=)W_r,F1437U,?C$A7ddjS.jE?V@GiW)A]]p<P>&KCMMteP>UcSD"TEYlN>S8!0se:_G=`omu`X;("1b_qbW5e%QkU2"/hBD
%Gs4\r5BL#"fTmVc&-`q[DH>esR!-5PVB\Vu_9b%e.t?Fkg8#]-D55PC)D*Z2+)UVKbW!/i+"a2==5)25-h^h1AP_G.rqUeD%WQ>m
%o7=a19.4qJ:1k1d=TI\q-\kF+O+]WA?KWP<P;'-;;.XM&AjP!ET3Q-r%m-[=2*dc88llHe^^aJS9qZ-;2uI?fm6K"QVGPtIe@ILn
%=gdl@jW76EGgUp)$I%P#"H/H:J"KE^1[joDr6lJc3hUEmUE*0*/LJXp#H]L[4.s"+qZ8C(h[%$9c2_^S5L;?.TSaZ78/kh@k_aZC
%:HXC:1*SebGb1XbDgkRQr'6]-FG>F91L'I%*^S9^(q&=SZsI.eDRMi4ULUCYed<8)da^CB@]2eMk7^J6TcTV)'6l2Q&jKI``u&oH
%0-f_Ab`gFI+6Lh.dfSEu)\uKsTpE8nbIup0dMXto7Q8s`@NE0.HK]+([,EpmLOQ6_."aZn+o=Dm's``)?C3D]rnQNqB-Q22(bcU9
%[n?)VaG6'tqX;keVcu>q!.'#`)G5uTX5$`4h:8D!OHe6K<Hk]bbQ9.4j80t-OWFab^Z9YgBIr%s;b`Ao(t[mV54>ABNe\oTjt$WW
%YbN:0\!`l<KsR\ahMUrH@b8W]%)B+sraPfh*?L)%T#V8\^l5:kCHlG2A(9A<h#/8]h7CNF[teQ`2KogGj"EXM$^''<-HM6f2ZD"L
%IA/YS@R>%igra^Fk9G&P<:2nrGe]bqhu!1CFF9[7r01sWWXtZ-Rc]h;T/.5^OikirlZf]%5FF7Jkr[+8ULTgtZuV+iHt:ic9%PIA
%rOh]"m=*^1+3UHg@/QD=&W:m$W?8sj8]#oN(^lh'jE]cHIH]\fkJ,($s+L!t+,<b2ToiIR3E[UTFW8>R3j6D\Bfl,T\GO[tn'sb=
%4j/Wk]pT^0@mDi`>fnKTm;b+afqiMZR*+M94q6Ui<@(_W^!l)TnFkDX8kceP3+S@O,KY1S^X^u:[tBIhi5Y%S8lMIt7H*5K,D<Mb
%(]1hbgtl*2IcWQG*E9snL,kQcBT<Ht<%n35Y&@-pn^q>n4heVWl,A!>bU-!sO6)"")sa`#X<3toj4g)-9PHT#Q#njo;L^K(^3Tkp
%MWsKUQ?^%!:VT";\_G1pU1ND4M-R=C#k&+o5rQt>?6rtNPq/4K?)%nQmuFh)au/_[m-[&78jtDRcg&O)HAHJuZOcT.?F1GBD_)@'
%X8CEc9LJT?I0S_*f,h*5U`S-k[qa#S5Lg<`Bb*_*QdZ[1ru0eO>IcKoJjoE3O7c!F4tXOHF4FML)3J5@'?*M@D(agOW=E;Sq.2Eg
%a]/&AePq0JMJX`,f]@)CAE,Zi:T[l4;sIb=p[U#fLfGos'0g3i9J,-UVl$Ff7I4cIcWf,`@5Y#;mB&dfiVPnb?X/%K!nQA9_ZgLt
%#dMR.GbSJHBn^bkA"-rnIRb'jc!HB(F=T@4gt\Wp+Y2fphBd,9>Z&HjQE"h:WD*PL9HW`)7Q/bl/f%V;%6+*ZGUg0C]#nj14MKi2
%S\#P%]4/p-$u]KRn$\U(k^e])gKjrEG(oT#MWIUC'$f4PWnh3,9o)mYH<JKkoL%h%]r>g$B7o0t/l!YLKh!m*6%NaKnj8?]?c'G.
%D<o[E<T_B@:MjX6c-_mt-3kH:9nde81E0#6YJ+KUFLAFqX1k)d&nsBWL@J$&]KH^3,nHOm4:IQAYO7o*QHBdV+&&Q(#eM8CgZ*rk
%iMD\cV-h+(g?-du7T!2%P=#*)D#5@R[$rI$.fDbDZ#Z?_0eB=i6@?9L_+iJ7bk:Sa^u:HU]H1p<C^rt!oP"!7(>=b1Xq``m_GV4P
%=UX\Q@TTFkE+G=_o0e?ePMGh>2W!gZ0"A%DX$%XQM:]<?88ru%S2B<I;/U\OGI-.<PporX$DrZ6G6Y,$Zq`!J6[fFBfr$ZJTO"7-
%`+,YC6DASS+2$^tLbrD=\#"T1%3hm,54(5-,t;#p31&1^l>gMheI^#E1M(<J4frn>)jFOYM)d(@3T@7f^Roa3Ul!B68"R&#Z:E;a
%mR:)+047CP._`?O&uUf4j(t`=-rKV6\XH5m>;sKa^*AF3Ub;"=%0m^Gq46:$5q0/sZ3Zg%etJ\4pR=f*b]U@RcA&01>?Ai!ooA$3
%i6t/F^U$b&j`$/?)<".<f/%.jXeuKDF[kd+bZZE=0Vg4rDCr?5VU*jjac=8#LUW'4XS$r0Be3Lpb-1:.T;o"]nbFlPWU6d!blMQ0
%#=>/,Ct.L3V4<^n88$O.c$#JsgcHM?A2]A[-G(gF?%_&?Ei.94?++AgL8$2qRpNg5ab-eP=\5.LSTQmJR;r;1E.ntO)sbnid7pkT
%e$qNONURW8M9Dfrr+h/_KTPlgF=jcgkQqRYg$I0kYX&Nq#M`@r[.s45<EfV<U$7CrY1qPOXR7$qNDa<m(jU9.-@WWFhVAcGE]$_L
%Lpp<OG#h&kJr!;s*uu@iZJ-7GNEddZeCWG%Id&i+Pgg5C.*CjnBW.Z4Vlb%1bOVN43&j+"bE!GGFud("@Fc29;tPMg+3.0hT]u(Y
%V3\Uak`+-BScd`$BtQBmW!%i^PNX/gjA,8G.-?pR]XgIJG@jAh/85TZfT'K25*A*BSo-V-7+k$?NVEcN4*)\[lXVu:3=SaI*@'u'
%J(M4U7Sn%a"gTJ\#c%Y/8skN&8kkao=id6K_I@&_iA>)(;(gh%hj]mY[@)b:(;1,&2oY89+_5N49bSCGB/6buO.A:)-k_h,dqlXq
%)+nlB6i$Qo`eYmJRLrtq2^,qjK+gQWX1TG*+`n1.P+eDFpP4ZWBtON'I8BAs'T9M8o#[TKS9=VWd^45K_hW+PEo*L*W%Xp7CJcmR
%?TTU:`.DfcljTj_jO<ku3b#BKNPic,&P=(PCjF(Ro.DCJ]U)kDRFRVJci@?tit:\H:jE@&1*c=Lai'\q(*#8BWiAK^QLL&rl^-G1
%7=;$jK^5Q<a@g18h=nQ*+jR@?cRC*$M8ci=B*PZaF$ZPP:<=k^":hQ.E#Gd/4+C\@5U\#6M=XpL#SPFXc:Ik(PV/$Nff2\b@@I.k
%r?kt\^FH`KQGM8&G4qnB>*$_&684q?]KWQ0>@c-HA%4:Jd5&k(LC0#`K:14S<"?Nt2d1rfjsV[[5Yeh42n%KSA%28MJo*+]Ot+:@
%;OE[Z0TBT_;IUuY;<-(pH`rrdRcK[$3,]Td'#f=&PmQV4=1q].Cg:<3fJU_Fg9<[qB?8no?5'69A:\8L<n>gln-7$7bg*l.\hXgO
%<k11cM"c\fl,2rco6UQbpk+?,iooY9F(f?+(JE$OhPo5:El,JNKM[+>F\7SUa/-bqFTk>sm*Yr*'?,k7odF*-lP2@d_B#H%RFd[k
%N3gaFh8e'ofMW$QEE>e#77H4[6MrlaRSCP%4f,M%@5Cr"/_)$;?)N6*]?d3r?8Z\EO^ZsSA[k2-@5nrNZo-S3.QiB,VfAr1Y".(:
%bSe^Yh.K:::01>Qn4dXrgYLPgjQ0s<Vc7A^p.)I,C)MGg>7Q>h+p+-s%:PSHDsG'5UTTl@X#ZJi9m%Q36/b)L_IH[hG\[E5;WXd%
%PQI#JiU$0bY+4@`&Sk4NB,HNZkDi'Q4U\FKO45kLVIf+NT?krnMsroTm;/4oX(G%(,ipS3"PIm+O5%k&EV:\j+!9'$fh?b^bUgjf
%a]<u[NQ'.(8Z^t`P@oS/:ik)HYo3XqS#+'V8b"R*?E;crL,s6(;dsfE/l;A=EbAKGO#AAQgEt&ie[Q--Km39`So"@OLk6J=8'0n5
%(_Zj8D.pRdfTg_U2OU,on:K+CTXLjPS\gb7JdfC7p-l26HtW/&H>4s]3cQ*Y-[HQb]2W,()+n@#G'(%j-"\Cc*W.`kgonGBCj*B`
%r$!O&3=mA#X:?'^'sC(ZTMO<XoEI_3nenr>R-%7s0hT.';hm!G@i$Xm=&Y+;on?Lb:j>Qr/sI<B@8!N(pMgt7EtE>=ok:B.qe:B-
%W/]7Fg-I=DB'^S`V\uh4-KN459JJkC3F1dsi^>SGXTZnYNXD=_/*O6SR_NFN]/L8dDhmu4%<.;rGF<G+s3r/B7G7#7LP'^@]GcWF
%S\-eMQrOb7ZL*n,9`u2iFC#D.]m1WVgFQW-2]M&B1U=B#X_pA:A%C'h*?HFiPAHfX@T`5t,:?aeFMQ`7]?bhln@DG;Ks79ETgB'D
%TiW\WFnMcRC'WjHI-WiZ*m4-4Ar/1-Yn)gkI!amC3$<jcijjb8X[5&*YCI%"@qi>lRO:+M&B]&;KJD_dddb1nIdp=^QQYkd/S:TQ
%p-ZDl8n3K5ZXFga&puf]Q`1\k[?3#_l=SV6Rc%K5"gPO^Eg\?;j(OKojR)NI=6&+m4@g132]oK88#Z\j^KO.\\?[/354*0<hW393
%D7RF&5/eG0UU)_fY:YiX4W&\)X/NoD.'Gp'.X1/TqVZD3Jq9:D:Fe$27^B(L]Jaei0'@<"E"",TihB3m8\IRC5\Z[r_X?">9g%!h
%l*nT6GXOH?.S=?nqH,;#Z;n#m?f.U57adNK]95mf68MJ2.s+[U65%7R]P?u=dkdO#c0]?(kRuS)fVr-5JaoOs'Bc4elWXN!ohsMh
%EA,%k>uH>=iHd_2P.KFidRM'52r_8H\P)*8kCk1*`Ur%Ys"P4@?p^Dq<tG&ro"fa_D^EJj+JYTI7mcQU0i:Tq6P#]seVU.G8^c1F
%6^d0]N`K'fe@iK][Desi<:]EMH1SK):!:eh8YtOf@eM7X>QbDOpR0'gIYG-\hm.@=T.)/>=(.Q"j"PhH.$^*N*gPF%3TK8(VO"%t
%H.+(o?gl$Ka[%>E8j#B,(scW70UpoInP5S$>d)pVA4d/*5-N/bF0Ys[-E46u(`*mfV:HjXNKTL66(M&fghXp=G<<</PgnI;niL?[
%alZ4q0Zi-%>TE+cF"=t<[IQQ..'(aB1/0QK!p*"nE#YG]2_[E:@Y5@#k1L;F&@_4LN%J3?Sn-Gj$N7oj%:+,$\oVsk9ikQiL1eO/
%f!Yo\s0PoNH=PDM)p\uMA[9V<LZs9*-cSfj-6MO;o")7TkF]B@fnA3g+?e3dV*Pj3%Df01eE22Uk\,=lbi+qq@O.G:CTH-j`;,!:
%eZ2[U"Jnh$-_&a_$;2C'SQ#0W2m,\)X9!MdcI&mddmpqPCikY=de:\RE0H8[r?i/(]:9>5DpV>D?JnO5!uAg=K0AWoY&W.feMXZ5
%'hdP]^&8[Q)VN!6p^kWOk#r)%EISVDV@1G`lr&T@5BE[Pj)":P)]GQ<*PnX^hF0=('4N\\9#0>:pi[popAQn)[ChPpk'OndY]#LQ
%e4ah^ac"AXYP`o7Kc]=le_@S[63%CRgl.l&QqoJQ[F2ZscmslO/?FmF7cSUH?!;YeZ:+S\U@:MPE;K9PA-W.s`MAdYrr)iErdt>G
%di>lZqt]R\W'G`mj<nK=PN:(Wr&>][D/?hKG?<ENZKl9F!b=gV&l]chSa9M!<4R$`mGeM.(N*F4]o"s")r"I3f(j5AboOqgeQR.h
%BO>pUR],T+I0_LiM.4"o1CHfE=K!TO$dsq`JVkOk?6/VW`Z$\X't^T(Z*VnGU,]Yjh?Fh2S'JFK*lP<o$^R_!g#qBAH$iY3]![NW
%Y1.GK+*q;VG+p/%`b$Mq2@^oEn4Ll*%iOIh[ubE[QX)?#d54p"Z?L<uimqAt!(KG!);lH;0u2;15`c6:YE4e-:7NG$SEW[jjZ:"9
%kbq'jOG$L;$?B54:/G,p'"HD(7Sgb2']S@^orOcL>[>V6IVR0`GtR9mMe#MLrc0W):OS&RX7,,Wq=g%V/&Ub/Wi1=bM6lk&LmaMD
%m<6d1K0GR4gYX&,$_&&*>:QJOPK35:qu"OB:t&NZDuS=i:ciF?'b/OL9hm6:br^^rf;n/iE[N.)O8:rk-U#'*SORt]W.RKalf-K*
%\;34=iDJ:4CMaiM"AVO-.k??J?QEu1V#=UAcQPQJQW('I]s[0[o[2X8CKfPC>SmgmX9bCX#hu`sG`qqu@B4dem.Y\9=,-#+i#qpH
%Iu%Xq.r*2<UF-V"Z(-eZ2\[B<a!2$"-J[82^QhFcR;s`rQ*0`%g5%+tS=&]YSA9!Q/5%N3+q?a6J6SG@`ng?(2Go9S[Z5\:_qRm"
%KND>@:KLFd1VKr.<lAi5ULnCZ\W#"c,Uc*crF-OPQ'.4Qd08m*lk9nA19GLGQC\UFZfsc-Ci>n2)R9uIBA88QLo@/XA2CY7Z-nr#
%+m\(QMM"fLGSnBkN7OY7$V>e!Ms"n3eZErLjZ4uH;TRk)`P.8K\WM@WG$ijim_TmqS6XamB/Ufo6+E7q%9pDs?P&4c2.YG/lhY&$
%I'&umg$KjIh`Q%QM8OGZBFOVU!Eku4*H:2(Ce3c]*UH'YZj.*<kVYr_jKqmSZdh6Se[BEoW,@4/?>O/=kZ+Racd"JtLVXnjVSP[g
%d)+m[/O:RKFt#(^N=>4tUS_UhDsQe4c$0MX7anu/Dp.`"-1!+Jp'9!jA)c]q9cC#3*[t45<!E_kdcgd:P1bi4=S?IhEbgmXB:r/B
%(^]<\JY#g57Wnt0cm@#4SH1dgI_p?sD;p\?e+A99'Cosf%pd$&TlPE@A:^Z25(hYc34lK2PW`\?FV@_N=,YJu@5u3;Vq1a'R7_b"
%8rb3&0ma\G[BPV<J&4TkgX@Bs&EC%9a<4>PM,-s9<hU)^N$nuWTk9(\1IkkT'<ufKi?B_ZF!WmG:k)lW02U0YS+^OR3XSk@6u<lV
%p11.jm.,V>1Haq:%5,hjJoI[=Ki7!oQH97Saj!;eW[u<cX"Gss!+-_7Uf1IdD?]DS]O#kX;i?br$2Js&[8'*2crts/i1dlFmFESP
%rP./QS`e?:Hibm=8fe#t"k)J&i83Y@7c-+^DfN0,gCe)L90U$V\ILp.%Ni28ch?=EK+&E3oGpfs+i_2Qc0*!">.^d.qU(0TBRbD=
%hEpR/]!^tlaA[DqFu+Y5HTUA8c(acqH9BRO>";X-,7jX]T%%8K&"h?m^D)%U7B%<(m5tmUi<dS50UNa!Ku;tMn7Hm29lHUEaK_hP
%eD3\3CWE,2)`n?1]2qsNR6*BhDk4oFZBdYfs!=5m$lVP$If9*X%'DakK>I5GKj\lmDulFTHp2WJC\U,]-HO-;B/pko/9^P6PcPC<
%*Bl$F_*8=UIPS(oRk%Z[+9EY"I!AqL%kB0kCZ`0j42e<WnhnN]Ys&#2C*K!^.pMeV6G=eB1U[B-<Yo`Em=\G`WPPL?*W1eWDgs(%
%fRPX@Lp_138q+XoVi;A&4Ti6!BbS7EV=NPf,<bf5Tug<U::m_)o`Dlt1=*S9X8"u3Iq1ab1s0+peYGZh[0_4rL]GQC_p0n@Jt3)K
%EbZc0%7)_kk4dH[jCY3L.)#>?ZC0c7"8lJRaHRLMmRXmY4rUYdKPQ75/90MhJT)eICbY)nHd&9%n$]1X9D\S<YN=&=2u^f'[!'?q
%9]1*l%hUXUn=jNOE4pO4!aSkD]>0ua!qJDM7"BMD^^l"GQ(pj"2`2P"@1,MGq?0l?kJII]6tqfs`BB'k5Ddhcad_&V`-HKD3LSP/
%EF_M=dJE0=35+)%aXeC_lheeNiAoTHWc#a^DmZ<5UP?[XU;#U-/f%EQS(K!e&$jsCgo2D9<UeN(_,`O:S>WXf-\aGQm"rM1%P#5B
%D)Moc+QE.-U?sE@\#co-od]r![b/1KNFGI,6KXJ+P+6ghW#"O6efB/nZC^)YY'4glEGT+bDE:`!H+nrq&c(c'O1VQVejs%YP<-HX
%p7*t)+4*h"c44:N]E'Gl`7AIRWU2(sD?NbKQL2o]SkUSnO*=(tCJ".7;<D6%cl*o2L,LQai'R+p,oB<_EM0u#<%th+fZ070=9;]2
%IoluZSQro6f=0g`U?nb!!QDA$eHc!VU">C)?c#f2%muXeQgdlUPruPr>ZcI-$ALIe-c&4u>RiBC@)^;NVqBl:Y&$u4_::^I0"@2r
%)Su*A=>UkL`%AK=q03d9gh0rFd;ibL\67F,JlJdi(8Q;O)Iu56`?77P&;'iNp0geM#X&A\qPbEuil>k3c>j0+Xc)+I0NK>];BO[s
%^(Q(1]8*<#]uusm0]&\E_;s0n3gdJd4U!Xbh8Nd1n/;fY/9UB5\^O;%GQctcQrfTFJgYp([:!EGa9Bo4#q]9'*HT%)lM;]L3I"[4
%?5jiOi9eu'<e8*alO,HBGc'@'T1f)OY^C_&$s'PnMnrS>2]liQ8jCs5V@J3[Xddq8E>mXD^/hCCKDc8A?m1n9"q.,"np"S')-U?K
%D-UF!KN!6I6DV*_]KdJfYm$FWDS\.;r6*[MJon<(\e*V2h_4?!.,,."m`k&aWc;?Ma?CYb$b;%_^6$)o3*eMG*ch_PqH81(U46<L
%\=m<'qh2\fn5Kf[/X0HnFY/nh(:4GdTG?`S/9D43[P\is.i1NcU"EWZ/TZ8ud$e"L$:Tih6&9,kU_(;bL-nj3l%QR<A$o/2r8fi$
%4uk_7*>GJh."Be&#o2mS\5;F$-PEusXf[6tjN^(_.4F#6=td<N0?hfO9G;05V])8cEh^:XE4T+T>hMZu(W2=2NC>=?oWlOC03X;)
%rR:)lmSP@AQqGgXM[+&BZ?RA'iYTp"H97$ddB3Adqp!=$U9YNF>HAhe2&;\-]tn0U^E6_g`WgZ]BPI;=,ek$7X?[,AU9p8?INlG3
%IBpMtPb`'5V>\D:A*Nc%B5OUr7cR-#$iTCf8%n`0<.3/IV3e+C_G[:4Be9Rj$Fd[rXI_"6QWp"l:0`T,D\_KJjg^Vl-I)+qE-\g<
%I,/TlQ^0RRQ>b+CbKC6hEQ`Ki^KYTRYG03maP,1eEpkK`&lCTk=1HG/kXt1mG/'2&1:WV)BsG6I\DQ+H\^FM?/!#>&nOcNc$*U`,
%\Yk^A1VSY$E+O5@\/MKkf;jKSCp!-<8H%(42Klc[$pJ^>e1NAWhVTiKe`pQj^T&Y1@C;^i>$,!#Wg1!:<4K.Zk4?3#H]Pl(gAYm!
%[oS;CX)$=BWN3F>,C$Smm?V^[[9$Ynf9aphiUuF*?"dMg8AD=r*H99r"*ROI5?g%1oc$8H>VGEcrH_Ch\6JD@:Ntd*[JE7XOc62W
%lsQM,:-V[bnB".'%pp>aGJhQiD^kU)/4IJTKl[j'fiWY0,r_3-mUTfh@bbg2H<G+F[*f>!gcQ;'NQO&Hfk?Y?=-82[W>UODm=lkF
%<[88KS@i/sNqAbP\`E54aRfA\EMOI8DaXg&>:LOdhAo+?jg#qe2``omo]U>g.XIN??Ap@((C*h9YcVgr*4"=gOn828VGn#pS#O6?
%j6#T,TA@/n3.0KaFlYJg$]ek6FZ$EuYns)\[Dse#lEFV$;4$tJ'idG-H)_;edn@5OC]r,WakA)T;d=+b3JBMk0+<u:bB1n"gBWF*
%B'E;g0[.g7R+X>P3cgO3]O@tpU\d_b/W.bf5.&20V2K1ki7=LQ'`WQs(<#8Wq]IQ3fp@(liYJ[lE>+eqm&._UcF17,*SuGc\Eih,
%5,[6gp:)0Uf]0loofb$9M$s61.^d3%Cn@g"Pt7J*?T6P)@=:;L-V3n$JWNTD(5:1^nOY.pX1IdMh^j]OpREAKCK5C%EW>Rm>.iX%
%RUW[?XGabA#+OZ%.r"n=THbJRP+6X+)`s1hU\K`e3fPpNUE102jRQkP50Gdkj_&]J/77,ffNQmEcF10e$UJ`=Hi%#+C'/47dS:]V
%<@f3U7Z:"-B4L2u8hX4;5NH>)X2C3)?_OX2WRVQp*Da@^gP&*C\#i3qCYQ&#gZP-KhG%`tGJ1SrF.tK@4&;3$7m!8/T&&5T5O.\)
%Urs:\-V*L5h5B";<.Wkcelgjf6rM:Ch379EhJ"?EfMf'pl+Lt)OlMq/qj[,/aKEI>X%U9R[FOUhJr^Ge"KU<lM+mT>T"(e-eIjMc
%8gCmPh0_f:B7j7UW'b]kO3.>sZI>q/Z.P#,XL"l/PM](Lqu+E3Xh9.O?G%=Ye)KU`07A'`NM[f#)MrS!q7)gF>i+!d8SNT)F)`9q
%A@2$\9m5X`V3d0Y2WX4]g:YLm:]%j(i7?W-4s,n.pN(*t36hH?;WW0'28%L'T]Dlt6+YE[*aCWZ]*GH\]q3t,*UVu%CMPT6Mn;S2
%pEK'M&(_$0al0B@$6L$VNJGEkV7M#\H@"1)g:;XE4??OY)4[VUc`]ssS,CPFK*OF.`KeAf^2\GmEkFjH09:=bAEp[HTeXS@a]S$X
%/Ckaf#pFA6ElEf/:0QEHl-nj92KkO<UmTWCKu(dnCSnX??lDY9OP@Ah'V>/^rNkELD/^h5NJ4];H$'Fj3NIjf[I_qn!d25t^51s=
%dcTD3lf@'0\>_)f'_aQ4bJhNN[8&0\E$$](V7l7o@;GPC<:AG]([I@0cpdNnB^=Zd(dGXrQ=A*3rc*_-4DsL,?e1N!03;r2+pZS%
%-0hmrX'9:PiMp,:c!1V]%klP4iRQS']m3kn#sU)#2sH*Uo$,&m,M`P=X`h>,aR@rN2R\S!<b<q58(W(QG=QKJnZM^jhS!:NW<DZg
%9A8e3ICZ]]&:B;n@DR`Oa]A5riiJMs0M8qOa=0I>nMGJpHdp",Ml5dX7HQ&.8rHK1lULYpNQVd&;f0,Ar-6hs.#YY,]s8Hh]M`Y-
%Kq^?D(!at,o0T-u=hQAN]BeSMMKI:edn#a5O1qY37ldCqCt)glB,.FND-c##WSAZ9X+d,!UoL>%k;Dtk[8K*"\fT@i[5_B'))bP\
%/M99<Rlr"K@*dQ37U`WGg!H5EY/];$`O)t0XZNY5P/kN574;,U0?*g-l_RP+m53p9^"U+m-cBWcV5*8/R57FL):3,6iOZGOMJj;8
%X[a^bfNq^G=5'&WqS$7gUiq\+1"nPr&(iD-;;U-s0[sg8;^agmGDpM1&>j`<Sp1"^X.6KB%C/j=)im0fG+[@)rSH7+:%n8uL'=gW
%7&RZM^sX4cDBum2F`e?ErjL)@!H%^68c)eiMQ`oe..+&-PkO=9LTZCZmCVraoHt@Gj=^#P:2cbhoZUm\C$F*1RCE!ZmF+:u&ppNT
%'#STd:4C?mX3M7AJ06Q+!Y?6.@.6r`[B?pZPJr%N5mPUu'`>ds76*Uh;Lm_Opqe74?iKYX<J$4FR#l6ML'>rqhG:UejO/U]J;O4-
%fVXO&:OmoahM[D!00V=-\C>j"]-nc8#2O?Q#8(,.o]I;q+G'Pts7l2H!IfRiPDY5A`R/K%4tms&$1NMD"oKN^pqUh[K&He`8IWe+
%%if78Hsg'ETnU:iK&`5'Jq8F2[mTr_!jEaIRL1#>mN/;lohW)BroY@S-OWe.kLi+RO^pAmLb'Q[fl2Z\$(R$uZH*7V:o6[9!+C:,
%HmCsX14bT.j[>4@<6,>-@*gZ[Mc!=e6q$13%)m5i-q$'6XojcBd\8u?+<RF_JMBZFiHRpNO]gTDO:FN>b0-;CJ4rpS"<9^Z-&Mb:
%!@aTVXV'cqa@iTDV^)Y<irfSm4>h\s/BD]O)*nt3SA`P;OTENm,ml=;#W'OY/ki(8PX)QnefXr-1<\<h8WWuV82Iol@%(P,"A2OB
%&Hj%DMiorL'W$)s?3AFRrr=H:"dp"\!#^N6_or-hOVC/eE/(5eDS-OW3S>Gg,``T#.9M14O34ad&HHHXO`nWFNg#%+]T(/)Op,>T
%)j-F7-BQ(F!%u>DD6Zct38R'c7,A-*U,f4VQPg#Akoi^X3;=]OI"\=@dlAm-$+sf05SGcSTY!aiCG%@Db=.P](0m/"AAI,;c79r*
%NjARZ71`!Z@))beDFA:L#AVE8N+<e5(WN*JA^QK/7\G;sT^Z8Ocsi4T.)sLg!-1q&E"nl%S.R^t%YWs+3mE7K9D/?::BV(kStdV+
%<(%EFE)s>8!5ikWRPWR7^hoB7=?pp6?nA%i?qYAO#a97e!a(2c7Y0Z"P3`C9&L[Z36lnYVU)_-C,Ju:X0_*C+./:YU,7CB)qK`U7
%Q-fSCg.a5\^rg&&K#L8b'W`iTH#^nFZ7m&bTu7>6_IUL%$'*=3Kk(a]MolZJo0u2t,=%-pQR.QaaTWG"*$[KgVF31i"R<q2U),50
%g46@GFU\T]k=`GG"A$q!f3\O.;1T?#hgjjQ+sTWUgQ_eA7\6sEoL+7C7n*ZTjgfps'^1F"^De^ZKO4_S3SFZ=O--am7MOMVo!H(1
%)Pq>08!$.Z6/[;gS>-DmK$6LDp']r1!J;K_J`dWjZP^.;EFkRiK#:,I3C)R*5bB4*;Oj6:KXh(q-tu(3i,O"`=W*@`)^#KYX:=(h
%kH'5u9N9@\Hb&&uOl7kD%SPKTaGZAE#3*GcdN1@J_,P!#pG.\]@;3kB-nBnT$j94pZ?Zp27seWWYW^+5-t6d>/OXm#1%h6&J@C*N
%3asAm/6I`F7t>8lgtNFVe9RXlOTg:Q"B[</ac8dm=9`RJ&ePW^nTKS<3tpCg!(&5%cFIie5U>4Gi!>hdE2a-(G_^pEI1-0[cng"i
%cAnG,%,hT7\MTGb>X<<W!q-R,"?Qg_E(!.9,km5T)'F?Kh[c+VbqP/^-!lI[cn.jrq]bcE8@M:?dVaRA?tg*HL-XJ<5?r2l&Qg`7
%<cH4cJ=m!$2Zi%d@*;@OOGBdR#cA\Y2I.NEK:h3BY7_G?f94DUJV?Id",!LG>_[:S!CJE#JXf-$SHs(jJB-0aYms&DjFS[FElNIp
%k9+.=NYOfM1`\.na&+ND`t!pQJ^].&6"7LEZKNuV-RH%8%0Q=C10u[j&nn/eDZNiDdK>V@V'1ZM$Mf7o3qd036Pp.7+7bKf9nn4p
%RM.Y>;p>n&clpHd/;8XK65B]NIP^X?5ifOM$WGU^'][,?7O/D80ebZZ@VD?l!9oj6BEj*h9@c@<?K":gdhOSO)!s#aRNp/jD]ta]
%\\OVV5g,PG3M''%BM)ZoeiCI+\0jh9L:KE-B$1_s%f)1gkKmlSa>-*f8H_[rR3G6E(Mf%]R4BSpool5g^'2VM9MOcu:i9,)ae]nd
%":,)R_oa$cTh12cP`D(Uq(7]:U)eeh5aqIB)MR?nM^DDk%`Z<u,`@Eh6MVe-`C(;r%>S;T87V^,K-(:t,"47M^qlkjDE%[FN$sYc
%JVfo7/>=l]#d=NU@=`-:#c%UN?3Ah'nc`L4^cE>O!Kn&1SNp"\]H$*c8O/3S8'i7Pl!YW!EMc*r3>P6gaZBP(JJXJN2?78uB441o
%;q;4,\0VIR*fLbs.+qi-"$Do]2pbe3(;N[OC<DO$cl@<)C]G1.0$:V$L:%6dpVUsUjG!aJ&p\56#uI@H>B\N4%Lk6S+NWR`e_sY9
%",)%kO@IedWY#J,\4];AW%[WME>Bd5'W[GA&FEtAZueV+Qmru)_@4>e'On0EKVX0Anm+%:NW?366D0R<,SVrJ6j9VKV*grC_du],
%ce20^68)tS22)2'*Wr.PZ&$:tJI"XH@XrR;)f95l'P81%j+6A"SAh:pnZWfT#qG1YdUWgk5"$Gm'#Th4:@enW=dk!mSJ)F6V+EdO
%Zcp#2YsJZ1aN(pP+h00LFIQ^9RStCG*MVI-3a$uhoap5*`F+`d^YnVj!/)UiU-(n>jqf`:%6XeJG$%NSCu#E\&rN32E";leVLYIA
%A-@_PU,Z*UP%l/%\,-lJl6?k'-,IinPViM8%@LuB!"$B[,#"Zf:e#9A)upGmafHo?G>&3K-mpf/oo=Vl6^GE3B8utP6*rJeejfk#
%U''FM)Ao\+M_tKFD)q)^*sbnD"h6sVi%Y!:f>S;$iWRI]GRIH5/D![K_ih,G#948Z-jo5QW%;*?ZG6^eXQ*U&AX];#1-g%)CU"<'
%NQaFTR-AK:E&X<N'N@g35X>`&duNU(.C*:(Mg-U&Z@Immq54Hg7UX#,L?45f:(6iiS.KRp#BD.=3?kJ2hN&O:,C">I&f-&m/f0&r
%XuId4(oegF1LLoWRc7dj/:/BjC5-XTV4t-h!c(;H4,%8@YY.M:6AgBeGZ_"uO0aDT)I2>O1\csHZ/U$2FG?V;Vk5AH+3#9$R)nbl
%!u*P4!ee5)6jC+H0a%as[hVOeQq7F#fus^S)Mtj)j:V)h.<)hLS^9aFjZ(F/!RAdgl\5M'(^Xi7_"&+J!dWH+lPp>Qg-e1U-<`hE
%7K>n9OZC#i_./15NBl5I(O/MnaQ<cHUc8`7^j6%baDt=U%.8cNf>ksoO$Y22><iMc73$lo-/4#+fqD,FaDT3&6kfu<!ZAWK6W,5H
%)F,3!QE]BM5/[S%<p0RX?tr8`XCNQ='Wsb,&>@7PJfdB3:qH].dPbO<6EjB!9LbeC3,8[US7nup6%I7A_U5Lief'4\9U>`>$(THm
%VM'ES)&\o0&Rlkj2iNSe1s[us.+_01'M5Y8KX-OUdO([J-ZBPA9_]`md_GuXoGa15d+8.:YRDSp`2.$E"oq!$a4h$_BNDEh:oH>f
%5_6f)?q.M(l];9B/C="p&$T05>s,>/#*'=E[255u]b''$KqX50i=Ijq//Lh<"6hlXFd.(]e43(G4U]7tLZ?X:edD^XnshQ=,`4>X
%!d1kd;('cT)G"2RatbcIHtL*HRluG@'Y7K^.%gqo5cDn@$]$OkQB4@XOp#SMWf5U7Do#s\IhO4aOpU28)eIS=!";fEoU`jLFg>S\
%P\_QP3!-@#=sgO#M($HiEb1?i&;>d^L7;YjP@:U@L_`f4JK:6!Ukrp)5khDXEQ_">h/LgPO]3-IU=l"]R$:;I</_AC**3D;ToCTi
%3G\Fbd`We!4!KdaQ*u3>-cjjW3:'!>p'@IXK'o!nGCVpb43k4tcUee&^f\2e_E]9t\DX=h'#1Y&-V,"HV?G!LM?5$W5QP,H'bj)Q
%`j$;LQUsl&YUZ+87t@B?9JI5NF27ou(qlHTCt^2P=X46&fFqoaFbqXeQGK[ZL2kONNW:!9de4S=O[cT1fNt5I&YOsJaJ"2%m1HRb
%mAp<q3SM\F+?J1@#T0k8ZNr>4]1GZK#nG"t?BR#^U)DA%*%t-mpLZnQ12DpN@=g$IS?s#7=n%]>^tM'/`&1$bIA/;:_[&B`,]6kD
%K$?,Dj9ZQo+r&A7JPMpe#kSBX[buDM4WR*/+VCrT.H<=aR;67M7XK95_[T`)?@ljV*K[?hgp%*7bfig_Z.2VX?ES>n\lP:U?D:OP
%#GrC,NB2$SJ@"4mV?sPe>mAkC*<C2`2)q<Q)j-/T&N(_W3&&gI]H@jTinc$FE0gRLU`Ha4M7/*e;M5AupJ44j3f.Mfc^H_\MdEab
%@3JVm.MUPg`6*]G=ITY`[,OQ*6Xb<"Q9ml'6h+L=+[G&A>sOS\LtNsuH52=(+^JN$\)^*m#]WUeUCI@XYp]u)a=MN!CslkBJu/ZI
%8WL&M;\CLjN!/=f30m."-"%6fi^OVS^nr_qMd<^EQO&p,8+Mrr&\n_$%M9mcEs)c?Sok.[-'6+pj-?)>'#s"_UCJJf>L()>As3fp
%(AE'd7#3t&IJ+9jdRHPGW1dTjK#X[e=c<`%6F%&5#Tq1a!g7%9O>0H5C4%h2EEH_R!!9;J+3Vb-bjjm:ft=1MoQ_)JL':BuZ6fVG
%Z2fVb+559a`cQK.<cFqq,:7Tu.on`!*3RKETa^9s7bt583JhWI1'4=fU+jH'9^4%HJdK=bJRhlh=bEfL*@>epkVDZP,?-oP6*Z"N
%Ud`JE_Pg<_IU0mSe-^4+>7.5r@9uCEll-a8S#LqucV^L@maQ26=*&/uEcV?h@D&SM:.-336oiQ01c+L;Ym`:rfjH`+E"AR]*#\9a
%1rOT/HmFc)d57_MXN1+[&L;1^0lAQD+Ri'Jgp&:M`0<i]j43<)3((=tNW98lPKZSkY_'g"DBKetdKtc9f?:C/2MRIC*r//$LPZQ/
%-Hp:V6D[<Jg>)m!dK"EZ1RVVPZ,sf.m]"DB8>j=j"H>jYfn:)SRq8<f`5?&I`-NDpfuCuaOtCq"83+"j4B-CKIaX)Xk;]8\8-F]B
%I:ij%(N?"8&U5r@jCA\\!'+7$+AbX1&9ZJEEX9lY*<RL"!6sP9]d#;ThINGdddH&,,FBF*XB-RMrQdN>,MTiCA@mA.kICX/fnEgh
%(1cuJ"=RCLp]N3g2VdX@d,qL0"lf_0*cUWh-.j4#D#Zt_5QpQ.,tf.$\2tmjZKUEg!'.@p?t")74bAL0aLF_E+E=;(QAq@l]X%h%
%"3_2ud)_p@Za^Lq*/HuO$53bqNhln<Dp/g/WWYif/4N7AfB8t)Q<b\r);:^!gSG^(0iEa%Jn(-X=+pX"-R+)ob0E0g02\6@,B;%W
%(oV\HcJ3,DGt2HdAa)$=iTWebCR>MZF?$Iu1Dn68il-(pjp6W6cE/B80dK]iNp;>O>quPhbYW@kA-)fu%Q6'qdq$?0%l64@R^\Ir
%"qN^JN9&q76XpMHEA"?6P'p<(dC`[Vbn8;Y4#);F$mX1;'0)%>iYF7nDq[p>\abU6@%$aeD!sHt4="f?Mi?k.NO`nc3UG+:PA#_:
%=`c+u=Wg@&TJJ'k2J!=O"S4ID(MXaKhIuuo$EXql?kBW5\)n%%A)IW[Pu)B94J>9e2R:,f_iih3afSu^"Pg&Q3,a[B[f8A.6!Alu
%d40nP`BL1g%M/o+-qu@U5X?#Bn$$+@bLl*5c$n@f5[]F,iGJ\LoHZ\aj8f[br/R$K<h"YkgftuV.jegODk3O4Xi,UcTf`Vt_Ab+j
%%2t[Z%1Fr9ltUfJJD3.QIn-$%3<8b&\Il4_n[,PG1Q)D\P3%MTM)#M%^PnB->37>Uee'@?IYgI^=Z6qGM-d^271o:j*7fumog0ej
%L3KuT>_?ER?B7.1'\HPB=<DIQd@jZ4R0\n5!"R`N,e9"*g_4i&L*S>Z3_,ciiuRZ[&C3@Q\"!^`69u0!:7=A5OYO%K*KJ7m#V:\E
%1rkKFkn#8ahV^R)FOX_%DGl$uWi0>5.a"7f"08ZX-":gdOTEg^SY_/_=p0aH6Ztj]/0;ru"kjDBQ[i;+SARmP+k$a"4)s]QnAGJO
%s7+<ENW:@[kNEE'C&!@Z'YQ+4O.-GN`pO+a`HIP$9_=F[!(:2\3"+1`=nA<0Ru@C,1?EK!ZlfW;+EuKpSI(N$$RWkcprF$8ATL-O
%(i'7?En2A>k-2?im;N)*crpP4[]JC%)J$''ldT;8TV<s^8ITOn%?rk*L^XWi'li]&'-b_e`>0*R1k5i4A,u,;]^1kX,S^BRKRHD-
%])_1)=UD;Q+ijq6HI<,,VLOA0O90>)6%G20HD95h(kiV=?ij'm2RtS;'FE)uaGq2ee=$L/i.N)ZDd"EXoOMg\i9i)BE'/h,3,TH)
%F9i36FM$T+bnWJpJOS6SO=3F3O#ucma'"f45g=jA^i&aVnMm'bnX`V*O41E47LT>3V$3cD_i[)B"@BfjGWTrgEWkNL">="(=XjJA
%/!h7H5erok_;QRR']o\Zb%2qTYuiXJ\BWsk(P%/ejZ"oKL#fb*'=]Se/3S9*G!*eP0Mj@TZ**'P,-K5u7@#9Y`&8TF2Ve\J=%(nO
%-ZM92#e7G3p`?bB?mX#GSRR3kAd9H2]5^T-[@;"=L\f.4O]d)&7!=H&b=?f.%MQK_MhP7G:f\RP]fS\=J`)uA[q(:E96^ls+W(_Q
%!Y"WDb2NIdV1LcQ:rGZbk;YnuZf2oaIa1"nDE1P!;o<khLE*DY"=H&PD?<<N#OZ<(.PRUt7q%2%REf'i.$1ck+E3qDWZ;-adWqhM
%8Cp86@9-6c%h5ape)*Q##>PJh@TUZr_?In4HkaH`;aCq6QcY^qE3t:&[gp(sAjRo]I8!/#.>s2\pkCaZWF^Y=Jm0!mY?0fS8Aie)
%3gg=f-KuR2H*"qqj^oQ)J<[qSU*#&H?8tY=Np`KN*%"::ors=p;S3r>Q2hd_a'$A!mYRY95r\s!#S%qJ)99!+P"rUm7ReL*9E]9U
%,L>=>ZD5aaf5]k&Mj$2X<lYcfK&B?.L<oV(=:9SGAuu3[)Ul>@S#W3b8Mie[Sf0@U^pCQ3nKO:)&K/E*.hJO"(/j#2GRdM?fsl8L
%PWTAn1Rprsc23%lg7ac72blU?E(!?()"&IGeZ@dClu"$QhA28ua"MH[12Cc@H`TfSbZ&-0W$8`ZQ?V,_8M3"'mOZ2]&F>O;:=e?,
%!V"IX!)9)=c`2!%0F!UIKbNtj1$@,5E^+1'SELEX*$jM`cTAN>8K0W[`5.a%#oV-$FMbDkO^^4!+iH[D7sW5c!4(N5"af!&k,gFI
%#\U9""N!SiMMFIRC@EF/JLp)L+S46<Z&p2b8+&pbE')P&49_C6#8YNi$_A-lXP$#-L`QRQ=L&J\nSf)@I4Ir;:mOgOKg=E92Fijk
%;<A.9FZ9e\\4'j-U!2Rl+O=7[=BjDmCBTL%2K3Y#JX&o>am-BF1BeCMI!QEIfZJI+/UK7)N(9KXHRiEqM"q,ao\&*YB<<O@nZ998
%492/\>AiN7['^Q6:'-:7_j]KeD'4i2N>IeKQ[LpqScOsI<)0`B-h,MEb'F,Rk=oMQTO==[j.Otd">dAO3(64A5gB]i'V:70(?#F[
%P<Tdt"HYc,"bO>hP3B`Ya?usqS(p9-J45kH%Ud1?:[r^?!p"')^pki1U"O]F+hRnNG",lal3"M"A=9B[N)iA&7bk1U7,l="Eq5*H
%J=Aun!@$%C;R3\UP%Wn35^`.@Hp6-c`05TNmArQ")&$n`5q0ctE<XP1Rm<G+1[ZX=s.?cEgX.WHNl18gkT0N>!%GF,Y4H(L7@+-J
%5f&aT&0+snNLDcYnFR,DCteC5HUgJ9m^9h+3RS'S?ngf)hR1(G=GK",7Nr-Q\)@&CY@lLnXQA8:?r\*,j3;[B,J8O@`Pm]5#Oo*F
%r1>+/9q*d\T]X&BcB"Sb&]Cma@8FmZD1-hgCNo15G`VQA425<Q?HeAuXC&c+I5W/9:gMnt.h7F?$U?X1E4#*7MI:bcDSqWBo?/+h
%LlnM3S.)MDS@ZFbA.ZD&TXkln5)QI6$E-#"E=9q.J:k(!]BAuh"G<KVA77L8B];iof$@[YB%[aW"V_KujS:r\7?]u$.EeWr?_!L2
%0.0j[G]0Y?e*Ok')u]:N0+bdaAbRlY.LP\!62_aHpfE+\RU5\![4I:Eq@QN=]/omOl]H1enVu9IdggV#=m:'KWDt1iTNDDuW,n/`
%Sn?bE-KY)E_GOp2Fff,sAIn.dF2!0!iKtItEB"ZM0,DCq>,di/Z1f((g5k\'*!S-1oTs?W/@ak=+VIduN8P6%QVn=s&Tf9Xi@k[k
%,>E_Ve.ms^/We6JL^b+&?I\##_7a0$%0K:3hO#/-p)spUU9(3jn//PW6WRKC5_[7jZ:J]L/Mn@TAWnpWm3/W8c4LDaVX,'l"CYpo
%PW[tI*)EeLPMO.9M/n.iIVV%E.\gt=_uE/2#BDMqbZHiR%Jq,5()#V&MOhQ*.q#`jnc8SA$6Qq=D1Z5T4bX'U#al"f^<#49O1("P
%1W@_>-kFtSPTtjE%)aLXA/UJFkpk261@??0q+f.\_3(Yk_!>+$c>^V]eP,KQESfr7;9Cp2GU:ZJ[\I<1ol</-kXrbu.&D#g&A]9h
%H=$-#n(WiJ8jNX;8jS+b)iG?Z=L=2%o4%6b?H8]FEl$@97>dgI:i'kC<3UW*1@s/^ZNp]ENATY\caK2pL_t[kASdlfr#]:p2;%SF
%ROTC]<\!V8\ZHbVmaq^^.@#"9bIPI1Lr^*kDY)_f*Mc@iV_!cpZ3!"2O]a#RLD+nA0"guDNN@)-q&l%6G3#=1BsQ<AXO/Nh]u%tH
%lXhlmj'q/*AO<2#am1OS0p>VQZ5HqnmGOXr.Wl5)47,!?gf.p>]T.T6Fhu[8<ftnN@;&>,QcS%H-L7mu]YY8B7cXOt]%B^.jt7;c
%+:O6H0,)2Jfj5S33Tm]7H(EX-?8?cY<Y5fO:_fN4J\6qt5OlotZIK&@AW%JF.$l7mOq't38^)]/N7Y@PprBkE'@'Q\WlS>K^+5+'
%`)sV-K`#P;MAFj;*!+@FU75<-P&KDJ+`L'.(Z=AZot?pWSbpXg6KofpnCuk!gOD#.pkuobiO==2YGs$m3>g@V<p2CcL'RU83\g,7
%j>^X:l*)!RU/49=7U3/VP<]s?jXVD3R_]T?ZH*(91`.\HQo%'`VcgID1:.EoTDR?^FA`g?&=F\`"Kof<J,HAO8hkK*-lAIJDI$29
%(1EP"LdQk&02WN&8R?RQaGqj!@a*R5?O<dafX`'pH;gj"(24[1lG!*M7RQ^5BVYT<CDRJofRcrU(jH_G`!4,@_;YZVCh>7@/5eY3
%KLb1u;VLG,/qYG`#>;cR5C`((f:fqGi\b+$?tELW$kY)Xks5[CXJgS.?r.IfQG<UC'(4c:;%o`B>*3d`0pV5<=[ZCX^gdq`@XmOV
%O3Kr-6LnUJmF2qK@^9V;7!t&6!ebfh)%2,C-/M8#-&Ph*^?<,)79@sp$WR<4^cr7rqXPA8QXM3/K-Wi39j">nE8HCPJc*ZX;060\
%NTU9FgtQZ@f#]+.-?BBW]J^TqLlb=tW(Heo0Yf]H-k(WX/DaK]_8Y%An4d55WM!pFN&%?)`'X*N,gn$,O;-!&dI1?cUT.#6!ICq=
%Xb\?8/!++jVZG65XVeG]ebk+b<rpni+W12pdJLl_GuG8__L(HkH(C5kc9<h>]1).\1'$V,0+^OZja1l3V&A1CjTY5k-E>JFZpZUl
%7kP58:7/T-9J2WmiI`!MV0B=e!(>V$lZ`h4OpnY$h:b3cldW<Jp[[9^*,L$Ipa\%MRGD^`Z3=I4=e/B2fj^CYc#6F+-mjPWLnpFG
%<=fG^:kGR$DLd_E<!F.8T2;p]e=fbE`MB^+WK3!C>VVcmZ=pSt9gtboC\_:t2U$?cf`O8=cf'3p6U.N4ZaXo@Z]'3ZDkm=0+*'\u
%\YK:TBhk>4mhatSrpZGumQ!ApM-67X2.$P#3^jeD7KLENg-'f5HA=(\E)Wn3^uq]A/>cE%/H?7r5Mg#%qk(2#rWNZ2e@06m*!MbZ
%p(`OYFJM0:!fIl5[l0,0fg=O^%p,"]Kuh2!hNdsY;H+iKOKc'e2/rLoA+U3MRVU#s/;T+4K)Z#.12qn+!isLhrYO48XTo67phLh&
%jjr>b)LloOr4@H5`nnK1=.BgBZWD-8SgMP.rURbI65;X'hiAQnWa&rW?QeCXXB$k\0O,^7<s/V*&*MmJ_gf19H3t'@W=72EbH4/Y
%;*09p`;In?Y/<pi,l!E;Fs5qLT`5\op_WA=JR9Nf=le);U`&i=-ccBkZ'6ndX"hJOe%&hhl78e5Z>f(B>Z5.jD-]qmaJe5h7r/66
%e)&a[qt*r=k4-X&oS\N6,m\8p8HhZJ)+g[4:AD`bCG+0O(J'[Bqo:=.+c-,DB9u,sOO_X;M`#^GY4%0GD><c/W40B]9ROZlN,[!A
%6n#f/Kk50M/<suQ_gb`R0K*KQ%62=(Ik2`[LHeQ/rn:/XUY#r9+Hn.=/'1kEp]nJW]b3(C!^,=^3UmVAc;J)&PW7cs#"Yha"Sai*
%f+WPEW<^`(%&jinfq$3</X3T)mD&kk)j=mG3AY,p4\JE]<AKOP>+HP<F*[8b]nS0fq#5NUcSbF02ug]I_g:5uADO9\>N$@MIAtXU
%#b5gi%PYdSSTTaXCm>@^]A*1MXE!Cg.':.ps"eP4^45*u!JA0*PM=UU12n2@C-=7'_J?Ir.W-F=>oj3;.RbA\M).u4NfE*]c`E!"
%n,E%,DYa<I]00aphf>hqjb\R2^@gf%mjW=tEIR:j-`6!W!q27?0Il)*J54_&&J+DWY+:B(2e^gAaJJWsPh%Bn\jNT[S=cLR#cXKI
%FnU./b^1S&Zq`A)3`I;eN+U]Le0WS!*+g5SDXs(Rm3oaR>Ts=S<RHYeRrMV@Q#he[q(rm0GjentYi$J"n,SFY:^TbJ@`Z>?Qi[j1
%24"@T=%;qZs)LUa9++DPj<\'c?DEf*_M;`-6(P2>4U(MR;[32rc^[H#>D%hGi+3L_8r-\1_];Vo<W`LdiE#65]M4MsOR]A=,;<O^
%72mf4Y0777Mm,+RM+eG[C[,/)E/M(t3>ah;3Otc\NWb5=A%A=?V[=im9upEn?Ak>L,#"?Vdu/Au,SQCHSlO>+T/OR1ML;,I$RR_u
%%o%=ujL6gKNRFUZ0Of9J]B1;oXpVKEEFh[@)C!E_$G6eh+;U@SW97j+3)'\UA+?35"]d7[HS,^q%n..Bd1#*$P7MO^+m>.=/NViA
%k]B*aGf\%@ed_a,;`D-!'YKqOk_86BEg@6(\%GYaEp?p#j^+P,m`sf1M`&8BUF.BQi*!G3ZPbPXK<*0-(e_-U45oH_;iXgOWsJ)T
%L9=%iMF7R5?HnH'0Z4VK^8;`Df4l3^lKk%NRiLs,\'X(Xb(W3.Q48@<5<f\,4[n4L!HWXH("L6KdCjl&,U"tD-&apQbeGD+O*PnV
%e<)#Fb-LRQVYd[3GD;%C"##%%qJ,P9..1\2Yegdm_n^7*D^Zgf0..pf7kVtro?#Ik<YrYg%5BZXUIp/"MJ&UoHd[J^h4fugEij70
%AC9.'M-1ie0*_kg$VO$gAYH%/9SNfA2N%#\Q8j'WY;4u[^o<8:f(A(jR%4Fdk>^D0a!X@U9T^%m=XKaAr".D/!#sB2b[AB]XDOI)
%8>_.S]!?1W;lmfAc".i.D]HjP3WH$f$e?i?DJ_+`$6ndQ*W[]q1;Glo>4GDQebL>9D/i4*=/MYuU;n$:J[ce5J3c5k@Q#7C3R'D(
%>B)Tm4UjkDK5kb^Nea8i^G!*1<0:&n_6SS#As5i;+ck8+6P$_cgTM-m4$P%5j>pdQ>i6OOTRTe-8ICI<a!+tO<5jXqZkknCp3.+4
%<:NdjC_mL$7=poB@.]**6/-SMeX97P(6d"\Sa`&;&i_N(3HrAR-KuuhPDLU<'b]IKQ'[&=qHJJ>`@C:SVj0pq\Cpr7U4m\&jaQf_
%Y@"j&b`ns,TOqN,`9r_mn$FB\JI@$%ancc9/k"E`lckSl*NKotP%3_-guL_W4=cVp3*a[S7r6N"WkbYUC+tB@/c)lP\kd]\e/^=6
%8_%*TFh8hL@f@VL[AD8oB6)3[0+&n+3<8TJVHk.=A$.a`G,TAET+^Ko*ZV6HZ]jL122)XJ/`0#mZb8j9>A7(]a)aCo;eg1F^tUDC
%,Zf8QGdk4cck\^X<LmOrmAu(nmX_Jr=Ph"d?":Ls2<XUe!7>Un_oJ_*-Z5e8Y/r@XlpTNrFuN5?B!ju-Z2JO:)a[.R+/qXjV`f%c
%)BjG:01%j)*1qE$'iC1bh=i0THU?-%hID=9B/^I0*Jk'D2@JVC,^F/s$k1_S^`Q5D$[qq@6Y'Z4B'?fkMP]#*W*A9iXsEV]VOUI\
%O_%7l(,IeJkTKpbN\ktKN&k.+fq)=WE7jI51$n"*0O2OinE%/;RlqY`r/2#uZ;%b#Xg1-XL=Qb`G#9n(-<]WW%jn70I@A,Z`FqZh
%DH,=!p]sKnTpCJ&B=LdT[FYe<!h6APjA/1XKL\m>aoUT_ah&7'#q-#;$VE/]!D^u91<V7U.Ic1BDiIgLhD9pUG`R,kY(\f8#jkg?
%i4V>21lE/B=*a&a/e/jW&GGOcJ%,AMR)lu)(9R[[#B4SgfB/a23.7MY$"Uq?ZpPC0;YQf&N)"3nd)]aJ&Kj1JS(>-U]\tqZ;I<W$
%NuaZP.Hpeij&9QLj-5.NO(_pr.P"8lmV)bK0!_$C)=E,`I:pZeC"HFm00>">"qGfScu6<,HM5g""L@]+;/f-JplREp/JV0Iji&Cu
%!38Yg'@P384qsl@n7:-b3c*H#,j3e2:lXu?S_*I=nA"72@Y=.;Hm8;oTi#")48Y^T2cHX4UMb-[O[e",#C&8J52^21NsOfm<iim6
%99TO]Vf.Mj6<j0HYcaaS!L24kh/8ID\KF>=UD#@!"GHOU[<DkZ`T*]f#`S(3_gA.+FCJoq;%8_ON4Z+XSq/\DhuD>VfM-\4[PolP
%5Q'q2[+U="[nIO9@(G<BrP`qsL"ZW0g3QE@W.Sh3Z$V3nMLiqcGd6b(W95kH1@G<'X15l?,T4ibggr@D.$9IW2/KKtg9nNhNnBnX
%.U"_DSQ;UDjPupL3`Y2cEM"u!!?;;en5PGXT\,e5/@b;Q-.s$'+Q/@Im%Y*2&`=N#l0]e)(D2D4h<lI;!2Z<8iZV_^4-5cASEBYj
%3.\-8Tf_R,Zh^4ckFV/?lhC3n7]R_@Flt.a2k,V#PmP>:,pEfgl,6UU3A[7lEAF3F@j!.jBS'T`:cU%*2mN_`>'8cS?L.!F(E<a6
%ROCf:`AA1bO?-[bA8N"YeZrU?AFfgFFTN<b01P=\A\I$.etJ#L>Tac<^Z$4mY>ipW8V\b#)pYO]CU[9h_0'N%<1F&`*$m["Kqb<l
%?q!LT5b^Tq"YSGW9k9MLVdF`&MO$.f3%*s"&?I4X9pj7t)XY/2:iV]e;KXbqO^30&Xgotk6l+[W_!q/-?iY-GjC=CPG+Br54ZGWr
%jI.$Sk02QP"bc]B^G>p"BQc'p)JFa*5ZZCkq@Ib&.EQOVF?$RD[ZeScFDo(A#_4Ea%ZB#!QlkQrrcV@@PjdG*dulUR#c(*;a7fQA
%e!!\UBuKn#"("ZZ$3THX,u3r8RA,.h$6giY1Q_gK(nrpB^Z)EtHT2buWJjAXlC=ZoW`7SAXq]9Z*+j74-r;k6mVP=5X%R5A9?%CG
%Gq"qUGK^UXA)3=6QqhX:W:^\3-0EAsrMLMgfcYslj[93fA>#s:lf3.;Od05o$kZi\2fG3b=K3RZ5^mS]U\>Oc;TK%a99],()d-#b
%c/64';0FrNha5@XC6B^)ba/fCI:=Di)M(>/=q\sVr`X!["Tq'&>h$dLG][g2#TcSoP`3_mgCK@a8*3tK[g7u:[VUh?09[l-d1&o;
%\o;"iqK`4BQ)0HD<#<5&r*A@M_?&+$!.G0RU<\`%G>hanQ.i^h(IVa'*abK!%+1C*<`"g7Mb=35)1orM$UaV/]G]/U9\C2_j"bii
%pp2NG2SpPG\ZQg[%82To=VgELLh(=aY9ESiV$h^$8_\,>5goq=m<(@.r+(@nH\C]5=_Mn,UT3q2-7@i_5W48a-19uI=p\-S!0d%*
%EU8m@Ee1/[D'^Mrh',67`=0;QGQn0&g*4'#BUJD&3Qp%1O[apJb-R];0`[rBM/)V^1LeA<4/Ts)%\$J)c(q\ga>t%lWGR\:o6^iT
%]KtT'e?GCqL]LK6i:kONcT(Q:[$-BI\hr:*JGIIMQm;[F-eRpBN=Yg;MdZdHKbQ9lamS;9dD2(_j`1%J`._+e)Kf>qW?P<@Xru=^
%W[Ori:f:/!!2t"-CfQjO994aJ&W(`WUmStqk;Vo3f[U/SOSuh2$SXd#+IJTBf9P:8Q#/ARi`0R"\4e.*,<C_t"u&"'*VW-[5Xb0#
%PIrS.PCtf11%MBm4O#I)'ga&SkHaRQe4+lS>t?ltVRm#$N`<(g$W4%*2G@]&\l?m4]o2187YoN.Veo8Sf[_N^,X#1<4-(kBV(*X#
%/D<-9#fkL5;]A5:(VZkl*MlP_#SU)_MD^#uAY<#BBu`o=B[&dJ<(]\`?g?%E6,/rTiGjK6j[I%;a&%0>;dW$4(\JKR(D:CDA(h?t
%l)51*KN\8l8`NAg3=%no@_MSZk"1K?!.C]V[+E/CQ*Lt<WAAEn3tH]DJ)e8;3!*fag;:]&Q3'hdccU/k-7cB?esl)=!,C/$7;Zme
%%hP.#C8mgM\:sk&&M@9XCBk?B%=h]U<JW2K:a+K'G'.P_3VsI%pM%[3RpbEu352=!IY+YolJC$&Ti7Tm$G:db"#IehAgs;/*3)=l
%e7`!eBL)rNWHKkk#Sj30?1Z!EP98dfT\0P5#R'Bj@Y$-jQ=s8AZO&t%ff<$<@p>MZ7R%.)>XGp//s?Ke9=;R/-X,ofA5qd^b3M.P
%o.\`$pVdEQZ+4@VZs2[lb@<Y(!'Lsd#Zi=@GAYkB+dm+1GCq/gXN,]XI_eDm1B[("pFC^rjRIQ&WPE&p\Xl&V=ign.E8SSF8C3BH
%692*DLm5dAIuY"4Aniph-g71(S[f<'T+jD?8_%B:T$m\`^8^fqe9Zm=7E9ntjP%l/n,-&M66-PLTVFX]AQJ.I#8X$K@GqD:8r8(o
%3_@+!TT>fJ5S#R[,A$sI#ARY%kM#4^Ee7>b`XuV2R[4+T%d/TR#0LnY63i)]\8j,@3GoaN"=o2VZ,).>Mco_N:IYG:TnKN`5bQ2k
%g<W5*nTm]g:&Gthan@$:!1V5n?7`V&JAfrPn=rc_Lh%oQ-IQ@4.EPE\%%KaC\huh&ldNQn9;0sV;L3=i%8"U:r>HG\ou2HOIS\9Q
%9WWCX%t;7rrTHYI(%8>ffe13Xor>RT!*e!A!CL8&nf.\ZD5A0FE7p3<%s/T2T,6sl&+Fh$F$em5mFoYoP="bu"[l@MLt(R[Qs+*%
%)hl<4@(DNa>HXtC1\0,O-8\fm_rQ/<B]SBG4TT-^L=\66A?qWt\,igPdPOl'[&u!%Vd!.K7p&p+$E=Oo?OW)j@u\r:n7Ssh>aq-j
%3rVZ&'n%'tEToW7cZ";^g:#)I;/Saf?j)k*7GMK6_!TL&_jBuDY"(flo_%l&`^XN?),<RHOpYR#m.u=`2?Xq#.F[@)QEJMr)?E"Y
%'O<+SNYr`*Q/YoYGU?J&+A?;-"IVBsN^9%)>rui7.HFrYd>).1+IgYn`\h,:1#/u*QbocW.*5tB-)n<8]l"2c5g1BfGDHA(YEJhu
%RnFQAjM@=:ZAnrlGMlPK]^50(dl)SY>??7LUpu,lXZUdM9@kb;2[3`d,*bksP&]kcT>GIA&'$l3!>(mTq$Id!H`tXS^&C#Hj:'0G
%`@)dC%el6S6j;3t@9E>XIi;o024(NrfLfb"P@EE(]Ap\fa79r:QlY!m.?*Vl.`2=:X(]Xp!%;;p`=^H1Q\u@%JT_a&!*`JIf<673
%m507qQ::(X6(Ccr,#?SB!AOOY-is'A9]7EF579V^i5ZK&jabHJ#mAc.,`<FS:f*Gmn)0C?MlThuMP@/^S^um=OD]Ofqi#3."@tnG
%kohl$FcDB3Rpc`L0_mi4,5V5!/\*#GHQP"AfntoS]H`aHTGp)Eea^t91tE#K;H;q7$Yqo<1<W8DhIdlX^B=M[>q2=9#F6)*;JD59
%A7+AC"#,,17+dl8QoLtNWJ8a')B[r(^3F7Vci%j"rTGmm:[Ah$!i%Ej7_6\InfDLDKcrUMA.S-[@4mI>Abkb]]iYC"_WHR7+JYeZ
%YC!/DgPk/]2,i3GZ=;=E]/#"*Iik#3kASUS\%QqU*+6Qp1K;LOaWP<4']3iNge_6<WfCBK!&@B0.qc,g5uRL*7rS\?j:tB\'Q)O+
%I;abqq$PI>/Vsj3C:HiLBp(7ALA>:O/_j&s4;Vdp0+])^1(K!["K0G$jAN=o.nZcjA^ml$>:_%J\T/##!TpXfQ7WQN>q^R-CW--F
%OLgeaTU8t6O#OraI;9J_`,FTU3$O(f&?KFY^f'I4\kYQ0J?"uSr[I(Y<"_:adl8Xr<6^XL;,>tcS326?!V@$;+YBs#O($k!I('fg
%^L+?`.+ROO@;pCr2aDEq1Q[`:L/:#8kuNI-Y`US=d3_!cpcc9C<-?8af&PSLZ_JrjbM"=aJ1!*Z[UXn^<324ma5YBCMV6Z_*H0Wq
%'8>5AgZc]d/'E*V#YK;R&KeM%Z4G:q#nLugO_KI\X.LEiq'cpUg,c+(BU#Kcg$cEm"GGR^!GT(ZS[AaED]\8las`B;;M^CN"?%>L
%om:M*'WX9Z7R270g_okGPY(r>2@/#2\O\W'1Hq9ngk@gcApq,g2SPD:]#,Pm@+sjXON2:Gan&N4QF:$b(^pC[P;Vb<"\1i*S<UrS
%e\e-;1l@&LFO3PneWWMIrOgmF'@@_F^#uf]6rWpAgmVj&M<4nbbR1US(>knPf)nC-CdSi<=S19F64q'pDo&1]]\#G%bIAiCHf%1@
%g;LKY*>b&Z6*'UsHlr7R#(%DXkD/UZkV%\fU5O+"/(dMhj(c%$r(^XncJi3"A]*7,?BngZd9>#CN&^8knaZeVRS-=#nKIcMq>edT
%WGJMg!<XfY,G49=_%PIjn294.B_&AuA8*R&>0gJ=VWI'>?uEHZ+7XXgb-kl*5gX'Xi-VZt]B:3)OeULHH/=)i^2*8Wc6i8p"h^Tf
%[r`I9U)[Vsht-W9P"tAl6HZCh!kfA#;TfN#=3OM:3<JF;h)S'2gXKF$2Si3=jq`ta9VogJaWZ.hpgU?d228+01o[.#`G%LCC6E[K
%`s;r6i/`*n(Hu#K##<HP+h3X`?\h&I3o-or:PKI%efbZ<ms/oK43r9+aQW'kAH^N[Jk<onMOFJ-\EP"&Q0"ogPka'@K4!BPD7D9A
%#`lki>8/][ANfV5I#mJT;O1t@'h&3ZI(&ii_+9;R_]lkX,k)R?7aj[k#]`bo$I$'Beuh^)7ZCTHUHho+Q1V$4R3#3W9N!\&aa.GC
%-3Uhk=J2olipV:e#+^IBXD2bc2N#@o:"it"7N(#P8>o<^4;AV!jA(hVDR9r*iN'6d<H"_J:.J9,Cs2I'JPU,8d&5&8SlJ`lm!HqH
%rQk%m/o6#uC\4et1J035OVf&bEO'F*;3b&UC9Y;eVF,Z9h'CK/X8QEMK/.>k,-/>9a,)H?f/-FA3Uj0MOp$ueSCn]>M2R!a+=_/a
%FCAMaGHBRXM$POjql!-/Sa6J:rIR\7L0ls2f*V/e.&Lqh@HG-i8Y?;7KgKX-TH;;t?u+U,DcL;F&EiroojDpUS_4_;,cL2`_-2of
%g$6Q^\5Q-4X=,)5dcb,84Y:/&8Rdff(%`8,iXl\)4C7=l#*XWB),LXN(:+T,Q9$6g\oG>m'Pco2ECn4,..%-&?7cT]O!+Ai5FW3Z
%,"]Q&4j9"`!5?&=(i.<4Ce4tkTG:.aG?(.=`_sKL%Bk*s8OkiO_9PY8p,H!!+.J8WG5"0nb6ODDc.nk4q!_f_!L2K9c=A@.\5Qjq
%*,1)-h,G;[7c?V$@7c7$6&bjTU\hqXRf\[HhskcVnb87'pAj>$V<T*<080O8_.7K>0Rej+XCkp8Pp@pLB0^:-aej2W"*F!B'"EUo
%R]%RZ6"#,#noAB9qPNrI"&]'$q_K`>6![9C>B;ui+TX'M6BCk_iWr*T/:5-.#?&#u$\AZ.99O!^E?:UtBmHcR&0M0P;ib<<p3nW@
%"-FoCC6X%,cIU8)_1JcO.[5ghkk^[Pfeh<<j_-X6-5[gC!#<&L(U^!oMFa?+C7rd?J8O&=TVS?b'bE!6AS.L#,R)/faXE*+db'd`
%1"ut[1)5&?-HT'dlS_#:?HCcEl0:Q;FK>EL^ui5APT_&u(WP:aj\i4qfZ?srT;?%3)`WS;EC/kaPZ5pr2ZKUs@$,aQ7:>B2;(9iB
%4#2n5H3_g"G/lYIPW/fuCa0iu$r1N+daaM<=YU(+lC6KS$*"8b!ruB>=C5![=n+.W>NrlY6-r\?)"Ocl#t*0\O63*/(4oO>N:LZ=
%C_5H_qG"4$-CNotm7]eHGiF*e-mDiL+j"NgZ2._@`.V&WN,qfV[RF01j$IO_m5JEi,qoF%n+I$_,FSsVZC>Tt1)<UW5OZ%O,IT]$
%kD+p@P'$`8.m4Y>bta\X5(Fj&erc5WB92eH;Fqj^"IiT.iIb17<'J&@anXE#i_nZHr^+*)_1PS:9tmGGV:2jf59q-ccth6&2,DFK
%jkpEA<UZ>89h%(:*2%!!jqXOd5#HMuGPV*UUd*9Z%.A\:83bf)\Jjc,G<9pU$A5j?h86O@&Nf,-7[EiC]2fEKT1GH(b@[5_7??Zo
%lOegX<'YuL)M?>(&P\`NaqSVLWhQ4qC]p7k<dek;n8`2^J2hK@'dC?:IhY7UXb^W[?*,V^nRbLUkC_>Vd(&/WISI5jl6AP55VK%>
%)/e"s@(jba<gb:2#EdX?^kD)D7oZ5;n]">KY&TiDffMHuG3,;P8j"WZf']j^lql8:-cQ:TFeQ3(Bn0.Z!U1ZKYN/RRBrA$LUVoS_
%LZ4P%0bMlcJP`)_0fu<7L3R"-(D!L'&^6c'a?ER;=I7.rSHbI$%M[qVaIlV(#(jf5iD,;C3p7oHo;s&50^G[aR61^7m&U#4-X0N0
%05h)MEsg]GGM&K[L>Vr\)"H0[`#]X?=\mL8lDVKem\;c(OASiF7KdeeGD2Knc+CgKjUK%iAd0&H5Z_f'@PE@<J+se%%pLF!lF;ul
%fEii9JF887pfqHWn.FU"kjr3LA_5mo@cVQskGa=Re4gP50!'U`]I$S`VrI]COW*+N8s'7!pg)]VqXBZ+28qaDp52Z;gr.n.^,#%u
%B:KhSge_mUn/Z"CS)3(^[q7D[/W8Z0LFC%u9Oq^)eOrU$h3Q]s[#athfdoPKbP<0tmafAB3B_TA=3Gfu"7=WI#F]MKnhS^W&R\ZZ
%F>tpPjo]Xq]D,XJ40]65lbo(q.\TUfc!5d-4;!0=/q9>E1t=XOIEjdnfuWt`gPMUG[&:]El`s=&A($nhl0Ya&qW(K]X3tT9BYH=0
%O(F&VcRt!nZA3r(`KUQ8[HRqB5]u@V^VHI!YkXP%Ch_u*OG#Eho?E&]bibU&QN*9EMgB=>EPhl:Y"Voe?+HE'?ZPo8a?#<)g\@*l
%q=oXjO*a]jlpSb#<-4d;7[D]t#.Z]j<9M+iP,iEi)-\P%c:eFSodG`tX';e>Y3)=c;`N2r%aZaAq%KD<dP=Oo8ZLfU'Mk4L$`S"&
%s"?0Rg7Hm:IAnG@c&$2rDjkuV:8qH"4KNgkdVRCILM;V?[f(<Qk&k\rB_*:c4?ODAi#Z:RT'$1Y?M0Rj5rU5&&0'\t?Z#mJ"3YRJ
%3?"l#CTfgl?mq<%"0C_k2C!\9ic*Z8FjU8BSK`-[>N*o+]fpRqV/_U/?-42e9hNH*MSX-Wali_0*lpWQVURZ/=%1`KA':MFm0dB"
%l<9=X>GH%`NiJW[iD92Rb^)Q-2>e>hJKJqBe^2UI"n"i&6mfMQ6`)TaBLqnkS;R%K*%q5H\($9u`6_()$YjJ_'jJ[N;C.e@M6ael
%$03(/<o@%W2iW$\`\u>UAj7#j27.Qj4@9DP8/6^qOk&Z'fk%pcM,f.-SHT$L/FH`*''@'!5=i\+hZBpKa$jqKo-d;3iQ9f].%6;A
%/FSpA'?28<nbWZ:,\'Nm>g@1(+,1UiSRE_a*^?B%Ccg6LQo_t?,Oq>)Pr1%\W]Mkk:j$]Kb@d>o^5`#8VeFKcZ1rrsg_OqZ/,QDV
%7d/Z%V7,ba2N)BHj7M"5X/ZT_;H=C^r.IhSe(p6*OJO8NOlR2d"Ye3L6.;ejCBQOY\--'Afqc#)C^jEf/MEV+kRH_h>@(!14EEFl
%UT0_.61kglW*6H%".HYEIMn\V6RCZ"Qnl=TdUIa\f$rm)Iu6;6*afbu=u^5"1]c420=UF.r;Q[nGm)a'']7lk$h_Z;Y)\Y:"#HZ+
%!0p6ScUT#kZ"6Gb;PE0L%<+J9Nh3B,'nPeX,Ep>$(7^gf<\]K`Z@-R*5@pC-aK8%6rre7?c0#@gY29?VYHdiTn6>AaTSr%(">(6!
%,M]f1dK_akI.IEFDWf1K;f>(mbX*H\dZ.=006Z<cX$qP/ggjR>21T9%V0>>KVN"tX.N$Zomd;YuE))0]"eUL5AlY-/g^m[734GM2
%9WW5a9&3-)L6bFU;"!-8[M,R%dg!&/O_`"^3sSm1fcJnaLZ-oQl&c/Ok`Osd>R72J-OtGol.2_(B8%/P$G`+4('j4&RKVGR"olWN
%lCTa>Fb,ho!D'PP?sS5fLn"2\`5-uH#p5hD\D>+VAhP8O<.53mfV6,$%@pb'!OlpHm3KA4@;$A4Wl\;g/Te$gdD=142?Tl%%i24^
%5VHA`ks4\+O&PK]"VSQ&R,Q;B[$DaXW/;PU`hkUY,2ldtKBXb^^(/iZik]8()+Z9%*rsO;lK*;ebi`hf=7$&KkhU+aEB^OS"EAH-
%_6WlcJ@RRlX1B1ABa=cVm-.B@m1bD^D)$R"aNh.XGOoaoDG\N+Csi"Z88$pV=XVhHKDN=f$ugAJ^&l6"G4LP/BI$\CPL7-jNHk.N
%NaTkF$*(fD:0oH6UhF-]esbo[TN)$1N5>h!!L\$A97;+%%fJoWF%pY@1r=*t+ql/7o&>Kd0ji<+KWFQ95&AOD$5)"ESkmKYLI=Mn
%PT?ihAWKeso^kmchNoPG6%.hJBVOV$N43igg+l:KbhtJP>elO`Y*#VK(DkQ\]MhL;XO<#T`?X!#o,[Nf0!:WTa3S%af2b--;8>V'
%'@)Z#ZZ2ur(8*%uMH1b$7K^I(c^nr'NOp:R%4Mon%$.].bqs@)/V%[m-)24_<b3=0(T-B*aJN!r*Q>pYTQ15o)_>07'U*DM;hu"(
%`'Rt(M<LA+E&_I2GJ$9P[-./!19EYU:t\pFQ_,i51sa6,BK!Vn*>?Wc7("EmXL=_*EZ8SZfEKZ-0poE#)]Z(><Q37WnoVr?`7oku
%jdHdEaG<P_Y9681@2>p$!#U"AU?Zk:N3@'H^f"u*dD01Yp2qt17^-(GpWg%;]!2I\@SL$_i6dohMTkR_mn_m]9,%So!GWE7PL?T-
%8r\``gg+=X*6[3J/Z>r1qa@E<I9lR`F:UNTqrS%n/%0g;OJ2')^]ZM9!Wk.3dqL4\;Eq/XE!;U\Fq#OD1E:!&*jpT*?JXU256./]
%lqP:JlE7VV<jXW\NT0\TfIh^7I$\J?b]s5._8/3u[Yh!8+?D4:n#JGmrDjgb&2=]"XY[f+;%>?D>!T[17K=H71QT3eUc!b0+!&<S
%/6Rp+:brM+I,<0YYgZ"=84l[%]:?m/UjI\MG[gls,AQcP8"\lN=QfJ9!/Z.%#hkG.<.u<4JDrF!,]hd3E+]A;9Q<s*&4nL#1?SpG
%;q+<>G?.SJd)UK,T%uQd@hK+5bBlo(O?9$BM<VCj(QcbJ\:lQ`"EVqKX_nN`][6aX_&pL1,:j!]HoahF6NOU7]HBh,A2Jr%.(:2f
%c9bDOD`0,UjYXFt&K.YA?r:-?r[27Y[A98.lYeG-Ep.D`:@PPYmJt4h9X)VX'l*Hl,JN"(?/M*>`GR0d,M3J/gS;gXX6@FUM:\<4
%@jLWoc59RJ=(_8J4O'*QF[jd\caRL-$G&B;pW;(R4*gCU$rEP-:4PTqXE.K7E**gl6&gD(mmr91`Ec6jgQ?+N.-g5k*.#(+4?Eqg
%NKp[1TNL4*!ctNkoC)/'m."S<VtfkdVK#aW:]hhhI1O!S?t;Z2<dp'*]UY+fMp/L]f^.fO?F^Mr%k.i@=%WBNbX0X<qfd9DK@;8F
%d%N)CkQ45S.SZ?,lBJr8h<\)R<2+EVAkf;MEVLJu7/^lC!I'FS!%c*0<7QoD;12UMgeONc9UP(tOSe<lZ,aB=#Yh@notW(5@UlLo
%.@QPOlQW=TJ+D&0SY^#E_Y76g'+L*$VQZ:p7Bn?__.JXc]&Wl)oM#LSA@^O!/aFOdIRU_-h,OS@BOt\mg2YcN(egRa>taUA])k\;
%og0&s6fA8>:2/G]@p@*f\c!``heKT92T,ZojWqFUDA5cXo$uH"=NZ.^nYCcrmu1LRA<8)4C;H+c+OoR?m\_SeMBCiVHhkYY`Y@qQ
%H:#QM*sb`%&)t!6:64<A*)^9XHIt`odXt+'+9L"7bB5sDed#Lr8::Z"3V3PYF:`j<!FJElK&[o2.K".W:V+dQGIe5K:*kGpI:D;O
%2`[ZTIe+.6S:pm5UUgPF[)!%A_>dQ.0mkDKC,k.C3h:GCS.7MoCYXP$%idB:m+VVLD)bktcHDag5k8[5s4fmdBMDO[]/efS>"jjH
%>EKT95b_t5iRp'=QOo-8NGtf'Wi:kqpIq^AlE6BG^tuca=H"G;S2T,"i!+6abe\:>Qq(9>2f7$:PNUFrA(J;^6g/tR2NkK(pQO/e
%PIuO:3>Yf"7lH(R?$n%PX*-OJ*VB$T:=$q(FD=+M[kJ*]"Qt8$s,dscD_+PP!fDE7\Tk+n/u<L7Xf17*I7f\A]p%XoOL1r$G[Q[`
%8;R;e3Pag#:)ggRFu+ob_I`?RHS)u!.+*EgMC9,*hE_Q5TOn>6V\pOX00(A.g#hNjGtn!BFg72FD[Nb!]],<jD@_j6+j_K*n8l(h
%:OhTW7e$%4,0D0Tj+^S*U?j*Tg@u@>U;Zg,n+L^<BRt&s&-L^'j33JAl;5O!5[l$-,>sS5rZ)5<_t5:p!A^i!Ft97bjX[#hKqXq%
%%018&[D>4pI&(oY'1e:s:XZNhm`DYL/\kf>I[<X^M(CKL.n(ZQRJb[F\r.n6*dFGm9+ENhPZ.+-WH<IIAK$geZ=B:k*Q,]B%2K(g
%4=t>?[s,/PpQ:Eh<+a=mqb4fcQDtS5Z"?5:GM=[-:cYs&E%1cC,P*=M*Lfd.l/aolO'p4=S/TQX;&H@QIHpu>Fg(E*h(Wu(eaX0.
%XgoHuO"iN@?Ee8obk&Ok[1p/PIgDtYgn9nu@)RAsGMejj$p:sRSt?8LMTK1W7jAj.?/;hnX*C;L9W:K&;d\^B)%iGOA.RmQ-fb&B
%Mt]D^mKJ<.bG'>Lq#-5ho(eh+3iFNRQ4r4t`8uIDMNc^AYQ`4nei5oRU!;$aZk92&G3IG\Ub12_?$I3o-O;^T=7\Fk:m-aE<dVYW
%Z0D$D[^tUf4RN[<=N*Xta+JmSRi/,0\$'uDje05nm1ptd>l<HSiZYnU[+Ed_Z\EJf\):42*!XN3G`tX1[fG=700XhZ[,Dg_`fK#/
%ita'=p^4VWhu.=E'"<LBCV?^1aD]=qj%`d\4"q+=a=cNKje2WV98QkWV0Whh."ZfYF<"W2>G#8Y-/AC`m('M=c_'NhB7BrmdCmgH
%&g,mhI,alGSeb'/+pPk_4B[r2)N@NO]VM2K3Xj4\"<a>]f@c19"ItaL0<aQaG9&1Dh(TQ$IY-$q$pF)HqsY?$pQE5+.+`_%9a/!J
%YBX,O_II."St9_G:<R@G%P`<hgNZ6W=,RbJ;F\bMY#pVjq'+J25!l^I)sJD-eWS=6kHo;PeN6WIVNFnZ_G`E/F9p/p4Tci7&&Ar)
%OJh.aN#Eqf==;bG@V&muT#Bh+[\#Edml#b>(/Y*sW>_9ho4/%QWqYn2IjB&8%f5L^o`9Qo.KE$9V>CZjLo2T.U,!W1h._\I+EG`V
%'M@c*p]?d3K_8PjHTGn2'2IDgFN^VmfDR.]'\]J<9ZNX`H^JDhff/1Q/4h3@OVF&ENdiNUgdHa^mK"2>T-Ys2!9RK"-5e+\!*0J;
%+<Arp9LS!&W%d"AK&#hJgV2o0o"T'<k'/I&_ut9gSd&Ln+jShuSb5f"N1A.5M6BU(G$/"2FJ2BEZak"soE:`K[dW3[BZIP$og:(=
%b3Y$qd4gM,rS=0S_4)h[brALej```[9mN2^!1Pqq-W&1>G<@m@bp)N(8R+OaUesgE8dYVm39/A#\)e*7#8?"7bS$^:4,%ran3WSY
%1"]/EaGaCCXlI^QJDn#%W;o"Mi@JDhd\8Of&=?m!5KYPFiOh\3O:uGQ\FDuaSbIZnSC<b<R:%-5-744IqGA'=JdqoL`F'd]FNTEs
%cmiY'Sm^s2koq!#;i@P8Fc1&e+!C&bec(V,S*$!O'V%(MRm+^Y.Q+CU"5(kt_^(XT3_qH..0g8IP&<,f&%nma<hLi5S"dCqSSgCR
%3;$M9;RUY$W^N7k<Z<qpZqlddL$ifHUqQJCL%/8I(*!<9gu/mtoqegV16bfU"'2("Dc"$h0=j)EAp]7S#Ee5I/n>Z<g5uF<R9.d>
%NFpEEHqQ+iVCSJ3j:4i"CRfr9m;6$Nc6q8kca(IhJU:"V@.S2N:!9e`]::J1"#N)#YX#)lC)]m<geC@\8P[X>*+FR?k5or>S#jj1
%]EbOLLsa60@Ks72I,$gQE.UH1M"d6[!'W7AL*)0IWp!JT,1*u$&<k/=OWt,>)7"@3*]:[,&LoiarQS`S;F0?"h.A@T\uf?c4fPOX
%!\2K?r-ctAqu3*,e.3T!;gqN>=Rgchr,);HEBYr7^Pi%k]U#X?iV<u42g<(,'t8n++jB]WC"Z1[^OBA8WI4ZQ8R-ethia)P$^aT0
%?TtW64$R%ko?5Ed6a<MKR,cK)#3'db,C\mXe>G'b-g_X)TD*K^6ZuCso&l[bA_rJ0W(!$$bI[e%/LHfK<\:J[q?0`1_B3+tqC+de
%>V`EJk/<4)EpR.o"BrQC_oT8`#*'n=,I2/;2Bh9-CWk7Vg&NsT"\[I/>H"q@.E`s4]``'9O[`lfb9p'3NgDi8fWEXk+H(.p5RX<r
%j#Wr],bK&mG'o=Cl/>'1lJSB\`Zdmn%<Te$B1`G6R/O=.r2_fR$dsTp]B$_1\Is6<g([sg5J9U`qZcEs;F&5p"9]Kp"er\*9dAFB
%GkCEgnI3=OW+.65e[E8b<S7K;Udoj%.HMITCq`NVadK;M%#2*(_o!7*<P-Mf)2!mF^8]VLV1E<h[=$W#GWALHAL8U!0[itF?k;Y?
%/J3j=)g6T2>dE:/csdu:$TJK]mYa`:T-.^c_?5>Aq;IX[dliq6<iYl'G$=aP9lDX@X"-o;:q?G36q*R?4ErdPV";YA3,9_a)I=@L
%35_Qdi#I!IgY!8Dh>M.j1addjCT^?)ldOW+A'9-S9^O#Ta,?"UN:I8reV,Zd8eJBHTTPtnN1j"IT!8UM;@-.AUDtZqgLL?%FE*at
%G&R6\'731E!"RUHC&!`j\=7(H6&WjH?6&!/.(XSYm.mtZl;,esnSdXqm`;kQ!Q#d4rg@Ec_b5*akh//6i^SKQG(pT@OP)5A5aG:$
%I_8kq#M*U.eQDG6C5p4P-+g(]I+J%(7M`RRZdNd8e;bEl:6D1[]mJcQ5.4T.O`i8B2Z1IE%'D"!DnckV0ou"aeIg.^`_8[S_#55U
%>HAGf.a\j1EQ/43XWD!D0Q1"Vc>0WqWUoHY`2CecK"`2)rd7T>0&W%ta5^+((/]D$Qc,;H^>GO<"f[s0QiK:%E`V.o)7[`9rSsnL
%q2Q+TS.]-g?;Gp@?>+jC3I):NK/'-g=`#u&e=/!HCRPF!p2#u@eClWOmnuj%9FNAAEn;Ck/,f/mMZnQrcq8e^Pe3CJ!NN]XlMta!
%>FlWu:!M;S[!;r("ZXdA24Ag#7LMsJW`GkiM<c]9D-YWbUIEiX$;a'c)Jq\ijoDOj<Hcc]ZrQ:RO:k=8V5]Og(bR_,$s,,O<-q0[
%KPDo78>0mNQAe#R!oVV/nA23,dr(j_+Yb60(i+JK#E+WfpZ^hG8Xggr!#qH)A`l4H<5eAL@.A<Q4+@`GMRl$k!ReN7&KH!]j^ZqX
%`4EuPR$eO^iA^,kc1,skR/+Aa0B(Hdml#]Q%NloKeO69(9$\.P)SijeSdk0NnFS7E!\#bq?gFl0rre`5pKMTa==^G5YIJ,]O'b6[
%b9r>-fhjYS4p=;NP]t-T7U8<e9M59(B5lGkqo]Zk`_h/sEFeo<I=@_q,)EEYA6@m0QQIG"p^(+<nGQpMGSK)rp!0^W^=DptB3&(/
%\2+L_I^uefkkT:!Y?(cBWVW;jLu2Akb:?Zq"ET5O,h;AaVZOglK%JtKL=F6oDY6"sE"CKlP>_b@%:um!K#kj[PJXJKjr?85&P+S.
%'^";5#X;P=g=2f%ZhF\)?,d""&@_*jX\`b@rmq67K[I)l6'jE6@j?k0J>or=b$1ecNQ+N7m6P3S=\Sp9=!(Y8b18u&Mb'Z6ES\<N
%b)(>8-g3jMLq4.L(<<#toSoM\%.i\l"?;8bVU7.*\l>B(VZHGSkeTR@6Am/R,prgo'Mbpndg914o@*]/[;BhSkY]Zji*&tk8,N#]
%R`QHm3*o<Co`:q7XrBLFr%GP]s"C#c8LK<t5-"d8_/nC`XY`#_1/Ce*V<qo1Q$Ab&mFjM"5t]$9bsdU"mBhB0gVEbI:he)4\!gmc
%?U,r3iW^CK,3+'`hH2\(ZPQG$`L[0Bf7;h(pUieT&DQg4`5-i8`,oca^5Tiuf^n9r$Ma`mdIE&L<nL_b:R!HGJ/!T[rB:e4>5iUB
%I2\A*TAR[Pi90iCPD`tDf;V`oUkpqjFR:h)pAX7?haMT[NEQ@/&dj1L<e(o]j]6ZrrA6jHrjoHBc*^%6P%gSDong-5*\r7G*)2Bb
%FC(8[RNnf0hn7tu6`%!i9=gs+MCfM"*ju'O!`W,PbrX.B,A>UKcWfV,L?1CC/r8bXHXIefSE_pVdAu)s-6>;-D"@0nfKr-E7X%qN
%8g48HOH+ma2?;tjY898,]1+$P(GNf[,jSZ/G@jt3\J31$[@1DO^ehMFA,F_E8>_#i:n#Je4.0>p%2C`045KLs&UT2ZF@e*Z`X.XZ
%AP:(Qdi$uN$K]0H7D4tkK5W[bQ!JQ(h6BHaN27H3((kn(A&/)Z57CUD&1N$%*AcRD7Ngk-5W5c!&6V_7!+$Y+Oc,6Q**OB'YW3mO
%kV_dMaD4C<1r=7i,@(>oEUI#D8&Wro*ir6Eh$e8&kAg$tNYAn?)b_.#_nS@bgjm`JdN[!^74oK6C0Q^,MX9<$`<L,#6o[pj2Kkq(
%%-/r,)I-&XKET%!;U3rMdu'(RC_RkC1RlWY_3N1a5u=n/8B&!V03XB<HT^-CO[%\j.1u></q-4"[<6mNZLJk25Rc;5?W3M=Ika'2
%P'e1e\0*.^>XM'ANkh[:oHC(pXO2!<Y:u:>,"hCa@OFq^X)K>/E-jsi#IhL;LH!rL9(s*Yau@X<-I!D6)n:E:]),/&pCJ/u>:J9.
%0UDM8e#I0iZCpb_FfWJeArmXKn1_A;&TfWY<!Gt'&R5[^CM2OA"K.Q?S8A:0_Q)9UppO#O`tX2dG,9Nc0snJdJU3Xs;NoAV<3ZZN
%Y<6khJp7+h")#<85i[VZQ]%M8nY^Bnr!oaWFbJ0rn"=mN`f&dJGQoC;q-.Nf>VQmnpcR(00>+1]0d4l]4(_(6ZYscS"R!1J,W/A.
%p&geX\]d;T#=*R9`M'/2gM@/(S0nlW"nI1j%#6`c5uuYr"Is0+O9'm@K>:<V538NUVNB*4J/%Wjc3d0C7KYVj9Ft4-!Gj4#kf=/p
%n'HPkC6o=*^8VPH$P;6d!O<J.,P7IFOlWDPoOp%<Z*d\BVV>P;W`206a0C9bNOE6?XFNc!<[0o6jtRph?GjS\TAD3*f>t8.*Y\CU
%\^2D[9"."L"a7JD=$n62mF$.lUk/6'fPbW_,UUu=iZk[]=)siYF%2TYGAh,Q!oZ=II&A5(g;A1s/8ggQ22[_6M"k="JQG5<MGCeg
%nD7Tl\TJ2%l/b"2oi/.`m/`)j6j[BYLqm)LkR0q5G`6V%k"m4@j'!A@0GKmeW,ut8QWb!ig*Wt3b5e[:'V!b9Ad.[t=5\Ss*;4)h
%1=%&CP/_kQ6\4?Mb7!JFN=`:a>u'p#O1q)#.?Y4qq,LLu3/$0^*B+5t&:OjjDl%c[dhIJi>=dj[:_f;j%SG.)G8&4l9hO*.#$bQL
%T>EJ;!N*DT?XZW",@%a:n6:&IT.q=EH\[*&pMk01-cc%6]*p\c0;VfF"R$Upg7M([X[ntlnLH?mfl$f%?Q9ntB8KmHIBkYko4b\<
%^7=ruWs8cqKE^GA-815F^NZAt-u"jC_i(Y.CY7N-J'!L<n#pqsA]a3`\11]`.I?'s\UELV_7q>V17RSJTTqJ]_65H^!3`_cI^X`8
%?WS@%_HhG=bPS*-,>;gYq?R<Yfl;TNnDSV$h^"4s\_017#$8`;6O+@'h<1b%0n^V5c7bj0J7:8n/t(V;"G%K"i`O6;6MA2d#j9D>
%R>,dCp>Tp=:[h&%S@FcCc='"mRAiF>i;uS\I@\ca-(X;^M;'k,[0LC<(9anB3MPbF_V]6E\t>SrPp@siF*okc7J-K'mi0g$0-GU*
%]hSc-%=W]D'bNE<03UnD(#jTHe<7"TlpWkYeBu;eDE6<%GS4/0i&#`#n@f:b=#K1"7%`"E*>%*<H4E3<DmG+iSe&[]ANu^O:YW^@
%Q.t-OE4(^&Dl<%,&Rj_)4WITq[i'>_G%?YdjRrS9QL*S-K`d.JeJTF63Il7E^9m^$+Q]EpobQ7Uj1ZV0jThVRc@83u-LTiQ'VLqd
%KgG.2!luM84ldHg.?\keaEOt`S/6TC0jo!Hrl/r0a4&k;PF<PbW9oZ]4t_:\'Vl]Zcm;auVSYiBl'd^5@#%se,RVsd@;EN%@\77>
%\r^7:F'srQr!O<n_b7%qqNRG2'H-p-'A"29Pi[W6F-G.r(LgpjRNB@"%$hnBrFDK]3Z4D[@/;2-Gpj=-mW(lo7u1Igl?&PJOc\*.
%2ML:cERWiG\Ls$Y=QF<VOXd`FW<kqAc*SdoFiumQiNk!S\;Qn8[Pg&Tfm5qQD[<qph<@AI2dR75<3OAT)h<\cN*[IYN8^1j&:7gD
%M@\'=dN%Z=BV2%ff@gad,h8**c/*T<9-l5\BG%-``IH0=krYPdJu1jT?F(Bk"GMhAZW.]JWO-BWB(LF)qb,%<?c,pj#en8S$!Q(N
%)Nj=1ng-DEOY*ART:qKr/:QMPF67g?FIcUbAU%E_;4kt`"'A7h&(Z;[SZdU?ca,>_No1mcF?0W@]I[+($$t/B+D\3d@CQ:o`(-i*
%VQd\^OCPb3iQ[7="PRl$NR-Z/*u#H[_BZGJV09WYi-l28&R^3aBl==_)W;Hh$Xj,'Z6&IhQt^F"O1DF#Xc.41bk#j4'_tHRdN?nt
%,3Va-9HV7JFOPVV!h]19lgY,6PX>6fTQcI--9t>o9ca"*>iju\5NpUX_>!JE:,HNL_eh%NlmUo-`\![5W)HtCDC)pTp(n7dP@=IE
%4F7WK]6s(hjkA8'&g+&S^D^47fu%m_#PDm<$,j`k*0g%cc?)oP/:4rI\MjZ5!.'\ZYD@V98`^#MNXHgM`h:nG"Et:$S[8NKBFS*$
%E\%>_Eg->[MIm]RgVJ)<Ep9aW-2q>n>PJgc#RK([c[J(tpsW7j>OP&"N"#N/.&O)(USs[,G3;`]QIs=J?f'*VfA4=7V.:l;B>I@/
%Fa@Lad?RN)H^>ub4Y[G8PO"(1=#o^leW:YX;!g-'#!5HYDM5HG,;:^47q@Lg^!7!FU/Ufh!Fh>gYo&8`n[eICI]kmd1_ZtfMT9Ja
%%61i\AEP+H@'$Y_3s$u:4apmlP#!$i>,*5WPm%q/n"f0i)k\q\p'c@Mk_?8(J1/,)MVb,IUES2"47-rm#^'gN<q&pd<1lk_qYE^%
%X`^nE;_.&UG7-L1JQ/G1X@lE4[KGaib^R#(D&YSfN3A:l^Y3RGL&aTj[[A1273^IH*Pfi>hGH:5l]$8_3s[af73g6]VU*>LV5X!]
%V=nUJ3"$=<0W+XrjA'<c'/SoL0N<$DjJI8PdI(DrN^ticai>WO2&XqJ?ke.o+*Rfa:,.?oYj>L&JB@$DB1etsUn.ALaI`J)L11Qh
%?Gl.9S>,$!G)e`!$Vo4!?Z)=6l*i_sFb)+W#p)"dZJ@CtmDfJY&dcr5TeKgoZ.'I](8QID_2r3$>p!Y8fnJKQU:'EdW`dV&7p%Rm
%FVYj6UI*_.]<A4akqBY5N6"Ac'sJ&kf5EF?<t@;\Y71]u\Q#2@qX]/;@j;Cfm,AS&[;*GaCa%Gd$A%OR%[AHBYEI%%#0Q=m@HTM3
%"F^%:_L10+r>+(VPSpB'77tf+NN%UmFV?EJWg@TG7g22[rIU%6GD\mO`W[q/Hu>N1>5ZRHlbn(YOc^F6Or@AcGtXoW:5E;kjb[oq
%)X>fK>n8Dk'K2^,$H^GZ+D#*<3\j=VUV,6(N;jGhV?!A@hB`X;]$g4JU']V9IW)([\2KL?pj+r83CCn)GgtkG.Y+X84_J/%;O!L(
%lRA':$JX<Qcf[iq%\QIm%L\?e/NDk2H_T^Ubg:_U(6'L$;\rp6MH%p6]+CKrP5HA=RLV<L+s5*cnpSW+O44(&8!8VoF%^&0'ec:*
%\(+edbot@ZV_ema#5Y]07ci@5]3(VsmgJ(RZ:Rl$PE5+Ygo)\-mNiDu=r+m7!]q]TJ<j.CK&/m'*`Om`ADkaK64AA_V-#u`)370m
%-`qF*^?P'e0qn1;ZIlsK96P0^CJ@AJJmM=W_f2t&X4=U??lN!=!MDq=6AQHD4k4ugn`gTVAF7e#-u!aURT0!jm8>D9]1@cb9;Km_
%g4nW>T=ka_Y\%/T?sME&ePMnCO0*[q"Mu<?dGY:QgYI7BTHKJfXP?@5#@&-9rNo;Nkb[K7]#MpjNJO$d<GP".r7&+WmL?UuJZ65A
%2'Uoh)Ke/74AL28gsC`",IYeVIfQngnt\%7%]JGjG#8[`hHXkVl!Q)cAq+=+Qd-_i+O.`mWr<8sNGdTP)`>*1m(s-Dm\aU^g(D,K
%`0JnSchFoD<Y_::5EA9c!/D;B;Wfb]!mZG^GWG/egsJ.tV*h?D/N\&:;(P^1NPEpk$nEh:TP+1-<Ybmm(GVLm;6VtR<Ik[A/\taJ
%or`n65,T%cM9Tff6W0"`"gpFr.l4=n-/Ff&U&l+'X4!ZG6]$TN_)R'NX_J%5<a3q[UVQ6'_sk[$&\DJVd:LpB@mr%:O(3qb1;G=)
%0i9PF+mN7Cb)^'j/uLQ^_(G8!oT5hAjgIUUoi2OuAluAO\Ck?T!HZ`.g:r**2=)NqOG`K&Yp/.(/O.dX_t%uRMCVE9Rob\=6<=&*
%ks1UaNMggXIs<B^_A^">&`oNX.]-^.MG2n[PMY:s[mTQB4La1l20+urnoBuhTt_;1loH2<D%kWVk(0urJ]m0"ma2!',\V_aXJ8<G
%*mPW+<gp"R^q$5E\INBJ0DdFccKZjTCP&<L5+((6]gL8(F9DNkgf]\;Z1C$t',7h/'F.4BIF%G3":o\a_+RRh13a)5XQpK9:=+t`
%J/"<GP@8=bd*s[?m.Q7:W;!k*k5@M0)A8BJ>80pW,9<DbQFdlW!*>J+cOcV[;n.0C26UfnC,`XaD1ZNC9m*YdP4Hib/*J/--Z1+E
%)Kg]a^C^YCM?FjY/[gKo!-dBNA8;q37Yc_`gha2Kd@P=\+?23!O4W<L<*V\\+A;TJFi\)V?Y&e7"R:;dM#+5aQ[5+C3c,P2&KNFZ
%^`9SBJ=DD]n=s3."$rfL%!.Kc>B55I<-#fY`/_/^n>7F-7Y;I(^g__g^b72:"BF<5i24A]$ZnlHYu;!B!B_k0mWA''@<mMdZV1)`
%GJ5!.n*Y*JF>!XCmaUQ79Rs%.\,SpGT6]$Kg;Cd$.l!HuFOhL6iO6U-9cD+YSHl$-_S3X+m?2rT?=Q$;")<Gicms1`54H?^Gq6Ib
%nJ5jVd2#a=nB"V9ZaeUc$&5Rk[JV`6c,C7N5$t.e7KM7UoK2hch^8aOmsRJ2NLq.\<GSlnS'>dq*'7)/0'g'%IGOA+)_bf<f['h6
%-B\BsV"Jp'lr&ToJ3K6gZ<#obH1+@-`RanPJM/lqs*2LGr.9L3f8b-+(YkJ&'NlfdGIq?\/@lV7"l_K[*[X`GCk/4L=0s.B<8i*<
%JX2!R)(7fXI<U?D=AK>Z$JgYqaV"AdZ+>,gXEcn4Am31hg[U0jM2StHm\[^ZYT]Kf!-AeZE+`;[;6_,\pW/2tHja=uhXXY,Z3'VC
%+ImK'2H7b0>!(V35Si='-^&b1XGS!i;a.)c-im#`V$<^UW+&!bejq,R8C6VS#_Flr6SsBbOJ<Y>YB&grfEXFb[3CHkDiu-PpCTO)
%.3V\niLSYj%cSJD@TmEl3NKS+bg&^X\_V7X-r'm^EA.nI<Knc:>63,C`PC=%#tA9U\uYWZ;.0bbkGPPY7XtkLo?5*$q&Au1XJ)0L
%+MYi&DGO+sL$a,B)VR>e.'1klh-WKW'mYeO?3W]AZ:7]jh-3#jcf[6=bkj!^..,-6]LL*DNMKGYYdcTbbpSLt^\(e]PA/8K&s9T/
%\:aSg3:K71P<dRs2&].TiK:7,.X]AR_),"9!JW]^7;M[=TP84"?,9gME;ZeY"'TY@)74utiiU00fi-hB`'u#e)5+GN\T9M;m_;-O
%N5Y<*ap>]D:icd'D^HE7#["Y)@'0VAd)5QI%;G"_pLqs2?!$h<LdREc(R!;0"1Y]>@Xj>H!DM@Le[mD6-qULr`^_]A$7-!7r.5tn
%Td8TZ0P<KMoE>a@k;#4hKp'B'$4?q,IO"&Xg[oBIqJ!^$Z0=.fE8Mg+ZaukaT@KR,kalKYJ?sZ$GQ^.12ZsCA1o:8-G_"Na!1Shl
%T>h1WQQMSmrZp^e=4@lDCkNpU$#4$*F0:"K\I]dc!05Gh^rEVCo?*hJ#4YjOr0%ircq>rR5)*94f#Q"YB7C+E1DcTr67u[07^4#8
%"OW>X3r\m1S3$kOO#J,E7UTh]+Ig*gf?\\gh8O!l)rk^5rrb6(#SlH4Jj@,bXJlq!,RR.aS'rQb9Wo"d.]gqhRFl:sXr$O,T^/[H
%P),e\J52d/IM'/F&me*a;uKr0(8]rhaZ6ZN/B%FmeRUBPLkC\]9:a+:NAS-^ZgGM?Ri\_;046Y4-T;PphU*%9C.ha>Slh6p^.,VV
%5Uab%fI/\N%ddPD>U5S\^>6bng6QXe!P5<gc<1"0\(F<176UA0;]H#]HVcH+,cu:u\3aN+6#hX(KEGbpADp(L3Osl0cVOrf`#eNj
%&]q*/Oq8P>VaYF(qc!cT`rr,h.EE1NR(0si"R'T0+@j!g+O8hU=YDF:X=.(lh)d::"1ZR#332j)#r>AI?tjhA+2(g-ShET&U+rc#
%>E_aq"6Qpu.epd%Qj3N.P1jPG,V55;^(a#Qg0$?LeAo'NX5crVP`\)cb75KG\X>36/J2uP)`XKkHZ\OS_=TUFIqW-(7UA*tH?l74
%aS,"oRUV#@q;-KF_TM?S,2QV,[gl[NX6cj,kMFJ4BO8/beaWc0G-%*V"W`u!*,O:@-h):aX903`C^NlQaH@_)<YgEADg)Mo4Vd_/
%ML+"bT;!p1FOE3_\alB*4!R,f<q0lFS%$0uB.^aQ&uS/U),PplUpR*ikIo"^4)8o&75s<AHPeqgiUCmbBYH3VL`Cde(U!IkS=coc
%nTo</_+,$T!+Y?-gLO^ekh(Xs-<%rX(*g_5)BK,UWaBh&an&#)as_,&De.X-jB6$nJ-TZ0?,WA%AZRV1brEY=J`7`]7NSV=T&=X@
%XEcN]H5C'#@&5E$^#53_'EDpk<S5\YXjY!K(>;>YKX]r5+s8ordb>gp!K<an=aMS:^u?Gf]\+1f!aGY!M2`>gPAkqf=8lFmk#944
%+#f-/N!539MkXn;b+k<D<cOd%BVFFE0/Rt(UG0hZ*)WcQYQ.8t8od'[jr40YE,M8jZP)nY'Ji61(bB[q-"g.XpAh@lbrg\+CV=Kj
%S(1F.o^`&l<ADUnq%V[V'e3W#Y2]qsU.3XCltIh^ZXs;7%JJ7p=iWifXU)Ml.GZ7cO`"2hTG4=p+&VFBjR[Z>U[]7lJ3C[lMqUZ,
%h#"atJ8S4(i5#bLgdAOdGm&a6S@-n<O+=AAQI5t4A`5S:dI_Me*nE?\8A2"7]UZf#NNe[YHTU5)!'U"4`&ufId&IB]Go,3:lD.JI
%`tUr'GO<p$%&S1S%SHnaU9iK(+=FA(/:1sK^2R_\'6d6\Zaq/jPa/Q1(SU%_h#.u=BZ)f&@+3_XB0>-`Z$-IS;>83qULMSrEc#el
%n%>-.c]Xj.1R3UTM&,C\*G"]XYbq#m7u2TnDEVD*4_uI_)_n<>$8Co`Lf2i@9"!<2ZA"TpPOJm_ocU&d^B;iJ3Z[kVb?X*#iZ;Ye
%\DKHnGVQYfff0>C2qR`r$/DLCADiHQ*apU<WTAkpDthZ;#mWi)RpJ.l#tEqVoqg6e<pg3aMR;ubM?i`T/_icFQoS;%Q-)[L><&s]
%dV<mZ#rZSp"A(+*fD=lN2lfmYkadC%5+4c1ZTl-j>/*9GU?'"dGduMj&&4_4<WJmBKdkl-g&Sf&?V,#'")rMXH'S1jd!7ed[`l1N
%@Lo`\(@QuCo?TG#:m0akL1UiUDNt60h8*+s"N/>AB)pXFb4cp(-fY.)Pgm3j0NEJ54nV2^ZIkHe$U)ml%Y6FYhfNrA$jiNCAHM9L
%^S*%/OMbu3W@&&"8uk`R;%,-qisnB&7ZjPG'GPC0Q*s35i28_C'F;:CBES.\pd$&O>+rScUU0#u`U)\`JIl>njroE`kTSR@!&FnZ
%a2KjG`J'su78hN[k8o5L'oh*&4WB!I'g:<RU+HL:.rn+FR5b@=/%^5=LS-%LcgHIZBLOi&\1OVO..Fk6a:=)uJpA>fU:eiXSl8IM
%\=4$^-qa!S5tXuG!?Qier&LrBE'_nC*^[@&]SEi1p:Q.l'Kppu"@Z\5&/9QN/h$Q5eceJapM^Cq5&T!V7?=nsJthFp3!Db@g![]s
%US9/&90S'(-p\50T?;6qGt6<h.>g<<c4rcT^eb_.nP`<W"fJ*Yq.m,]HJ[=hj;^r-MP:5:jQ_VskBAm#7F*t,MPB8aG=BpNo:1]4
%kI5P%d?br=U?D\A'La,=Td]cI1KWmegmK7<kFEWNU5qBW7FB/SXsaX=<f\9@XsaY4q+%,,9!Ge&U?D\A'Lbgq<"sc=LSEu7O2N2d
%DH>j8MP:hR]3S\E_^.b;>/:RR8^ZjAmcoa%$*A3F?Oo_*i5J:PXr^bJ=&4BKd.sc@UaY^P6D9_6@Oo+<)3q!G^hQ$j:P*b$$b$jU
%Cb`<48<3d&/@2@6)=Ej\DLWa"7VA`&p0NZQPVbf0qVH1KMH6r\/`[V?U&ZX`o609-d(R])8IeTpi4]Oc<4&g?U;fSi:Zr?)-+p![
%O$lD;HI6ScME\gC<:kaRW9==WnQ\"tMMf.+&f#fqm8uEc6WE[]c[H89fKrOO@,tu2;,Q8LQEu"H*;-fo.S@nk=m+ALnt@CIV).:q
%\Z4j$(oj;@r(n,VgmM6]]ms&sI2O/,7>X*5crELV0.0NXo.;#`U+[`^<V5g&Xt'8LL8sHoLT9PG-rnY20N:Ke-Os/(o)lP'kkTd)
%<RKh/Krc]+ok#"HKh]nqKSQWWi*sWdO;4m*g:R!hbDKW7lLbGMMl^U2(?96<>ZS3U7;W'agBPWkbn6QU:!Yk;C)Kcp$%T`oKWHRe
%DruGiM?4kW/s]fG^hu94O9>_hT/*+OKbEZmVlXQc?J*p%AW.<e:<8;n\AuRZKTHps_@dG(QD-`tfl(O@4nBIm;<$HPk&IY+lA)J)
%/"#<3QAY"cl7FMiiF23RPSFAcEcJ"Y-ua,%'=+>8/Tqu:U6RmQFUNu+-uOScAAU4!+bQ(*Y@4C]n7+TlF3'5>k22s(OCUfM*PCoL
%aACfQN>MCeIGkdO\PGMO$AQMOOs*g9JDPo5oKOhkSg#$f@NetVo?N+g=Ti,G=kpp_+EsB^U;3OBaWW0lFgt'um%pPqPAs*:&I3)>
%k"[@ib+9cg]Nj5\b'H-iEbe&jf15[S9pWQ-SN/9d:\9bKOK9i]Vt?]*qJI)!RdGc>WR]o<^Z*O[IGuq^I<=_geD8HpSl%nkM)@BV
%Pa-e%gb%7qZ8-BmRu)+@O*<SGkGs+LT3`gE!P4@`B]FIn_X[F7"C^Q<E3:rJeR&_l(6o1HX+gVLa-f6M`VKU;D$@PU-uTb2`YMhq
%e<.)F]3mNr[fGh6\m<^\Za!N\oO9J.Sd;p-C4s5@=*B`&5(*Qp(C_Ur!\>qY"S-[@\oBp8gT?Nu8dMI<:LVHW`"FLhalg(Fjm4N/
%4A%EgicP0)<k"d3HM;T!m:[AF(!XCH\jI_lC8)Yf<dQh;9@Tu](@*nh.pM);;>+_84/&gkXd2o:'A:kC99HM?l#Y*J]5OFB228l]
%9ec,Ilgit0"0>O?EqV#$gqW\a(\I:g*mK\VL)hGNEr%#_oLMFkpX&=d%82Y\<bc_jYl'L[*oZMGc_f]"J=]4=]tjn6MO/ITPJU+`
%B@%3[jnV4?:ACM7(%U]-GgqJ:8F$Gfd-<a4rYc+oB%2T.3u4IomdE`!Aeeo0Sd"0+JUFrB2B>YHhYdp@1P?,A\lL[ts2-ZSLjNKm
%Xaij`nG?.KGLM6JkY)SYP8:&?SE''P+VUA%6jOO&IfUc`s+60=:!bCt4oYQ0("%#u0B;p000,?'XU=^`GU?W)W)G2!s#:WVZl8UW
%;ckGFS;KtqO;Oi-V\a;2>@G@+Ii9\f+Hj'h5,0&6?n*iZF3Y9^No#g0;lQ/X>#Yf:dR=D,Uj`K;TiQi+!N,<.q(AB7T$8i/M%XIc
%!K=s!\]mY&OZb-k#Ueg^ha?[Q`11#lTmnZ.'Z'*K4%jN=f8$/&qCBYU&0j.EICZY+Z.kMA;l3h.E24W'8#8#-[?i@PH82"Abp'*V
%-9q"TC;;(!^[HKFJJ&lBqHlm+!MIE%IDaY=N*Fpo%K]g$m1imO>'ga`@rgJY\nma!kl_)F$UL3k3Wr'^W<jm*``Atc<u9%/0!IgG
%n]N7E\LjEqH%%!Q:mQF\[GH3RdUE3cBs=/FTf@hU%a&M;(@E%MJLWoL:Fn`Xhee&1Zd^Pmn@7-D7*gXmRI"k.-/:Y8W`QOD/5^WE
%`^Y-h(Dqe<)BlZ&X;?lcdl>5jC/u8-Y&;!0EoN'H/$$Kiht.2M,eIV6BDjpu@=pk\_WRU#[%WKDjIV5XlS4<oibj@i[`L<NKMuqo
%_`CnJh2bIc-pXL:,Y]nP&43\\Om\otn22[F9%-r.g#(`>npiU4`X@klD)$3t<_!e.fkU60#"_Jq12r(S3=Ku%^89X)%79]D7M4:T
%:?M4/'DJ[/[G2gmU/M4m6q&F.2UE![FaaM0m"KedQN+=%s-BID\e;Gd-U=rkpoo2&.r_%&X?1r6'Y&Is!d&:S:l`G5iNh8u`rp("
%n^\tRUrUT/?k@U<3.eg)`2W),gc7eOe&u>Z(^DiHoDk1]#&94RkX]pN*.M!I6[$``V:cn;]+\o8rGWc#Rjs:8^c&YLkg]AA@+6$j
%Dm!IE!in!sTZ;&\C$,#RX>L41L0bt>6f0qA,&G1o._l<i9K":B(3'Nd_8JDhZO%LOL0"CV>G</@dE?]aW[8(VNtCR8VM53NN8>'J
%e.SAW6.N8_Z-T3(!Ndn^/n^o"6UC9;gs\$;U8V"O@XG2=igrBk%WgK^)=20E/po<D4GfldC4$Q+^!_7/$O=A-)Vi&[#[4oQ!5a:u
%cd5Kb<Fhr2UUH;&Dpd8#ea\5QZfC`H*U."&a!#QQP_"20k"bH!Q"0d']s+-%'j(9*e/_Z<nEm(TcqgEgW'DsnI"?35s%efKrdNZq
%L=m2-E;ljPD2/`+5\Jl_CkI+02!IRqC$;<)gfDPAMB3]0mB.S6WkSFR\).oHL.N`>_fq-70dRq00"CH#I3_m9Zc+l3?0m92i#%(C
%ol0dWqE>CUgJ3Kb$[@3TP2MB5N&Kmn#QHf;$Ri[+i.Y<fhKkUYVRthrs5qQk!:/#D\#*/_gYPDf*PN<)_X^aM6cY0Jlt.C@hD@hj
%;DgNf1e_)dqu3.LUqj[n*"7Iq&ak*u&(#UMcOm$"1S-fiU[eF.F5;g,j<tZb(phm^e57]IR30o`k<j3JppW8n'3J)Y9=5[4O/Cn7
%D8a/]&S[K/B"AVI[\a/I4tVu+7a4`MFZ/ZCe#+E>GOK/37=XG7lh?^`WE)-b]uC0rYig5j5[n)@Bb-OdeRmo:oF\^k<qgTbUu/nU
%h&[aj6SeNq%\jBMgL:9WPODbAi-.5G`nBIu2adb+S!!,639\)3X63s`lH?9H3^O\%7qa&mr?)f>&s\JjYL%PAU/]?/$sg^3iI9aN
%GM<rEs31l)EZmUD^RZeW/$=Y6aR[r-pn3u_8?"_1]AOO@J?3te;sqG:Mi3#_4!FFlK3b#nmbtks($Vos9)\D`?5l]-1N(#\e;tm6
%>?EmFbtNi^I22'5O-Hr*=^VbEn.G>o\beJ'CUL*a`ig%TCYSC7%lWn'p,mcZn^p8O-b\ii](9=#VErd,MYd"m2FL`1;SrK%ioMR^
%UEaSK30Xi@T.iV7X=^%cm![_WX._/<N-E6ca>I@"HE":+Z=koZ@M)g"YM'_3<+$r5CAZ-sPa-VGZ,"M'ZT5l?d*#3.mp+Y5p)9%N
%Bq>,3Pg-7C5W#o#k["KR<jHQr,bJ?gQb2I+3Y/s:3mA=CEnPZGA^ZJN\%.WJ:<#;"^;3m#?IXGgH,hMZJsINp$"Q(g+LPZBD1q:O
%+;tmViYgi?E0_pJg:04\f,J5o#WI$lo=q)+dTC4]SNM.'3'Ehoin>0?ISfLt?6f^0AFQtoCj$0nI4*G4*k@BIKi1;7iO?T!\,U(<
%n/$TM_f,R8f_0goB.2R5ofqH9s8DdY9V0EEruo3V`q4t&lmUHlM5X]!Q\!)2>e+GPrh6$!#.4`g)*!*?m>okiB1RgC'J#u'?*j'f
%(E=?c-ssJr0_A'FD5c)llQq+=,EFND]Fj^r,gLX>N:pq[4NG)hs*anF%9&`!NkdY%9IhI\cPphb"2qmmV<9YRT\k(s8l#=\s6!bf
%oq-^3pHO0,qXYg/nDg/?^E7nllkT;R++O:7DuRZCJ,f+)rmOYmq86S<c*)Wnq%%uT"4<1%s.>q_jr]'Ma.IhPS,`9D++Et]TDnJt
%rV4QYdJs.#JM&ahlV[ZH^\m`amsd;%rloB<J,7'd5Q0iUp;cF0fDLt"rq[jor9HTFrU574ZWI.hT7?\JJ,%iFh.:I?4oN.nli6Xm
%2<NfoqW"2s4\*a]r71iDa$5"jmIu,.r4i9hTE"/cl9G7+f9_EpdiX&<p#dEHs*st<O2(S@O+6rT0#bQo0>4+[ps[Q=rt#,m(]N7:
%^\d[Gm(35YbGY3_5Q9of?iK:sps0H1s1Z6Ss-`nNkfU[&;S='6jt*eB&XXb6r!O#9/)]3606"G2Fk`Il,%@Dt"cS.VT,_6@a\1A(
%V^?",Ta"XH-kY`2q6g9/g5WW,em?@RlGmuOWg[g%RR7dKpKG&^_N)PUT?S(`3^i(O]1iKf0GYs>+LpjH+:0[f2oI;;)YaIOdnP*s
%U`Xt%^f"C?(MD8,!h>&Q?XWS2`_K5i<N9=a-u`<6B2Mj*WcO^JFPHo6hRTlPJ^]Y8BA+@K\8"foPf9*&e=mYDa"H-3!iHjX?L'He
%R1Q!#l4L+@6D+g0JCIF-W+)?YNpS04,$aC0%KSVd\cqM2(_\_:Co^Ghra&PHi1-(Y40WZ&\-'*L[6>Li431"TU$&U6$eA[h/7Mf\
%IDF?AI?'`goq+1)V3i/'f\IaIG!CSl=bIoQ^DHnY9W]m@"/l2G]7m!GX?]@,!b<m5#1-fZkU^r:dpWH&?[n$[at$"=b\nZo6#D.5
%Y:tl-*^=g"IP:nr2g34YT2.0U[FW<3M@#C:m)N`m^#/RNq12psMm)GbI&b9^q0AhsH!f^S<+XY(YL*`,_&*Q0J!hBObs+BuD[^`p
%np4eMm`>">[aa$Fgt5X3qCsN>q8*FaBYeS:N)ohX=kjKHKAQf'J/-.cc`c9PpWO#T.O"TWMKapII)1T*KEP"4Td,'p-L(cSC![HD
%*Ko_3DUl\@anNQcBWhf*;76jKarq&_^^+p00`^+ZYpJ%%f)5`0,iiD;h*Y0GX8SR5lDX"Qa=aIqNE$#kNi!=pU)SK9VU&LV<[50`
%h%bN/9eYK`kTS+I73MlVisS;_.NZKcA.*^7b0(@_^@)ihM'7h6)*uG*!V@[F4E=1.Tm>H\p<3qa?WgN78:=kQ&3[i^`r)`o@*s>F
%*f<o(e;<'3GbQX-K3<VW@K;1MI(^me`5@"T/W+UUEJ>696&N*5_&BG2?Z?A5l%)9'!QOaI6#4fcXg<iZ.U8hZpXukN@S$T@URoS6
%DY"P#fXnI[\;1rNMoUlU]&sgpA(USf*)C&+ID"E>;KpksYd?(0Q6IBO(X`-tV02QX3QL*+^I<soVL;5q)^'"g<?Ao/'>KM""XLeY
%oB"@B6OPNg/*L4+!?*'<p%'Gm7t5n-==ki7i<ITM?U%>TC9JdWM)q"p4RN>%M@.^51rQNl"Y;F[rEWh%&//k=;A'7IgD*TmSQi24
%CL)-C#q<N3J]l$b&+^Hc/`k#e'k7L,>@:MS[n:Ka!"8[jZ7ZqO4P`VK\?ubdVNG><78jl923gSLNtE?E[s>Ld&+B_G3Jt>Y@Sc/(
%->G)ne3\baTFXPC9'7,fJQ#ZHTNI<ZAWr7KTBcf4g'H8ercrLPiJc--H3Ke;2-kIsWcm;/4qY0i1%91iZTr_)!@de2Z(!Pt>*cu1
%;@4@pL6Qd;A?CS@%H`/CQnQ-0,UnO$eM[HhCutU3]DWcSYCoXEY;$=2H2H4X=`ZB\FBjDu@LfWFDIsekc)#I?+,4!T"la[Xb[!$E
%5fem_4HFghX+M_DdQ>A2+[N$W?XaG$E+mtndun1Doq+c[4(-qbXh.*]3YGM@"cEaB#3\O,;&%?7Rjr(\/D;hj1V3Z/^/&sLlG-s=
%mGc$HRnD&eli^7,1Ldkm=l=TeA9XZt4)S<H-]ZnV#t#9]SF!3<]Y>KYCBSL"'D*SmlbPL2TTq>3jnWe<r:r*EfrsObkJb]X/FqD;
%[!jC$nbM*tQOWJ22b]+]2SU)H;0<^,KaHItP1,p%9(*jp'cQ^RE\`Rc6E4A""#,Es)?Vsf?&T+Mn7_lkckn=5<_ZeY,7j[^+Wli>
%XYna?P1/NPNThR^#!VE'I!6iuJ`c:T^4[$G%ssOI+08.KG!f6UP?0SVje+t(>k2ih&^F:!SXp=+K]3]A^c@P(RmN9i06h]hdkUWT
%*\mjK,=\_<1O<MEfKOh_)<1W:juL!`V(fHXc:,)].d:qg)PK1)kcjp2I`P7<-*Q5.X6i^$9]D5>$!.b3gne'donSSod)n\INlNWP
%H9iNlJtNEuo"I0PE:c>.iM'!K^,86;QkR2=k))Eh9@#dQneT/+lK+Y0"&)64QL+2g0gpb@q[X53%K(?)ib^mMZd8<hSW3slJS;cU
%HO&\O6FTtc+BUj-N;p6c%\*nm@%#hO+F3V]eWZ$=`Q\&^DW*kXE&(aPMa]>=K',3BBN]_5/@"dY9Xb+KOoYo/g")8@U3hJLVU?,R
%fl&jcUpT;8G^Ji`%c8A;oAT..Z7HD,X?N70'.TN_jY*9B:I"BKZG9P']hk;nKjihF7t:[@H#J^UZ$;n6)2o([)0c)QhU%a19tseX
%=.%6(&V8usV&%;e??&&Kk8abD@OXEGE2j9"]Y8W6d7Yu2c>X\67J2SBG`c]nAKX8Y`kT-8V<(dMZ#VInn[-29$<k#l//kpm)-.Tp
%i[pp@R0qqfLuCb`7UQkfa)SX6<q&4U;;A$sLH)1^G!=<"Lri4pbnZ*B<f[otmOBO$6(d.CT2jEkhSO5[]`@^:0sLiDqh5';+r,+U
%dtQ&\i.m/d8&<<DHF(L%]?e"99]2>k<BUo(%ir'@XlDpG<("6$%cT"f]Q"n+Wf&SX;K=;I!7g5q0nM=G35Dk'PZp.gJjhPJb]?G^
%FS;stP%]aAcaRk<9dn@E6O%aej-H>q0F@7)hYWPR(:\i)O00LU1e$[<gj6e\a:214gY6C90_S-L#$i]8hk-Rl@6OoE&IgsRXE]AQ
%o<sO??(]GtAke^UcY$JJ]JUW2AX@G/R'<"6PL^H6>n/gRhX>(5/@AI[hNaTshlUcT*"aj&>@bpYQrifq/'7(+i8V'OJ7+3sM&]Q#
%EYc,t%%6qK[r'IBjhb]XZ9>m"1=&@=Wqc]uXdVqn\C\O`rPB8LdkA-sI.]Q1@s4uhL#gPk&\8]G,1tXA:??ihBmJ:.q?afP;_q./
%DQP<&"A#i\onemN(_0B+jG9cPraD#2==`PWe_=+*Um1@iU+^@o>+@bBp9`>UquVX4$O$gT-XsuWNVi4ep/'JhnEg<[dn%K`3,eM0
%@eV\@`Vqa>_cu8Jmnb$:e8.obgf=^bOHCjH*m>R55gYhDr+=?UC^h?V;qV5CB1`Q0>,7?m,GN_JI5?%K>'brF]ZCpUnBIe618qce
%NpWS-LqfC*EGa;P#.SOC*DGYfii6qk$G$W'T^O)U=#"Zd+D'h**.pYKE.W*uXsmtG]?c#tc71uaVirL6&JUf+F."aH9N#r<En-Ht
%P;gJ,D5A6"Co3EsAHYBj9D+\U_\Ia@Op]Qm(Kr-7D-H,+#nrI"Gmd_jC#frZ(-/4>qo7!n"gW*E&">U,T<6T"S@@:7UC!N`KgrCO
%%0TC>*[%kE+7<LEI^$(C8VR7*WKl33`7T[H$DDUQMZ+ZPNWQs!GNt9Ke-]I*"V@&/Ph#d:CP8hS=>irK,it7loZU_jE$sD;h(Jq!
%Ed:XaE+?$'JDPl(8P:VNj7Fa_iq]qliFa+"'\cBLGSL93WJjT.UO@9+0"`hZ!.>G=)ls#])#:TCN=8--1Ad=6at`<&2PkaYcSe6E
%hW9:jZtA3XD%*<QClTfG+5L<G[QiplZYk*n=PBOh'9$\\#ZGNb6(9G'f2ht,g8kM!#oYCXTQ7e\l'CUXE45X#Lj2^X%7ALA-iUma
%`O?7,/@@M\pkOQ2;@+`#a#I=<9CU$6Xc?9Jj3n4:SsI;b25AbK60JQs&-0PDa")?pX=RoHPP&D$@Y1\O1/M,)]pt9^E5_WZf'esp
%d[NY85g0dtW-fs8p\rZ`?kH@BSiWc,reob%5TuY@]ZAK8[n*us,10pjg\O=AL18[^0/s>*5@/@,[N]Coq@Xug@GEY(0l1)kl'o^K
%GgMW_mY=arkn&Fn51Wm1DcLJ8!KmpDUEifC!be=9!$u!L8emC@;LD@E/D%LHAsOou<625No"-?-ZZg3RT$c^%V@f\?SV?[N;]3EW
%q\iLu:S)s>,lNgi`Rj&-6GdI9Wa)4k#Tutg7Ck\5_.%a;MgPBCn5_LO/\DQi%>_!HDfcV&]oB`m4>Q(8m364DVuUOEYj.$=T`q`i
%V=(&4gTZhu.U1']&LM(?P;O^sABnuPJWCk?ri&!#$K8YRnO\=Ea;s52l)g!1J$1bICq[DMKHbD0=#D>'r<,+^'W:9AU;.!XBR5'r
%F/fjOTASfp0Ne,ZSZ;9M?1SG+HjdUI_I%7F"i/[3o-r=aiIP]nEA,HLL<5-nPmoptkU43aDln9s`q'9IfUC&TAdmT!CN+5pP*`Mj
%RasH2P=?s,e.XQ[K'#$9(seZ7KVgA6l^C#!r]X:u(skbmMdU;E#NbK)JPdDE28tM*h[X+I@_Tl$KL2nu58\pIUdN9\]Y)ZZ.0;2%
%&[jj-blL'CP@dWL2Zn,]D9-3Y(I%6eE\gu=J6!tS%FV*pfO8A*41WF&W,;f>CKM(Npb@OVLti)?l1qWn/?_P,?>e$JKFO(F*iH<N
%jAM"]<H3?M4Z)g62tKZ=;f:koAG-n-0MHj=D\^jSkm"p2=rtCXh't[N,\3Bh(KapgJDo-=N,0"'T<g_Y:47_c$39`FF">K]+ujI%
%qZsnX_Z32SO.]'e_c18.;5!"P5b9FXT>F5h!5g0!A@o"V-3RBXMTgm/Q!,Nb8M3\)&N%<_\<Mr35-IXWLCSPGO"0P,gNt0!VorhS
%FDIiUUil,NbT9I,m*B'.lf$O__6O:iU*PPuVFMmubtHAAT&N.*@<B]/mdRrtkD'2JQJrU8N(ojALqP(IKVGVjDrQ=!.qdhR8Ij2`
%-^JTO856tL"FY>[TY&aAN2@]<n.?X<Ju1+0OMXp!4bMk4Dngo1N#B%fYo:so]/*:js3Fq90N:sAWRTG4q+]hNs1b^Tl-X'6P1kuH
%s5@j!K#L%GaGe2B63.]s8[&1L44L9E%7p+"l5>0JpQV/Z=a4I_G($LYjHn0uGB7isCW.B:6Rj7]`>;[&CT8`l+7W(G!\^*'(4boX
%Wu<E'<i0M_Y$u_)fT2,-i9AOk!1ua_oQK7Q(u%q!BuO/TY41`_=s%D('!FC6c8)NTRHb"uYIWU/n:qGsgc/75!#RAFJJ9nMl\X7'
%m'P"_1+`9ZT[&)@[-_JQ^^,75EH,h3I0kGA9G76`;*XRK[#.AoRf=-"D[aLJJ-"U,$s!%1ib3c-`@$?$@Y52]05&hm]BJ^\C4d64
%_K0T:U$EV/eek&:iGJ3SEXU62hVEZQoK`rspp6RPO$=jWRb)U%A&h^9I'(*<40d)c@m`*pPrE12[q:&\%$r#sFf\r8,mB/Q]o."J
%^(.YJDoH!ZTG_WsL4D?tF;]mA@*n?E=4(YX)"XeIUG.?WL]$I(fB>`#*?fQZ0W?kqR-PqU@3U5<VMDVFg%KN$?_3Gr%!ONq0DsAq
%"imZbV=/&B5/cOH.1bsYB9mq)/Q;6ma`9O"mT;*UR(TtLSk+)*dia?s)t4qYQ\LJ%M/H:_fSUD:+cEc!Ngjg(LJ\YPINtVq"hO1l
%n'R,]eoNsqW<5P9Kf3Wsd!&0h`gab$5#u/Ph-d9S3;<L_@oBom%F28'/>e24M6<G_?.(:Y&riJu,Ym3;BcrduY=P2#HIHclL`Ej?
%&R]/eJpu(9.st>RB-!sEob4E\!*R[)R`^c9Uc',e>9<J#@+#)R9V9I[_H4[(0N8hQ9OKH_-r%[P>%;+].Q=&[P1Qa6DXt2T8:VQ?
%C@USqGHU@2rD!Sjn-'nr(3!K=!KG_<(c'd)$EHVuA#pST71R-k]MH!+>Qmi^9`rMbgZ'`m8b_t;oI'mP9klknMYl$f"')2.Hup=9
%\.Ja,$uG%Nf7n$/:IO(N]2:0>l(20`A6T.6>;EYDcDjOul:.<7H!<7e-,2WM0`AC0(132j`(1oIP.c7S2gPS^S,!&JSb3A76_4Br
%5/H.d.QbhOcs;h'@*g59;)JnZkoskAdD+Zn'R*5*gukjX(eP_<<G]=S<1m24?d+#Gr8EZ=OTgAArUm<jK_D'n9QY=IZ,]soapC&q
%#UPgQ3#oRTYZ`%8D;\Ck@3JH8\TZu:>Hg%XeD.rD1;.bqMtr6SO_L3]Z7jE;0LalTrUStjFJ\14)OON[5)2^QU3QF?7o<+iZ!Ug#
%^b@DtO9J7(^2#THlAm="0Z!'!M;`i5?tG5VhYA=Z:h4E/Y(g`=bli++GtkliJ6\p4'5VI+1POO)CK2*n*M5oeqfcXbh;K_ZVY%nZ
%Vleu/5n]1%Ltf0u@UW=.*5qu0M8'S0+]DRplTYf$\E)C]KXh0^Rps(<p$D8=_m8l/n.M5>;b##W6FN@P.<KX?@2e./_BlpK^/Vjj
%5F#H;7+W+-T7"ZsS/@$)/9^m-ntS^Prk4mTDURKIX@eM"@mr.fMqj1u%bT/RoecT(;i%DZ^`ll!ZsbX"NZU@epn@sVJrYgR_k9`.
%cG>/$0O_PrhleX(EfN)%]c&^S5W0S7?P[Yk`[J%9/%^DneL]R!$GSsF^Nk,Re?mfe[JEPS'G*sPR8_*i.(m0n#$S^m!Zmu*r4rL)
%O0r>jUFr1rE1F^9R1I5I2ou2\.$!2j^(q6;:Cpb5%o@[mZjd.M2o).GAHW!,Tan=(KL?i2\FPq!oSbD4;;qFt+(0>Pobk8A*=gGT
%ar8Hhl+\=g/+Yc.R`R<2m![?4CS\j#f<%lo#`:gEo\V([VuP?GPRY/TIQi8A%-RL?P',h[?npN*b=b@X?nb%F#W[`"SE6%R-'4b%
%V7r<[NMB6_Ym\<+K;kDAc6(XPZIea+=9AHY9j4`q^>UTF%:tC;)n,Qk&*G9f+.#%`R?,Sd?ap'`T`5hN&/-#7]I@=mb:PbihRi]_
%,/?%dVMQ\(81Mi_HV)Kk<mQiRh5i3R_#o!&n*oZF$Off>N3R[AUAKACj@ejK#9;k.*M(,<F0?KPD.E*j'kLFpX>`4ZE9uI\c8E,t
%T"NB='1<Gl4@6p.dpIU:?\&<DgZf0-?-9r8U7?.1V3s<2G!A7JmAnA_%?+b.lX%#DE2n#=f7le'[,49D)-Ejg5fG3_e.V'U`ktMn
%pg-1#$ol1[MQ*De..+:ej@l]"VE8NF[WbJrT.?CLp3(*o,J8F24'.CrGV@i(CB6oY>?qpLN:21S1(;KZ0jBXN_SIosYc^iA[s3I@
%h)^6,#&HqB6uqEG*^+7-^>E<*c'^Qb+'W7`TAp^8>6#.S,Qjh)$k#&m\DTqR"j\b\@X+%LmRSkBTl>A\GE;4?`eO&(h6$qXMLXK-
%_nRFo)dglmZC.r(@djX?XV4p`%"EA$rJ(U@$?L6o4C1m22GU`ngWjn>?3fT6#KpW6gl!o#fiHG=,;a=L0nX7#a\tF,+5q6E8B5YP
%\(E[e246s/?S?7/jpXQOmAm$iKSA2e3>3s@0_$aK,cC]`X7Br$8YR7J>Z^&bMYRZCk47`t!uRWH#SB5qV2'>D4bKSuH[1M;?R:qg
%!$AY3Gg$&BKbT(C&?ae6K3Bg$E#7%[c=2g)(:>,?#G+G^B&iU]S1`d_MAs+?Fc.j>>`h-Y;FY0,&o55]qhIN@;+U@Ns&Sd#bHp>6
%crb6uCQ/-C\&,:s9O@d%Sg`\QhZVb)X/V@tmp"qb2,pu;lSZJ,?/1?M5kQ2PM%og=YkRp=>&YEhV-F?'p`b6^:hFL0T0\en]0uh+
%K9Kc'j\+N_5qK$c0/uA`q3Z@C'd"g-q`)p.]i[Y4dlr8,DkVf[nTDB[<afeq0IuG9TB"k+D(jbJ/q4PPY&Jakc@6muR.IdLLd*Un
%Onnmk_mJLrI9tb4HXcM"SHl*?PQC:>dDkDX&\DDT3Ii^!nr_c2j!kb-fR$Q8Jq+VdK5SnX*$LLrl0""^=mLIL2)I&.o;*>Iqt\h'
%($/9t.GXkO=WoeoiEpOTQh_%6kr@!s,hbDR_9IWs]jVUq*Y3j6lh;'iDY3OS>P_sf0>E.;f=)4NJ514RM_"+@V$Vo$jmrXG4Sf`b
%EO#<LQ+[as4(M=S9HUO\o9eK[4JOZZ5gJmud0Qa2Q.IpA]$54.L3n<\6'SY3GF0rOO#nd_ft\.4D=ZAq&1nqk[GerlDH8i)L?S(.
%"&o3u!(o4;SmZYOU]][AqZ@=^`TIcakHh"?L*Ds?\,2km+\0cBIV>[E3M!HO$t))&1;f1cCYbMAC=8*65V,a2.(>fM>5d&Z]&O_b
%34)!I[)0rb]S>BSg=PbFWjYP)nhoWBdddMWJNif4(`T7/kV`DH7BVt-&MF+mAM2]gL2Q$G>o=!CY,8F#n$d&=&3sZ:D]\#^07[KH
%-n="AUhO/&V5sJE<k'!`ICA5>^RDaq@^DLCAr9rRcYq6a>GYRo19%2NN[<W2A'^9:]5-2T9?J<6R[f5QD&hZ_;&::k@OOZ]\hC<4
%\^C<?X\j=upWGu.2P$qOT.f5]K-pA@j!rCo89_`Pk/`'>;9gicMuPsD>ull3pp\YM@<L4N9S1Od-ZoFch)18/cTd^n`TEIkQ$$&^
%\9Wba=m1H7"gDc3IJ.god&3QCK+`h:SiM>#GT+Lh2S6)7Y/KaMO(m)eCZYE\2n*f/#r[EmPgh$X7j_`XaZUgY=^;J2NL&._4rqle
%L+dpPjr5/mX`[7Pfc.hrG.[+dkM#WiM&pQ,*ttob=k`Y+3d19kY16>,h?GKkpHcc3S<BA3O?2gSZYC/_r,lA`K@J4fi[(?>dQZ6o
%g3=FSi^YcAo(mS@.9A132bb9KrLoZ@n`ubo&&G`p#n%j%H59572&Z)N"?pLkU&mslUR1Go&QtIYE#PF,g+1-T#!*U7'\:=8p0EIl
%7M%l@-_6JcdL8<S[!Lbo;LY4uP?*E35%+ojWq[p5e@58uT<M$a4s4!H9K.>Zcf%=P7El?XWh>k$b;9dAguJYmcVn[,7=un3`&6ZJ
%'!(FoRqh:0+?73=^,L[YNK79KjQl6Hg%6Nd(h[0c.:s>kN!LDEN5Po;_[ho`B6&,b=6M![0D#@49Vqo4^1:0e!(i+S.nr^=oS/tt
%m3h0i^h2(YUc6K^2T)"N!?Z'<.!0ug1D:N7oMqHdQO5gmk>.TidK)].rs#qhqo#6NB:r%E[gsY#>59MH`)+_CSJ$t?^+((HBlfcX
%cl+mn3Xnk@*T<-K($IT>r*)O_s5*=38c.)kl18m?*Q^Ma"_mr!-,Zo_!Ujeio^#^p.TLHRHkibU=R[@(&(?B(%/_N>PUNU%!3E9+
%GPDW%UJ3qhO;l48F8J=#<PDT1hr(i5hLR=]:$$\mK^lfUI=)bXX%Bpo@8^A'Q_-6bqAf.<1KZ&FT`?OO9WomaL@.ou1i0=<]QY=4
%)oalN)3014cQBB0HKgcha2'*c:(-mS$:SC7#!<]dg]3'p:LUX65Lj:KL\oCRPJ]+r<e*Pa4>I*G.?']ZHB./"`2M[fj4C63IXsZ#
%$5p"?.erpu:HgRtYVi'>,JV21INca#R&\mTY7@^$!>%_/Vl*@DJE;&2'<^[6b;[(gn_<SUkh#]XBk7,9qR-8ODN+:P)%PZlo*;j&
%Mp/a(.0+98=kL=KGkC\gl3m]"o%`bdLA@aYMnd#5GK,GPm,[CM6dZ:#mf<XEpN:qHTFaEb^;*B;2h>dW3T)=LID571mG>kgd397L
%DjSul7ln!(S1CDO7n)+*X%u6h39?>@[[dm>oC5WY`Dg(Ee^?NbCBQ>'DZiANIp]+bMEJ`\8GBCq\d]&DYm'O1J$50nl*^G-Y^c+8
%Mpsh#[/ct?mWJj<5)X6Z]I%+G[2[?&K;tYE@Jf3T`Nm&:n5gh6/&!1[M>=o)oLOOSn#]Tl\tcgr:o+/nm*^eVrWW`8diYFU$I@0M
%Qeq.;?BOK.<=-H@f!73+51?uR&k/*#K#e*TG/kCg5m!;8f_0%^SmDO.A-PR8K#[3'^tL;s#@*[VZ<V]k?$]>0ZDmh"0I=rYMl+Ln
%_6]j>7]iGPA^&]C3:,T2q]UJ\W;RrnAXB$@dA,asI)!M&mH1>U0sGd<DQ/_'d2-kfPP72]5[)o!dXK^jP:c15_flN6]3'9p8q@N/
%,,'gWB\?,XTt;(3oa5k?g;q;V>@V.F#^+l!)1I9ifkS>^s-R_>NA)Fs)dV]imUoe<#klGuE_P&e(-%>4NX&G!1u9NZX/!GQ,2r$(
%Y%f:d$Aq.#4,7U.>>-e+PP+F6!KPi%I`W0f=Z.'jLfPO=7?[mI:Xn:(50(HTE@Nbd72WB6N6_-[Lk;tG,r#cdZ8WiIPB9c]\r]\0
%9mp)DNV3e\_;/d;@"^%QOeFkQbnD@mk1-(gEL3487_\qW]kF^5mK@UgG\Uu5N]F>ZH;eDE\ZR"sAj6$YNGW2I`n]J0mEU<gBRtiA
%jEJ)pmY9VaC0JeFdVnXPh7qLI$tYeD1_b5<UGD*^OHs"S331JGQ*%+&HBBk+RB6(L43<R)@.[jBRcIm=GZ9h^(`>Mu+C+:j#'t=s
%6B`?KNIg&#A?s[HNt<;!WC\IX0E^P^+q[cY_rjid+<Fn9EEN+>$h"PN_7mu_juo8Sjm_,SC%\3=5mD]$H9UlDj/aM*&P$D-1%h6f
%$RQ_N%k/-.oG)P:Z#[0*U;%^EXbPp4%4_@rDtsYkc*fSt8V$CE@_B_$lQuA`He5$6i-?'pXNkT0Xt8U%k^&6fjZBG';dp-X[uiO9
%h-RXR8#&h*_?N&dS=X]pQ+nEF_6)605BcAD,]FPC1ENgBk8PM-=Qc<g4h<[MXXA+,^5hJM:k#<R-?k'(lb5O_n2cVZNjSp'[.ZN@
%Bg2?G;6o[\i-f<r5s3!WV#+*Do!]F\lCW\"Cse]X(GjU5r!8;=l!WehdDG7cR'Fj$&(XPf$W9g8IDldfQR+KGM"\"n)'\XnpM>eI
%:\uBfj0jpcq8rBX^ng7^g#73l:3P%)6Jo471L7Am.FdnO^s6hK.NQ/4nGs%:`N+[d'jFBLjG8ig]t"<f_8h?Xk09J`NIS=NUU;_3
%/sc1NM6MVT1MZ!:00Pd!r!7)%$oL?fMhie$0k/AJ8e7,[Ze\/s7O&[IV,*ag2^gq:'8F(D#A#3;it'.f[i2kaTOY5QXmtXT@_q:D
%!HP?U(f!"!)\QO3!PfhM+as*tY#kp)4$^Q8Z+o])a$X`L'$hL6cBnSl9sfL^Rm6oi-Ga\2:Q9UH7IlRQ2BefmZ*[eBp\\MN\h-4;
%!G%*`U>%e3fUf4h?lo@7IO-&^_"]6oglb01M;/Pm$j1aPNjZpbO9:^ekCn8`-9s2]jSP&lFhJ6LEc'b6p=eg8a%1_#m*L0tnd@fr
%NW5ShM#KRK(_p%V"Mt<I;58/NpWN9`F^`[*"-sO/;NV44-<8a+JX7/?qc<-InECuiT0MkK;iA(C;uiG-0oq$3Z\F!:#c=s$C0[Wo
%cU_<4p>fsZb++O\B1p#*FgL<",on9#AGVkRnP"H,J8:-%\fcT=iLbZKgO*@TNLPaOmX%A-[6]`M,b>)O_]]<Pdg,2[CPm^60:DE+
%o)HXaWL!-"SP,IN#KY'f6"6<1F_Fdla8_LA@i,5-C-68QKo,t7<][-e+BPCq354AXj>73"ZAPs_Fa.%M(gVm<T@.`)qC44,qZXR@
%4s,>-2*(g+ou,#,M*5UsoSDN-q\FOmE1_u9J60=>"KGr'_LoBXYfeI!Tn2+m^8Q<-iG[o*-n;p-pVql("0%?`6,N\uCV-S1->>fa
%K-R]R@m4nS[-t$MWst#%l%^Ie69Ls[h5P5>Q*<'.!g3mBmr'Xfa")Mk?EJANo\Fp"c<b4QY#U\\7V,4eS,f=.d$bA8#W3#l1YhQ2
%b/'r55M,HD8AEZE\A)uu>&^QXPZfW@pTp.DbL[H"6Bl28,7"KES$"0b]YV`[(;kJt-`VAp<7;;]hnp3Ym!Y`b$KZhQ;1%DAYl7P2
%0OcHd2`P&tkb(!P)+\BT1I,]N^2,k"UHXk!feF"J:^)lgoY)WnaF[[7jaqZd)3Sj&ZMA<_cgP-TTrQbki8Oarh$RX7AjST35n+]6
%G:sC=\DVj?Us.`rh=V[CG#&r7\qJApdN.]//Lm!`!3)8=_ibCsQAp<)GE,CcA%6$$fnTL9Ru%;6[c]F'0FS*i#@X7t&I/mA^ilMg
%'<g&9VXg)`$!s?J0W2]^U$Sb-2M2Qg^5^\*^^]#SI7GYhn%J#f2?8W*\<Ll1)l"Vs37%X02)5#D9WXR<jTjN.Ktj/'UH3Yq\Do*E
%\k-(D33ATQ9P_%b^$UbIF#sIa^E>V]ea#9YKtnMM^uV]^So3(j&M;\FM<m"1VWf&ia)0RP.P/0b*pAb;&sjJ/FlMp;_(nDC#JR=o
%)")D#)aD-p#h7mB@(KgFBPL<HKuCLOr^[:0Z%(Zh<0MA22sbJ0@^4%,K";X):S_FKVQ@o8;=20":"CVm)Aj/E\-?`UAfon!63b5P
%[Fa#<:*b3M@hbRX+fub.3sLN'M"meCm9&O,kJP(0mkO(X@5mPO^&'kK+BDm#oZQ/BjnGG:-MHpb"5%f"N)PQ;dT!b')]uuJh+,e`
%C:5KYI\'F#5eDC'9)FG%2^9I%"XON5+M-_UN'OIG\k8s*f$C&d<"m=2b6<u>%9Doi/?BYJ7T+`MT0q;,+Y/I<hdD^Vh;a2N3(#S^
%5?M1LVpL`7osMasL%A^3+X8n,Ie_LdVkk,8,5_8+YO;2J<+tf^3s02PJ&F#6IC5s7"b.(#T39g/i%9-fcB:g(Q(*>ZXaOui9]Gq0
%>#Y_]n*;Zhl"M%Zq2H?,2;"A[I;BX9;\.,<]T!fe-*M<1kOJm0FddB-D&!PdWKQCg0+`]<Nj/%E'/E,UKbl_OFo=E(Rmdcc")%9>
%"gC//721mC*+Dq4KC]05b'Pr=a;;6iitON\<A_;MgLqIu=XG,tYs^AF^5^.'Nqo3sCIq(IK@h<%N&Vlm.RdR)4l7HYIrAKq81)EB
%<MX9c.P%"(f&Fq)3u<fn&lp'?S8e*p@NI)">7@:Hf-?KqOJEgB*DEc8ZHnllM:EP.AMnDYE,+Mp$7lpY/<W8/E+')t=:I(Y`Gs>G
%leY9XBbYV\q2(*k<dG]rcE95:.b9k.Ag+G!O#@!m&g%GG]aFh0nl0BiA/&+CJU=!9!rTc]r+T[DgXj`d(rmd+s$oHrP!Dq6O(dS%
%9Y:hkqm;A.`."#%m\6%\5-\n8&S@cSk$;"*nN$,TJQ2+4lMr^OiaL(40j@M)6\O[T_heGf:SnA+.iSnS&P%4/,u[7u`[AZ,??6f5
%/U"km*p87:HDdf<h$(k?W&[kn@j;It`"u/(L7te#]lhOi35gt<WJ8BJ%e*]J9%YQ13qu>jka3!:X%X/^ftchuh6l"2>5H2mIbAPc
%E-[Snl_@pl\[muj7hGF42Nso$TqY1j:li^<DPsR)qC0UalYa>GURB8DDR;k'-QChX2)(djn%j[K/S22cHnb@,F5%<cPg1!8m8N:c
%TQ(=e!et_1lpEa-QbhuV1PH\'/dCC]7QFmWJ,?^;UG7(i#i[N-Wh9peqf&VTekm+rDUKu*@m9/gh^jc#KUT`.KZ#TG,_IGT&"2;2
%=#4024SKe:Vm$u)P/i4lT?EDD+T,`0j>f6UAloPP!;E_YSW_lQO,YU91Pa_M=u@W?D&NRr`p^XMD/IM2i=V_dE;YT7fJtq6!D#CQ
%%W3p,MsM1R:'V_K+s=M0*1K[\1L'MdRepa)0Je@Lm%D!rP_*F+##pt,XhP'/M$R,,^6h+=A?^)MZC/X4islp"Y-$)O1S,Z!$e\RS
%9*cMqToI?oHXG]%$7XijZ@Q<K@N86h:T`Su0.$*L7fKk9*@%Ynm?3(T,Q]o0:KZpXhoqTjZ^0cg$F`#:RTX4V2NU+Lb][e`?`UlZ
%p3$qgi2AbMQ/O(%D(?'k".<0:,-AL`#8_.f>?MB$$*c=$rSFlg,XP8*,'D_c$fA-@!Z,1J;Kg4uS'(QJs-XWp0GV1pc_!150HIe`
%RjW6%N#0j"U9,^-=#d@7=%7ZVYXe>jDrlDj2J_sBJ&K*_:eU3.SmUCGja4WCQ6(_T1l6f>^TdU0]pWMJ4ULh>Vbq[TQr$rbGNn6P
%^2Z+RHUZi9WB'UY.mT,p1/K`IHhlm;:r2b^/M16<EH"UlRnK/a%*e^+f3I?DfGJ$>/J"j_>+AIK37,6``XE[$WI2dsRP:^ODX?8!
%4E7sfI09XoaUt_Nc=E_I;8V_76j=ui(>q\6(2_,U06Dn+qg/k8M=f`[Q0'oc#0Tj']E)3c)CXllK9sH0D!RE3<oKZ]fLC92q,Z2,
%!)`+_EGi8@ACH7f16+4G_U+EJMHpuUqXN,]N[J@i\RQ6(N.eI6,SWT6-`T&6421a/Hc4\C=q2F9SUoELQ8YE7;;(Y3P(?s:^DF5H
%7C_?^NK$db13,e!#I07_VQ5&Q&0d<<]J%I5=GT[7pZs%-&'5WW0?,YF`'-X/2A5Tn'\X\+n.df%Cm()AD$l[WaqYA]&jVI'#1c7@
%+%!N!3.R6:@NGukLd_Ye=PZ=-MoA)rL:.&+i9N2gQ;$,dEPnfr%W@'oZAh[!m3"f6_HM'\1q'\.8F:47b$fN5E8kd8!,I_>]CENd
%.4Z@^6LiE?frIP*@SaIOTt40<p+#QTASTqRWNEm`r%[H5"BoYLj0@&FSiqNPs07:uKim2d<DmG#`U]D&G\H<UZ*C4l/@PZbW/3mb
%c#rpa[n"K!UDk+ZVd#QQ7[o"L+XgdWKA60';jjWoDNA8bFh]TqEgc'NHZ7@F1]=Gd,.-kB,f,j<a4."`ZuCtaWH0(mlj&q?dFtL6
%i-*i/f/AsV[eGcKO8M<TYWcfa84Rpqpi?A(Q#bIAP3:V19_.SU:=OC&n],7ccN@S;:po^lN_%UBfl-Y[gOU\!!@6(HUm%E4>p/V)
%Qd@TjK,S'HZcQt0#>cFK?E[*dW2UGP2qJ/u)Bf!uIGP4EB^fWqeB^$XcqQo%C2.qFkL!6F(r(op1Zr0<fY`$&6&6P*O8ei=(\t#[
%BCMM%0c:Q@Xta+6MtYrpIS"aG]qI81dW='+odFURb>iq7@e0:Vn49QDJ)]m-oE*j%li>ekJ\H)id\YQm2Kf+uk@f6%>Ds*Jg\j<C
%0WfAE#EQ5'%H:nU,1\Y'r-HQ=rkpcV;UMipaB)67q)Q8?2D!lS_nL%9?1!236^"P9!VWuY!)Us$2q,>7H!NjY$#0Yjp!p1o30bnI
%)-1[]FA)?TOoTb5n.`mhPR)+*%R,RRi2BfIa)F!<Udo>kUUL<#pE**"ZXV1i.3Q?Q:%BOaFArJO]!/`k4-/-89s1UOD4[Q.+(6i9
%fQI9"_PekJ[*m\1>P9ld=je.I.DS71\j1..L1H,_2ZMBX(rq$B!M6jP]:R1"g:ug?6T=$Jr=uJ7)+"/0KZ+e7ls!(4R5aj,B9UVU
%PaqHO4.0J5CL^;l-kiR6C^9$+R]L@qCC:uYD)7.I7?sTC:]g(f%l;Y['??%!C/tGKhL7E_#?]'RTO%IG%NlL!AZOBG>qdS0Z)qkc
%'pL;2O=d\kIqrh`%%$G=%S"?qFfJ$i@JFYD*4uR]i7#f%\Q.>a%Sq=lKT/b5NA;i7aU-*hk(SSfG:nk3.#RI&N0+;jVV$;OHn*1l
%lPJ]D@E6-D77:c"N(T&=54@LZX.SfhLq);cd:Au(E>l%(7Tm>Qo)ul<l3L&tCWKHA<JW(U[<ar^]QKT-7SZ-9KuOoR"3t$?FS\*b
%mMF3ZX3ogC3GhV6jR?s]ZK@JcHIDfQk%]jnE>rdsWkC\n<Bflh@*'YnYqk?0KVkTmp6dVIB#7bdjppmDY0`@c_kue_A`aAj;or$n
%I#;1dQ.nM]ntjEOfRd\+!N1<GeUjF!rF2,>[/(!/Z@,[@YQ]H0O4W_!")Co0jhodP`]3i_1@\>9H?OsV#2]:4BOs%P2J\c^XeO'=
%]cZ%i_Vg`P\t*"T"ZVQ?*)4p`TkO%3o!$R/6;*3aBP6M:T!#6AUEB6pe4M*_kNSF5Yc4@eX6ln+_##1tI(KM@-$sZ$GV%//49a)U
%9_O]&Ek%Wjo+Gb\HY"VgRsV_'P#I>dh1%POipWX;%@fLU@J\pSo6cMu\E`CsISrEY<V2i'R/7Y90dP@/315K2>hd%3!ac[\!4&@D
%agH[aRW.JEd0<'E8dQ:p"5I&fagE'9F@nMtXaOY2f$=:ZMm`/;8Z[p#>-BF2!@G)F$[8lL!FG"/&u[SD$hoN35V83C-?6eqSL@.=
%nT\_T9rW<RlmjNB>cJ6pP<"e*g[NKL+JmcrErN/9g'1S]N[1S;n8Oej<4eRZCi-9gUtQ#:71SVrCE$ThSloN>_b4N&&o.S#C70:N
%G-aIf2qLi>[/l'QS$^lRb-@F>D$/HjOL<dq*9eiT/m5Vu[/ojEUsq;eF"*C&!Xpl*.CENU(3[UWo1Z!hJXk17V091Z3UH928o;IK
%;O(.lR;aeFbb`fIn=nZ];JJ/_?pF9OE'h#O=$mXN=)&["d:uQo)rB3Sm7#t<Wb,)W*A9Ep_9uLZVqiI>mM&^uk11Y6*Y_Yd:><Q&
%0ln+F2[GiGKEUN7ROLkh7?C^-^i<HTQIOUt-5Fs`@WO?,<S:in=PH)@"d3!"fhZDpD&6t,3$)4Dqt=^]FiaeSC2Lk`4*.I1S*<>_
%PVJJA@+]%h,.2U#U!TUnW7Gj2e:U9\bdX"51J5,\X_k!RJ#]oGYsj#D2<<JG8Re1]g'ojF1rR9HgC42,+9C\`m8eG*P82g]UUR$k
%G/\X2!,E*5GBo^0SVGfhZ/$u)gLEKRZ/)X'SXal0VYN7_g=6^A9oZj#r`H`.(2Po\eanQM9S7W>+s%g?>]fUZ&8X9bgRPam&$WMF
%$+:ckl#jgK(iS'FmN32NboEUPHIaI4#si$BUrk"nnd^pO,hP#&9YFu.,o`5?)GjRT0S#;B>)M]ZgHNZ1:pFj[f'hXWJAp\J"2rV"
%dOIT&G!he*aP9+eh;I%e%M1+u)p7fN@(X7pqVn-Y@(S^1,l;cl[N!pdAK^GnD$-sn[s!M+_*V`GP[M*h;kPAF@(R:<(G79PCcD.>
%/Qkn53X=-/$kgE0fJ]r[)]K=,9R*sE1mMJ'E6U2:@(S_OaUQ*SBu::Y:J%bG?uPojb4dR+e=U"#=<;;j^T8O1LZ'4"c>D.6C,g3c
%H>NcGYE8D1c1E=\@VF_Pm0;J).eB"cVe&9iotuBq_:*@#atVg@<&lO%Y\bMJXBDb:4Ceg6Cc=2(2e"DlDNN^+at=slDAY10-9W/]
%)^lML$FTu`=sjWbJTh9n0%^@F?]P?E02TNk([cnB"(_6)"\Q#t_O[S/(euRqC`>hK[k-0L0GCI^93e_"!aW$Y*$GWsnS=J%e50uE
%q^BF,^5lF%SaW<fg\J^^fRABLC]g$=E9p-hHoX?UJo-$Jb2/M;D7h,KCI*hpJBGn,;-F)Nn&+cp<_jEZ-,m<@5PU(B>Hr%tN08-\
%Cq$_E'.L@/S;%if?EVqhFlA4]02&`j'oH>//_P%2q;2CVHdT!S7N9clA+,fU(\^7PD,^'XVte^6\VM7:agQ&D1(:$l)uK1ejk8;;
%UM'6Bg'tgcQT2Qb>+L%dSL-kB5VM`)\Sgo8idkC-NIYLXphoTXkB.ae[^>sJecW0[q)GRg-bUnTG/GRnBuF;aD6['Tlg)\E-0_ur
%WjWMM\bpEI[Mp!/fbd)`h4RD%V"5Z?H?P;L8=FAu[CkSICg.1I4&4<aOoo$.;JdYBBGuX;;%G],L.XZfYU6+GM7+@LEn4[T$h.>b
%58N=5Kke>f+0'0NO2BmlX0rrORVlVOW4"8mirlrpg.(?sT6@6C%HR!jW@':hX5mQLC>3]NB1oY'P?4`lO[%;q-`ON`kB8B+[XjVh
%(K>5r\%`t%]93.N*e6"DMRL>1`8"(D[_XTC_g]e;_*mWf!ACtOC$(XsrsgLNPuQL/llq,+Wbm)_ke/Y"G(Ye9F"f*E.@rWb)@2+/
%>NN0XL8LNX*iGZid'7Ys&A7bhN)R7b!aW>7!`L;2E!j(8F.dV:kL3#6SRG+!EQ,DUS9C2N$^r?s`]`)9e]H=1F2^'5B6Tm-WheE>
%52I>!\6O"\4!0f046PX,\W)!,0>&Jb,i%nk\o&JO34I9\gd[H4,RekT[cPd.T%Gaq<Tm%GZ>pmuDkq/HDRZ',7>c@F.d9oGJ&K@$
%91[4m"sQi4hQGYBlnGO%[rU4]2nD"]jgO.?&<h2TR:+Wm&cjU)I4'r6P&;5a-`j_RDOO>CD<-i7qNH$5_('<--L$CRgUKTi.HP_?
%V+dWnUtfj,)'eLbD8S>M>Jb5M%`A9$la@8:p1,B!D&X>h_U`SeKJDf$%=c.*LgG2:9&2(3%(T4NDJ)'>[pQX\Q2jZ?id".7^D>i.
%XP7V@Rnd#:>dt4shHhY?OlA"<8<e-V"^G9BNBDQNaE<JVH4F)eD3'jgmE4'4>,V$KFkcU60X&X1D8RZGVJb/(aY_FGgBKfLWgQlA
%Gk%s(<\]?DTcCs:eMc:<9;64$[Mp350@H]"g,;e(BZdb&7Nng*=gDn^7<^431<(YqDb.;GC56i:,hp=/*A8(A>Mt7)jB7R]2a"Wj
%J02$ocno(7D(ngm.d0D9lE)T^9;B=7/JXsg+g-Y(h;I(;PY&<S@b*oTSKcI/O@LUM"2(e;s#`7#pJacFL"Q%c`=%NITWZ458@<;-
%FIRTpnUN<5EptB7-/-G0fDJ9=Y!Lu;[;B<dqbc$`(cf.Z0J:n!hL>/GL"V?A4uQ`;rk4udlZZmoh`'VC\a/nH6#HNQ5B3;q#B4E1
%?5*aDg%O:("Q<Y^MBbO<kr'.Y\8Ilg](4aOAi:Vgmn>p!E'=JN?`GX*h:l?-es4GM]QQ5iC%;g,S$%ho[AZ:IDU2)Fd@Sd"i#G2b
%$(*;Xi4X#[BUSdU,@HJCj6ij[+Q=7D]r3p&/!#2IRY2cu,!`^-\u`fbanC;?o4*;0l25'4CNu`g;l&Pl1eNu[Do9qjY2TK4"Du_,
%?r+Bq"1:&A/8jgf2HHd5jAh=oI)Q]#29Dm'1HVY`k6hiu]EW-LOL]SAiCI7OiB\[@(o:GsiBBZBft=.p`G0a5>T8_nnB.BY^`MsB
%]\hJ2<4n(Fp*7e0(WDJsOo:$j38MB>Y>VM[N3RfS<G<:/[9B"XDA_rV?`uMAN<ZOidpB8kgYaQ=ngRm`UW^t;Mq8EQ8A.s7hJ>a6
%QG<=`=9IgRR.^'*PEV5]hEZog((=`gZ+?D.QM57n!NP9XfYpuf(Ed<0"umS`HNO+P(\J68qc3>(qo;WthX7V?NCTa\*emt#(gRg0
%oGrR.io0_PDY@('l?TqU[bJk&3:&dEmG83cL])[Sl$3_V9ZGh7?eIRk?@;'%*@c0(?M=nt%(5\B^iJb=&>l&uWNV=N!=_1.NM[n2
%1\[cN6+:\XX>(/:CnoqdgNHYtM>"f0(Q$dH-1FherD'#u@>,qpd_^;^(MpcPQ#$1K`6o'0A-9`<(@d\T8TSegdX6ZM_&6JgPP.J*
%Y[KBH[e_saf'D"te]B;U>mMjg7Jg\GmB=8s06.r^cV4[NTjR?Y&V3%3RQgm-)XZib\u*W?2-q.ATfl>WnMbs"-!-JRo;Z*eZ\qfn
%F$ti7cKtE9$51rsP\U+lJFl,0e]:Y")-P?^r]<`&!P!\[$ruT(%:j7$G2G6KCO9&9h8%Z&0`u"lfOJrEN>.=Ai+.n>I!gRreoe1"
%3d-?36+"l=<9>6m`L:ShXgZ5sAB28Ncf"'`!H-F:3TgTKoRTtQVfi&CGA@Toi+T'odKR)>r*-GT]tl2(/>%Gb'IOa^:Hh+uVOZmk
%i@*F?ChZ@<(-h"USAs8-Aq5Ws&@SYlmWX_cnWq9[4mjgP)NXa3'baJpH$o]6DKom4:k/'lp3O]JJ0R9Rn"L^5n2<5Yi]`soVpD&)
%9pOT<2&n^"^V]mB(Kc9fUo-Y4<9?\%.WfJchD7@;L\BF+\j<fVZY9F!Y5;MNSsIGXT=1s])NRq6W;uB2,7[C0s+mM:\dY?[d<fA2
%=<TpF%LoMAfW?tc`KeC)?+4\9'0>Nf'C;])[ZOh_mKX>MeL>Ti#I5:a]DGXg`t0B[>;>b9L=oq=agK+&%6!OdfY",-\c?4e#712A
%6bmM2]o$XK=+u[Yk1nQ`Qe=GY?gI)/lA6qClA`Q?[;OJdc$sb<kdmt#mJiG1pY%t"'Ggbi\mX*Z[u>U1bFd!"F>Oan-G-2b:CcZ-
%B5Cto"l#h8"YjYtBGC;omA:3m1$U<I4Vo??=<0-MEH6'*i9FLYie@ub`iopne`VE+N*GT5f^.s<gs^oY%&YBR?1r4,Aa?o_=D'GX
%*:@>Br'J*=K%/rrkc`'`g/\(%A0s5dH()C^D*/CmLM:&.%JOba\=CiDps"]Sjjb3/eYbYrMFlAHpP)e]!&6mS3PLf=7F*N0+[bR4
%8IS*Fk;R]f[Z9AEJJ#@;@^>Eqf[97W2UXuu^iWPb0eDKN7r<!@o$Z$HrkMKcniZ:9)LG`Wj*)SQG_BLcWiH87bj\;kedo%f1ghtF
%8"S1Odk#`UKBArK7C0;f2^=0="dVA"Mm.)cYl(l,]f,;+h+Q?bP9=QXAh*)543S]omYj!F_#E\JQmtqM]e!P/C=a`P*m^_MDO!0b
%VPE]mO6H<oE7p.k4s,,=p>jBXEU$YrTE+$O`=hu*:19=Q1_3K:Z(/gW0NbmUBI(j-rJ\+7`AW6*Ra'k]_7!p^CqL.]T-)5070"D:
%B:sGBlF)rPe?CR'%EslPDf^2$@eR(`)@IH&q7+pO$LL:Ygc:J<E9s:Yg:mH<UrNb/F97`lEm)aX>j61QDCI,IAV8V4Z0D@.YsR#4
%.Lh:@>^+h@S3eVpN`3G4CH_*\R;<&4<273P(r)^>S`6X;pZBKE[8$1"=&tGQeP*egSkP!R+/!5"`f0(*;%4*B[r;hm.[RV(qL1XD
%H>ulK-pg?Wk,Eu1WR!Ejgm(T.,A*G`Qj/IahBmi?8!Vau.F!:.;nYVqgd]fm(eA-jGqNltEo"6VdDo_8c/mW^9jq'q<6DV<3ajSJ
%J$/Q(.EOT1(5ImYUUHsYYu@D6GGfWIh?;#&jdQ9lGX^e],eH40m:h4SUTk]CnS2U/*aqJXoUq34c$<Kq)R%sCcN$US0tPJ5&/goA
%Bu[W]2)S<6VsnkgQ?)29J,MmOI?2YIH1`"m^1Q,RA..9cP:.!"9u^(*P<:'3)h&pM/sjI[]JJ'WK$Et@bgTJI:8mnVbYe`YUHfCs
%O[O"<q%NS3$OAqi'^N[qM=F>d"+r?OVH'V<p*<TP_kpG65DMbB[YI-5`PKu+e2q2/J4DLrB+QA\0t+tllA7iHe'qC*pBSg@CWn.^
%OP_*p=$2'OBo+XdZfb%`QHtOu,qG9SD'S6WIhS.6f#ArT/^joh&c8@nb%5&>E'?qflIb6%3Z4J;6MQH9OhDl"_VOs&]a/B)G&_*,
%@B;UJ0Rlt<O7'd/T6PaM#)^l\.a5/Ce(1N-nlfP&H//U2KpONn&KRsgkFWYV1A0s]$>aoC:t#\oW,"``S*cMQ5N>6tk(X\.)snNL
%W7;bK)An&GJpbQ]Kg,L%2%Gj.IK,k4TC\j;_s)-LH_JHTTd@M4Isn!eY?+HQ@f*B[0g,7)9o37uWsA0oUsr>QC`uHMPq(l7,ML9\
%Mj;dUiM_)?!@=c@qg2scU=JA=^L:q5"Zp1aKTD3-2=&3d@=8gNA<o[uE@GnZJUti$5:7Gpq.IJMNB-1Hc7;V"$^(4g%;SLD3\DaH
%I9R%B%,#\U-M$a39!)R]glekFBCb)G@59pIO/HA?^eI,8\9AWN[IC2fEaWZU^=$aYe:*ndGZSh+Xq^9B1^V+i3aRa6*NROn#n*Zf
%@W;e@P9@V>Kin33)=@B@OFlZU#h&p(c[>\2h%lCre5Z)##]5c>qi;\5B(u3U".rf9SORb0fqi`9W%O<;)3C9>!a_dprPbe;[$"RM
%7rN&1QS$93:^uds?C`6fKC-5'%o<]$$-0&-mqmKmToMWO]PZ\`h^bLPT$=IP0SGS'`ErZV@m&.4L.,^MiCgjc-(&)O6@`]fHjLW@
%Kq:I1LJ04g_`(9G'#F;5!$O-#M22&e5brLqRRK;f\!p#',^-X-*9"]LYW6r^GaRk_!1PO('dWr8&o:ba`_V/,%EVbe5WPV@^I3Aj
%nF.r$j1l5d)Q9Web690(%5Gg+U^)5'H7aJu+hKNl<mAaVYAm.uS8[Z%dm433VE]5MKn6YS,djk9\RWca,E=o-?rGOcNhKr<>[p[8
%@E+i_jaM>dCd/#7r,%jk=ht+I>6<:)q[NPE3-Tt#>X,Wc0>saI%HJm7fZ7a!5%e)1lTTn[Tu^aFC/"u[,(MgU=r]HA,B-2_a`i++
%^XY;,0#PA-0of.8423f8(U7oSB440pU@;<;a9>+'LIhiV#[RsYFJpUj&,ZX,`"X^r_jaT5+9SX`k[NbCRJh))nPSHRp<H4FK7],r
%J,Vte4,&e/<^?(c?sSZ"&;)qZeQ8f=;5E&AXC`(%9n2SJCPs#Q!b@gk)T@7`/\\!0ju@0NeT<K[bndnacpD<6H.qFWge0?7e3-I$
%He$5($<GA'o\h`.[n#?M<Vp./0?8B>j7s[fDGAq#Bh43cg^SAnK@EQ:*MX3L5<h.ub%KrZ^Vtg%!N#mE0:ZB\;W4kY`k],eh:HNM
%QjUb0;-"-(0ZhZ%I8-BI$p#*9S__8f;<Xis`ZG<m.'FLZF**U^hruaA.qMi10pkq(S@jh'+Oq8_/D"6j,/^.p#f8hu+![<R^-QO=
%Ebm8@[Pl<dYq"DTf?T"BSl6b*\%Q4@es=t;=7fZB*2"3:j*q,p#K_VZs!nR%`Q^@./`!iuEJDe,ec4@A/O;T))^Kl0%<T.`Fm[P@
%\*P'HpQY8[8Hh6=UUEH#lIn6/`EmIZNeY?]PUmt$ZVY/2Yr00KQDuT_92.nQ'h=@FM,XOlD[/uO's$Xt#abCA:=uV6lfJJ8h:7B4
%bc+\&-,`')j>dc;P[fioXK]BW:bK+lm;8kWDZ:0#.QnlIm?tIDh(#i_(u9RFc)28G?mp^$*5meE><SUHeGUcImrT-JDtV/C(0JC`
%d+$_6GQ,9Q/8`BEnGV'ubk*ZRGMsi9PQouUnMW/.TT>4f6'g%K2&<<@]3d#1bi`AL7>o'H=dUTpkuE\OY"Ga[m^NR>Y&aI@+oQi(
%Ml*t;-/ATB4R<H/m,m>VKZKrR?SC)E(Xi1k9)b_O5="]nH;07nI!^@f.55Y`BicK;gk(]%``enKL#31m;X%[d$u[pt+QM<$M8@s3
%!qq_r5jB=?]<Xkc7jpH:$@NmdY"`pTB7;P8G0o(Sjr/[\;*fCg\3qhZ:Qk]#UpXCsXTNCimFn)3)LeeZh)B'-&t@Ec7&W!k56L),
%,,4^]Rgh.aGA=0_G[\joSp(btd$9(!!J3NdZ;Xkp%+7CV")7MRajY]hbtFE%540P5pT))a>1T;)cdiR8G5pCP8kfN]!-]('BQ@j,
%fqhk7]l1-n6kCjt\Ui$b7(6h;cPpSP<A_l27KL6L-?;KWhQu9/bCV::_R"Do.p+`\o^XXYR07clRM[3k6c6*Hr$`e^!SB@L3,2:j
%X.#MXmX?3O-Y/AEO:$$)EsAL54.FIm`i1*<NET,XneQBi5+>k1iOJ#o@C#l#Q-a0ZQ)qmo<uYP#p$,+k:h##J=brdEAts/*+!6AM
%d1fgTNBH6_,;D6+63@g7#-X(O6PH5+#]jCcXEMB&auZb=*;Bo*kA#_tApVDe_:3Prk9J0sLi;,#dE'ZWhZXj(UOa$?4GUQTER%':
%g6fSShT&WZp:OHM3:D+IWS;aR$9[mY!MSSc#CGP^AL_qMnT%*G"-bQUbBm2Y8[=dTHj)bP:#eV1nI\_4nGr<F$j_mMq$Tj\,5W-7
%-Kac"[#%Q;U*l(1Qh)I4-5i!#9NGTu%t&>a.BE!!Kal0c1fi@8@206G[lI-r1K4kI\74Lf`@ndFl7ji6@#i:;\C*k!NY`i_6Q94%
%M<^2+I;l=>r39(Jg:GSgE5TdTJ2@B75mDP&<X-Z%Vs:MB9FXdQrknK2g%j#>2;s;A-Q00cF006De/#.reo"5B(7CEn)_tbL^,Bci
%k8dnOEetM,'M2\2aLmc`.<mmqPN4o;"a,s("bnj7NRe3-:Vg'uF0Sj:=\/eOgm&N1*KrAgSIQ+!HOJK2jV2oI)bt41F%[1X:TXVA
%?\<ib4p2pXm>9ChYCs0D2sZ>@G'0'J%d'k:AVkn+2GD)<+U;I!BsK?PXCO>Wr&Zqc07M.u`\;@KD/9`/ZqA_?9a`r^&dWeMSUZdr
%ZHSHal*/Y;U934K%(6u:HEb4[5HJVeLBaoJ,].s7XpA48P_WLfYg4V_T%Hb.oG\i?)setsM*I#L'C7*k#qFIjYb09*fC4Stn/Y`j
%\C6h0g^Pq%AA7YEk4B6JBRGQdb$8bTe@S0f@'cmM5:.#B1$4:g"K,n)c3*k("bO3t+d7ah0D\_XFOEGAkon[T#1YbW/H&%G-abAl
%cbP`Je@Y-0*L(%sL2Psol7$)?\GR0/E%Jd&mGIm$DoQ_qia;]Y\,Z.$M_4qsc[YPA^\Qp)rX\aQqfi)0GFsB]^OQ7KY@$2&+90f^
%rr17Dq6,;E+91rYJ,R:Br;AkYl$ra/[m0i/5Q'P+s660Ur4fuGYM]?YYCHPLJ,[L'rqX$QqX=IZIgiT3UjqmS5Q8:pq!\7P2uaEBhH%i~>
%AI9_PrivateDataEnd
