%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 11.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For:  
%%CreationDate: 10/30/2017
%%BoundingBox: 0 0 922 931
%%HiResBoundingBox: 0 0 921.7168 930.9291
%%CropBox: 0 0 921.7168 930.9291
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.0 x243 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-1-11</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2017-10-30T12:54:24+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2017-10-30T12:54:24+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2017-10-30T12:54:24+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYqwr85vMOpeX/AMudW1LTLkWl8ixxwTkF&#xA;iplkVDwoDRuLHiT0OGI3V8ZXHmLzBc3Ru7jU7ua6Y1NxJPI0hPjyLVy6kIafUdQuCTPcyyknkS7s&#xA;2477nCrPPyZ89eYtI/MDR7eO9mkstTu4bK8tXdnjdbhxGG4k0DKzBgw3+ioMZDZX2flKXYqwz84f&#xA;NOq+V/y91TWNKot/EIo4ZWXkIzNKsZfidqqG+Gu1ademGIsq+PLrz553u5JJLnX9RlaWvOt1NQg9&#xA;qcqU9suoIUh5y83qFC65qACCiAXU2wpTb4tsaVnn5MfmX5ztfPmj6bNqtze6ZqFwlpPZ3MrzRhZf&#xA;hDIHLcCpIPw08MjIClfX+VJdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;y3/nJSYx/lVerSvq3NslfCkob/jXJQ5q+P8ALkOxVlH5Wcv+VkeWOKhj+k7XY9KeqtT9HXBLkr7q&#xA;yhLsVeZ/85Gsw/KbVACQGltQR4j6whyUOavjnLkOxVlX5Vcv+VleWaEA/pK26iu3qCuCXJX3RlCX&#xA;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&#xA;O2QIpWV4FdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:43381e23-1372-0a42-bcdc-012442005556</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:43381e23-1372-0a42-bcdc-012442005556</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e06093f6-a385-4e86-9956-b79b2b33db4e</stRef:instanceID>
            <stRef:documentID>xmp.did:fcc9ff7d-a9f0-e649-9b2e-119eb0a0ed3d</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fcc9ff7d-a9f0-e649-9b2e-119eb0a0ed3d</stEvt:instanceID>
                  <stEvt:when>2017-10-30T12:30:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:43381e23-1372-0a42-bcdc-012442005556</stEvt:instanceID>
                  <stEvt:when>2017-10-30T12:54:24+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1200.000000</stDim:w>
            <stDim:h>1200.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -930.929 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 930.929 li
921.717 930.929 li
921.717 0 li
cp
clp
241.087 150.476 mo
241.055 150.476 241.022 150.508 240.991 150.54 cv
241.087 150.637 241.184 150.734 241.28 150.829 cv
241.248 150.734 241.248 150.637 241.248 150.54 cv
241.184 150.508 241.119 150.508 241.087 150.476 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.188235 .184314 .239216 rgb
f
344.28 17.9281 mo
344.28 17.9925 344.248 18.057 344.248 18.1214 cv
344.215 18.3793 344.634 18.9584 344.666 18.9584 cv
344.73 18.9261 344.762 18.9261 344.827 18.8939 cv
344.924 18.5404 345.02 18.1214 345.181 17.6713 cv
344.859 17.8002 344.57 17.8959 344.28 17.9281 cv
cp
f
517.383 538.945 mo
517.093 538.977 516.643 539.203 516.643 539.331 cv
516.868 539.235 517.158 539.17 517.513 539.138 cv
517.48 539.074 517.416 539.009 517.383 538.945 cv
cp
f
546.03 568.525 mo
545.998 568.428 545.966 568.3 545.934 568.171 cv
545.87 568.203 545.805 568.236 545.741 568.236 cv
546.03 568.525 li
cp
f
662.033 497.198 mo
662.033 497.165 li
661.969 497.198 661.904 497.198 661.84 497.198 cv
662.033 497.198 li
cp
f
672.044 108.214 mo
671.947 108.214 li
671.979 108.279 672.012 108.374 672.044 108.439 cv
672.044 108.214 li
cp
f
700.24 211.536 mo
700.24 211.503 li
700.175 211.503 700.111 211.536 700.047 211.536 cv
700.24 211.536 li
cp
f
240.988 123.023 mo
240.787 122.922 240.593 122.787 240.38 122.74 cv
240.306 122.722 240.183 122.916 240.083 123.014 cv
240.279 123.121 240.477 123.23 240.666 123.334 cv
240.787 123.217 240.888 123.12 240.988 123.023 cv
cp
f
666.282 463.943 mo
664.494 464.359 662.704 464.777 660.916 465.217 cv
651.861 467.355 li
649.681 467.863 647.521 468.269 645.361 468.671 cv
644.377 468.855 643.392 469.037 642.409 469.233 cv
640.192 469.638 638.203 470.023 636.212 470.407 cv
632.192 471.184 628.037 471.986 623.79 472.634 cv
605.511 475.176 li
601.571 475.648 597.894 476.049 594.215 476.414 cv
573.433 478.476 552.092 479.407 530.783 479.181 cv
505.561 478.608 480.73 476.533 456.813 473.012 cv
430.77 468.997 407.215 463.973 384.711 457.638 cv
367.324 452.482 li
363.25 451.235 359.368 449.912 355.616 448.634 cv
353.712 447.986 351.81 447.339 349.902 446.707 cv
348.791 446.325 347.844 446.008 346.894 445.692 cv
344.91 445.027 342.925 444.361 340.961 443.63 cv
332.524 440.436 li
330.835 439.775 329.311 439.191 327.787 438.606 cv
323.672 437.027 319.416 435.394 315.144 433.471 cv
298.641 426.328 li
298.283 426.162 li
296.194 425.2 294.063 424.209 291.931 423.215 cv
291.054 423.175 290.292 422.18 289.239 422.555 cv
288.177 422.942 286.857 422.62 285.635 422.587 cv
284.347 422.555 283.027 422.781 281.901 421.687 cv
281.579 421.397 280.613 421.429 280.163 421.655 cv
277.813 422.91 275.271 422.266 272.824 422.459 cv
271.279 422.587 269.734 423.296 268.221 423.199 cv
265.324 423.038 262.492 421.911 259.531 422.266 cv
258.564 420.786 257.76 421.622 256.634 422.169 cv
255.54 422.716 254.413 423.361 252.804 422.33 cv
251.709 421.655 249.713 421.911 248.265 423.006 cv
247.396 423.65 246.302 424.036 245.303 424.519 cv
242.214 425.968 239.575 427.544 238.867 431.471 cv
238.481 433.596 236.935 435.623 236.034 437.781 cv
235.519 438.971 235.229 440.387 235.712 440.998 cv
236.646 442.125 236.452 443.188 236.452 444.314 cv
236.42 446.181 237.676 448.273 235.647 449.882 cv
235.422 450.076 235.422 450.784 235.583 451.138 cv
237.483 455.226 236.034 459.506 236.452 463.659 cv
236.581 464.979 236.549 466.33 236.452 467.65 cv
236.323 469.163 237 470.74 235.647 472.221 cv
235.197 472.703 235.745 474.12 235.938 475.085 cv
236.355 476.985 237.032 478.819 237.289 480.718 cv
237.418 481.587 236.967 482.682 236.42 483.422 cv
235.326 484.838 235.165 486.094 236.098 487.735 cv
236.549 488.539 236.614 489.762 236.42 490.663 cv
235.036 496.683 235.776 499.612 239.768 503.732 cv
240.637 504.633 241.216 505.825 242.053 506.79 cv
242.504 507.305 243.147 507.884 243.759 507.981 cv
245.754 508.271 247.332 509.203 248.555 510.653 cv
249.746 512.036 251.227 512.036 252.514 511.361 cv
253.736 510.749 254.541 511.2 255.668 511.328 cv
258.564 511.714 261.526 511.49 264.455 511.456 cv
265.131 511.425 265.935 510.813 266.451 511.038 cv
270.023 512.359 273.435 512.069 277.072 511.264 cv
279.165 510.782 281.772 510.395 283.961 511.972 cv
284.475 512.326 285.442 512.101 286.182 512.101 cv
290.72 512.165 295.227 512.23 299.764 512.262 cv
300.923 512.262 301.921 512.133 303.08 511.586 cv
304.11 511.103 305.945 510.91 307.297 512.069 cv
307.779 512.455 308.809 512.583 309.389 512.359 cv
313.573 510.749 317.918 511.875 322.168 511.682 cv
325.354 511.554 328.508 511.682 331.695 511.811 cv
332.95 511.875 334.398 511.232 335.493 512.519 cv
335.654 512.712 336.458 512.745 336.652 512.551 cv
337.907 511.232 339.484 512.101 340.9 511.908 cv
342.059 511.714 342.638 512.165 342.413 513.356 cv
342.124 514.997 341.833 516.639 341.512 518.281 cv
341.222 519.793 341.576 521.274 340.932 522.915 cv
340.128 524.911 340.063 527.421 341.126 529.675 cv
341.672 530.898 341.543 531.993 341.062 533.312 cv
340.578 534.536 340.514 536.209 340.997 537.4 cv
341.576 538.912 341.64 539.943 340.965 541.424 cv
340.45 542.55 340.932 544.16 341.029 545.543 cv
341.094 546.348 341.512 547.217 341.319 547.925 cv
340.321 551.659 340.289 553.977 341.512 557.614 cv
341.737 558.257 342.091 558.902 342.509 559.416 cv
343.507 560.639 344.73 561.637 345.503 563.118 cv
346.083 564.245 347.595 565.243 348.882 565.661 cv
351.843 566.594 354.612 567.946 357.928 568.171 cv
360.92 568.397 364.011 568.783 367.068 569.008 cv
368.614 569.105 370.159 569.587 371.671 569.91 cv
372.541 567.817 374.568 570.682 375.533 569.073 cv
377.851 570.779 380.168 568.557 382.486 569.169 cv
383.709 569.491 384.964 570.006 386.188 570.037 cv
387.283 570.07 388.344 569.394 389.439 569.297 cv
390.083 569.234 390.79 569.748 391.466 569.813 cv
392.882 569.91 394.46 570.263 395.715 569.813 cv
397.228 569.265 398.355 568.976 399.771 570.006 cv
400.285 570.36 401.187 570.166 401.927 570.295 cv
404.341 570.714 406.949 569.523 409.298 571.197 cv
409.556 571.39 410.843 570.295 411.101 570.489 cv
412.903 571.872 414.834 570.811 416.218 570.295 cv
417.764 569.748 419.437 569.458 420.951 568.718 cv
423.686 567.367 426.196 565.951 428.288 563.633 cv
429.222 562.635 430.252 561.734 430.285 560.511 cv
430.285 559.255 431.217 558.322 431.186 557.324 cv
431.122 555.361 433.503 554.137 432.312 551.723 cv
431.476 550.082 432.763 547.732 431.282 545.93 cv
431.797 542.55 430.252 538.977 432.087 535.629 cv
432.473 534.954 432.505 533.699 432.12 533.054 cv
430.414 530.286 431.7 527.326 431.282 524.494 cv
433.246 523.109 430.123 520.791 432.184 519.408 cv
431.797 518.216 431.732 516.768 430.96 515.931 cv
429.802 514.676 432.12 514.354 431.314 513.42 cv
432.441 513.098 433.6 512.745 434.726 512.423 cv
434.79 513.678 435.467 514.064 436.722 513.999 cv
437.688 513.967 438.331 513.453 439.104 513.195 cv
439.973 512.906 441.197 513.13 442.065 513.549 cv
443.803 514.418 445.605 514.225 447.248 513.904 cv
451.174 513.162 451.142 513.098 455.229 514.064 cv
456.388 514.322 457.611 514.128 458.803 514.257 cv
460.38 514.451 462.085 513.646 463.502 515.094 cv
463.792 515.384 464.725 515.384 465.24 515.159 cv
466.237 514.741 467.139 514.096 468.104 513.517 cv
468.909 514.804 470.229 514.354 471.388 514.386 cv
475.153 514.451 478.952 514.418 482.717 514.547 cv
485.357 514.644 487.804 513.098 490.507 513.71 cv
491.762 513.999 493.049 513.453 494.337 514.483 cv
494.949 514.965 496.494 514.257 497.62 514.193 cv
499.037 514.128 500.582 513.807 501.869 514.225 cv
503.64 514.836 505.152 515.126 506.826 514.225 cv
507.211 514.032 507.888 514.193 508.339 514.354 cv
510.495 515.191 512.685 515.223 514.744 514.418 cv
515.678 514.064 515.678 514.386 515.678 514.997 cv
515.71 516.318 515.678 517.669 515.678 518.989 cv
515.678 519.568 515.581 520.212 515.742 520.727 cv
516.901 524.236 516.708 524.718 515.839 529.546 cv
515.259 532.539 515.419 535.726 517.448 538.945 cv
517.77 538.945 518.059 539.17 517.513 539.138 cv
517.931 539.846 517.545 540.233 517.125 540.619 cv
516.965 540.168 516.74 539.749 516.643 539.331 cv
516.032 539.492 515.742 539.749 515.742 540.039 cv
515.678 544.287 515.548 548.569 515.742 552.818 cv
515.871 555.2 516.74 557.517 516.708 559.963 cv
516.675 561.058 517.545 562.442 518.477 563.15 cv
520.12 564.47 520.151 566.981 522.694 567.786 cv
523.95 568.203 525.302 567.786 526.428 568.589 cv
527.329 569.265 528.294 569.877 529.228 570.489 cv
529.421 570.618 532.897 569.91 532.897 569.716 cv
532.93 569.297 531.127 568.847 532.833 568.428 cv
533.959 568.171 533.735 569.265 533.959 569.845 cv
534.088 570.103 534.379 570.263 534.604 570.489 cv
534.797 570.682 535.022 570.874 535.247 571.068 cv
535.375 570.843 535.569 570.618 535.666 570.36 cv
535.956 569.62 536.18 568.815 536.535 568.107 cv
536.599 567.946 537.308 567.881 537.436 568.01 cv
537.725 568.365 537.918 568.815 538.015 569.265 cv
538.047 569.426 537.597 569.652 537.404 569.877 cv
537.146 570.166 536.953 570.489 536.696 570.811 cv
537.114 570.907 537.5 571.1 537.918 571.132 cv
539.109 571.164 540.333 571.1 541.524 571.197 cv
543.004 571.293 544.163 571.293 543.906 569.234 cv
543.777 568.236 544.839 568.621 545.676 568.171 cv
545.837 568.042 545.998 567.881 545.934 568.171 cv
546.288 567.849 546.48 568.01 546.48 568.042 cv
546.352 568.236 546.191 568.397 546.062 568.557 cv
546.191 569.04 546.48 569.362 546.834 569.426 cv
547.253 569.458 547.736 569.04 548.186 568.847 cv
548.09 569.62 548.123 570.456 547.897 571.229 cv
547.8 571.518 547.125 571.648 546.738 571.84 cv
547.286 571.937 547.994 572.291 548.412 572.098 cv
550.761 571.036 553.014 570.714 555.429 572.195 cv
555.976 572.517 556.942 572.388 557.649 572.259 cv
563.926 571.132 564.86 571.132 570.686 572.419 cv
571.555 572.613 572.488 572.453 573.421 572.485 cv
578.862 572.549 584.301 572.677 589.772 572.645 cv
591.768 572.613 593.764 572.13 595.727 571.84 cv
596.017 571.808 596.307 571.68 596.468 571.487 cv
599.686 568.236 603.356 565.467 604.868 560.768 cv
605.705 558.193 606.156 555.457 607.347 552.947 cv
607.797 552.045 606.993 551.112 606.704 550.21 cv
606.317 548.955 604.612 547.796 606.221 545.93 cv
607.573 544.32 605.641 542.099 605.77 540.265 cv
605.931 538.366 606.639 536.724 606.156 534.6 cv
605.223 530.512 605.159 526.263 606.188 522.143 cv
606.381 521.37 606.542 520.373 606.188 519.761 cv
605.287 518.216 605.48 516.768 606.027 515.255 cv
606.156 514.869 606.542 514.515 606.51 514.128 cv
606.478 513.291 605.834 512.133 606.188 511.651 cv
607.25 510.202 609.246 510.202 610.855 509.976 cv
613.27 509.655 615.813 510.202 617.872 508.334 cv
618.193 508.013 619.127 508.431 619.61 508.174 cv
620.898 507.562 621.445 510.137 622.733 508.85 cv
623.891 507.723 625.373 508.657 626.563 508.271 cv
627.657 507.916 628.559 507.144 629.846 507.434 cv
630.2 507.497 630.876 507.337 631.005 507.079 cv
632.196 504.859 634.674 505.567 636.38 505.277 cv
640.661 504.536 640.725 504.859 643.525 503.056 cv
643.977 502.766 644.523 502.316 645.006 502.348 cv
648.225 502.606 650.639 500.642 653.44 499.805 cv
656.239 498.936 659.168 498.357 662.033 497.617 cv
662.065 497.617 662.033 497.327 661.808 497.198 cv
661.486 497.005 661.357 496.844 661.197 496.651 cv
661.39 496.619 661.711 496.457 661.744 496.522 cv
661.904 496.715 661.937 496.941 662.033 497.165 cv
665.059 496.941 666.99 495.041 668.986 493.432 cv
670.692 492.08 672.623 490.953 674.49 490.439 cv
676.1 489.988 677.193 489.344 678.126 488.283 cv
679.801 486.383 681.346 484.324 682.44 482.489 cv
681.346 482.07 680.766 481.652 680.38 481.104 cv
680.218 480.815 680.218 480.203 680.444 479.978 cv
680.637 479.72 681.475 479.592 681.571 479.688 cv
682.311 480.815 682.826 480.331 683.502 479.656 cv
683.759 479.367 684.307 479.367 684.726 479.205 cv
684.661 479.623 684.726 480.107 684.5 480.364 cv
684.049 480.944 683.502 481.426 682.955 481.909 cv
682.729 482.134 682.44 482.295 682.44 482.489 cv
683.631 482.134 684.661 482.134 684.887 481.716 cv
686.334 479.141 688.717 477.435 690.68 475.311 cv
691.806 474.087 692.966 472.768 693.802 471.352 cv
694.156 470.74 694.091 470.257 694.993 469.935 cv
695.733 469.678 696.12 468.519 696.699 467.779 cv
697.632 466.556 698.469 465.203 699.564 464.174 cv
701.753 462.114 702.461 459.443 702.911 456.739 cv
703.104 455.483 703.201 454.26 703.909 453.166 cv
704.014 453.008 704.1 452.849 704.19 452.691 cv
696.18 455.567 687.876 458.238 679.158 460.661 cv
674.892 461.936 670.517 462.956 666.282 463.943 cv
cp
f
437.78 197.579 mo
439.373 191.839 439.456 185.687 438.018 179.905 cv
438.025 179.803 438.032 179.702 438.04 179.6 cv
438.553 172.425 439.59 165.095 439.523 157.911 cv
439.523 156.109 438.042 154.467 438.653 153.019 cv
439.265 151.666 440.971 150.766 442.161 149.671 cv
442.516 149.349 442.773 148.899 443.063 148.545 cv
443.159 148.449 443.224 148.384 443.289 148.352 cv
443.481 148.545 li
443.481 149.124 443.642 149.413 443.771 149.381 cv
444.575 149.189 445.477 149.028 446.089 148.545 cv
447.569 147.418 448.856 147.322 450.53 148.255 cv
451.335 148.705 452.719 148.931 453.459 148.545 cv
454.779 147.869 455.358 146.101 457.478 147.673 cv
460.146 149.649 466.053 148.27 469.065 148.229 cv
474.347 148.159 479.631 148.236 484.908 148.46 cv
495.462 148.91 505.991 149.95 516.43 151.576 cv
524.227 152.79 532.002 154.339 539.458 156.924 cv
541.084 157.488 542.696 158.102 544.25 158.841 cv
553.112 163.058 559.813 171.557 561.845 181.158 cv
562.891 186.101 562.756 191.208 562.616 196.26 cv
562.307 207.427 561.772 219.308 555.378 228.468 cv
547.521 239.726 532.929 243.883 519.339 245.835 cv
500.806 248.496 443.606 245.656 443.965 244.793 cv
440.89 243.979 439.576 242.56 438.556 239.506 cv
438.343 238.868 438.62 238.009 437.875 238.374 cv
437.699 236.727 438.261 236.226 437.605 234.633 cv
439.838 233.794 439.873 229.962 437.656 229.083 cv
440.528 222.681 435.876 214.449 439.527 208.457 cv
438.283 208.611 437.277 207.25 437.307 205.996 cv
437.337 204.744 438.068 203.628 438.774 202.591 cv
436.982 201.986 437.274 199.402 437.78 197.579 cv
cp
408.043 362.169 mo
419.355 364.381 429.411 366.177 438.722 367.659 cv
438.785 359.22 438.941 353.328 439.329 352.966 cv
439.426 352.903 438.814 352.098 438.492 351.582 cv
439.361 351.421 439.973 351.292 440.52 351.036 cv
443.675 349.555 446.925 348.814 450.466 349.072 cv
451.933 349.197 453.492 349.366 454.691 348.552 cv
455.315 348.127 461.906 349.234 462.928 349.219 cv
466.776 349.161 470.623 349.066 474.471 349.02 cv
482.488 348.926 490.51 348.936 498.524 349.22 cv
514.464 349.786 530.433 351.418 545.918 355.366 cv
551.609 356.817 557.287 358.605 562.306 361.654 cv
564.574 363.031 566.691 364.658 568.606 366.495 cv
570.274 368.095 571.732 369.855 573.049 371.706 cv
573.187 371.693 573.323 371.684 573.461 371.669 cv
579.421 371.078 585.548 370.374 591.671 369.578 cv
609.768 367.127 629.14 363.175 650.829 357.504 cv
663.835 353.924 675.394 350.165 685.708 346.154 cv
684.118 343.596 682.039 341.351 680.251 338.933 cv
679.543 337.999 679.447 337.195 679.222 336.197 cv
679.093 335.618 678.063 335.263 677.516 334.748 cv
677.379 334.621 677.247 334.496 677.112 334.368 cv
676.392 332.746 675.368 331.248 674.022 329.949 cv
674.011 329.908 673.982 329.865 673.975 329.824 cv
673.686 328.279 672.559 327.442 671.56 326.895 cv
670.531 326.316 669.791 325.961 669.211 324.771 cv
668.729 323.741 667.44 323.033 666.475 322.26 cv
665.612 321.565 664.96 321.557 664.474 322.013 cv
663.896 321.382 663.313 320.747 662.728 320.106 cv
662.74 320.052 662.777 319.988 662.772 319.939 cv
662.591 317.998 659.387 315.327 656.818 314.439 cv
655.72 313.578 652.397 310.878 650.609 309.637 cv
649.638 307.587 646.968 303.222 646.218 302.492 cv
645.81 302.096 645.525 301.812 645.199 301.491 cv
645.63 301.002 646.7 300.655 646.551 299.89 cv
646.455 299.31 645.843 298.505 646.037 298.216 cv
646.391 297.701 647.323 297.668 647.807 297.218 cv
648.128 296.896 648.386 296.091 648.225 295.77 cv
647.935 295.319 647.227 295.094 646.712 294.772 cv
647.452 294.675 648.225 294.74 648.836 294.45 cv
653.214 292.551 657.398 290.426 659.3 285.738 cv
659.354 285.687 659.406 285.636 659.459 285.584 cv
660.667 284.918 661.728 284.142 662.652 283.279 cv
665.333 282.001 667.748 280.429 669.211 277.584 cv
669.791 276.457 671.078 275.717 672.044 274.784 cv
673.686 273.142 675.101 271.371 676.582 269.633 cv
680.958 264.452 683.921 258.593 686.817 252.607 cv
687.396 251.383 687.751 249.58 689.908 249.419 cv
690.358 249.387 690.873 248.132 691.13 247.392 cv
692.386 243.626 693.577 239.828 694.8 236.062 cv
695.122 235.033 695.315 233.777 696.023 233.069 cv
697.536 231.492 697.921 230.011 697.697 227.758 cv
697.503 225.73 698.791 223.574 699.595 221.545 cv
700.529 219.292 700.111 218.198 697.697 217.78 cv
696.506 217.555 695.283 217.747 694.091 217.683 cv
693.222 217.651 692.547 216.202 693.029 215.43 cv
693.127 215.301 693.448 215.301 693.641 215.237 cv
694.027 218.037 695.443 216.106 696.603 216.041 cv
697.471 216.009 698.373 216.814 699.242 217.233 cv
701.076 218.102 701.269 218.07 701.109 216.041 cv
701.012 214.529 700.561 213.048 700.015 211.536 cv
699.692 211.374 699.564 211.181 699.435 211.021 cv
699.627 210.955 699.918 210.827 699.982 210.86 cv
700.111 211.053 700.175 211.278 700.24 211.503 cv
701.43 211.181 702.171 210.602 702.042 209.443 cv
701.85 207.77 702.685 205.967 701.527 204.358 cv
702.396 200.785 700.497 197.277 701.109 193.703 cv
701.333 192.32 700.916 190.839 700.755 189.423 cv
700.755 189.198 700.497 189.004 700.369 188.779 cv
703.748 186.848 700.465 184.176 701.044 181.827 cv
701.592 179.477 701.688 176.708 701.012 174.359 cv
700.369 172.202 700.336 170.174 700.24 168.05 cv
700.24 167.761 700.369 167.374 700.24 167.149 cv
697.697 163.448 698.727 158.941 697.375 154.982 cv
696.474 152.44 696.056 149.832 695.701 147.225 cv
695.604 146.517 695.83 145.551 695.443 145.133 cv
693.255 142.719 693.029 139.564 691.646 136.861 cv
690.648 134.898 689.586 132.966 688.974 130.778 cv
688.556 129.265 688.169 127.494 686.528 126.4 cv
685.788 125.885 685.144 124.855 684.951 123.986 cv
683.921 119.351 680.187 116.39 677.805 112.591 cv
677.548 112.205 676.839 112.044 676.356 111.786 cv
673.717 110.37 673.717 110.37 672.044 108.439 cv
671.851 108.858 671.625 109.083 671.4 109.244 cv
670.788 109.695 670.145 110.145 669.5 110.596 cv
669.436 110.467 669.308 110.338 669.308 110.209 cv
669.34 109.051 670.048 108.439 671.142 108.182 cv
671.4 108.118 671.689 108.182 671.947 108.214 cv
671.657 107.57 671.464 106.991 671.078 106.863 cv
668.021 105.736 665.895 103.354 663.225 101.744 cv
662.516 101.293 661.808 100.585 661.035 100.521 cv
658.396 100.232 656.368 99.0082 654.791 96.9808 cv
654.565 96.6908 653.986 96.4339 653.664 96.4974 cv
650.961 97.0775 648.965 95.307 646.841 94.3412 cv
645.103 93.5687 643.59 92.6673 641.563 92.7318 cv
640.371 92.764 639.02 92.3461 637.893 91.7982 cv
632.776 89.3841 632.807 89.4164 628.591 89.0951 cv
626.756 88.9339 624.921 88.2904 623.086 88.2259 cv
621.252 88.1937 619.836 87.2923 618.227 86.7777 cv
615.587 85.9398 612.787 85.8441 610.18 87.1634 cv
610.051 87.8392 610.63 88.8695 609.375 89.3197 cv
609.182 90.0921 608.957 90.35 608.731 90.64 cv
608.635 90.2533 608.409 89.8998 608.409 89.5453 cv
608.377 89.3519 608.698 89.1273 608.86 88.9339 cv
609.053 89.1918 609.214 89.4164 609.375 89.3197 cv
609.407 88.2582 608.828 87.2279 610.18 87.1634 cv
610.019 86.5843 609.793 86.0375 609.665 85.4574 cv
609.6 85.1683 609.729 84.8461 609.761 84.5238 cv
608.989 84.4916 608.248 84.4271 607.508 84.4916 cv
605.834 84.6527 607.154 85.2328 607.315 85.7152 cv
607.443 86.0697 607.283 86.5199 607.25 86.9056 cv
606.928 86.7455 606.574 86.6166 606.285 86.4232 cv
605.094 85.4896 606.156 84.0414 605.577 83.1722 cv
604.965 82.2064 604.45 81.7562 605.352 80.597 cv
605.931 79.7923 605.512 78.3441 605.641 77.1849 cv
605.867 75.222 605.03 73.1625 606.478 71.2953 cv
606.928 70.7474 606.865 69.4281 606.51 68.7201 cv
605.159 66.0804 605.512 63.2806 605.77 60.641 cv
605.899 59.1927 603.259 57.8402 605.641 56.4564 cv
605.641 52.0472 li
605.641 50.4056 605.512 48.764 605.673 47.1546 cv
605.834 45.642 606.445 44.1615 606.51 42.6488 cv
606.542 40.974 607.057 39.2045 605.705 37.6273 cv
605.319 37.1761 605.802 36.1468 605.608 35.4711 cv
605.094 33.3461 607.411 31.7367 606.221 29.2904 cv
605.319 27.4877 605.737 25.0414 605.673 22.8851 cv
605.577 20.6644 605.544 18.4437 605.673 16.223 cv
605.77 14.0658 605.03 12.3597 603.517 10.847 cv
602.519 9.81676 601.424 8.91637 600.813 7.46813 cv
600.298 6.30895 599.139 5.08531 597.241 5.27867 cv
596.5 5.37535 595.599 4.8607 594.922 4.40953 cv
591.639 2.1566 587.905 2.41442 584.301 2.60777 cv
581.533 2.76793 578.636 1.51305 576.029 3.34703 cv
575.804 3.47692 575.224 3.0902 574.838 3.02574 cv
573.55 2.80016 572.005 2.09215 571.007 2.54332 cv
567.209 4.18395 563.314 2.76793 559.516 3.2191 cv
557.682 1.99547 555.557 2.22106 553.562 2.31774 cv
551.083 2.44664 548.669 2.96129 546.191 3.05797 cv
543.648 3.18688 541.008 2.76793 538.499 3.15465 cv
537.146 3.34703 536.085 3.37926 534.668 3.12242 cv
531.803 2.60777 528.938 3.12242 526.524 5.11754 cv
525.366 6.08336 523.918 6.98473 522.501 7.24254 cv
519.443 7.72496 518.51 9.5277 517.254 12.0707 cv
515.999 14.5804 515.581 16.8988 515.742 19.4086 cv
515.903 21.9838 514.809 24.6556 516.45 27.1019 cv
515.646 28.4857 516.643 29.8382 516.547 31.1898 cv
516.45 32.5736 516.289 34.0863 515.581 35.2132 cv
514.133 37.5951 514.679 39.8158 515.71 42.0687 cv
516.16 43.0345 517.061 43.6781 515.871 44.9984 cv
515.194 45.7709 515.71 47.5404 515.678 48.8607 cv
515.678 51.5326 515.967 54.2357 515.613 56.8431 cv
515.259 59.5462 516.74 61.8646 516.611 64.4711 cv
516.482 67.1429 516.579 69.8148 516.579 72.4535 cv
516.579 73.3548 516.933 74.8041 516.547 75.0287 cv
515.163 75.8334 516.289 77.5072 515.292 78.0863 cv
514.615 78.473 513.521 78.3441 512.652 78.2152 cv
510.817 77.9261 508.821 78.9232 507.019 77.4427 cv
506.633 77.0892 505.281 78.0863 504.315 78.1185 cv
502.224 78.2152 499.972 78.5375 498.009 77.9584 cv
495.04 77.0834 488.626 77.8402 485.06 77.5336 cv
484.334 77.4711 483.601 77.4086 482.877 77.4984 cv
481.801 77.6332 480.779 78.1009 479.695 78.1498 cv
478.813 78.1888 477.947 77.9486 477.088 77.7425 cv
471.747 76.4613 466.101 76.4681 460.761 77.763 cv
459.519 78.0648 458.28 78.4359 457.001 78.4847 cv
455.597 78.5375 454.213 78.1976 452.834 77.9252 cv
450.022 77.3705 436.949 75.1224 434.887 76.6703 cv
433.729 77.5394 432.924 76.8636 431.926 76.5736 cv
430.252 76.1234 429.77 75.2865 430.767 74.0316 cv
431.476 73.098 432.892 72.2289 432.087 71.1019 cv
430.928 69.4281 431.217 67.7543 431.347 66.0804 cv
431.443 64.4398 430.51 62.6048 432.023 61.0277 cv
432.28 60.7699 431.347 59.6107 431.314 58.8382 cv
431.186 56.7787 431.154 54.6869 431.314 52.6263 cv
431.476 50.6957 431.347 48.764 431.958 46.7367 cv
432.634 44.4505 432.409 41.7152 431.668 39.0433 cv
430.992 36.6615 431.572 33.9252 431.7 31.3832 cv
431.765 30.3851 432.441 29.2904 432.12 28.4857 cv
430.896 25.557 431.057 22.8207 432.087 19.8597 cv
432.892 17.5423 431.411 15.1605 430.896 12.8431 cv
430.317 10.1713 430.059 10.1068 427.162 7.30699 cv
426.422 6.59899 425.811 5.60094 424.909 5.18199 cv
424.072 4.79625 422.592 5.63317 422.978 3.57262 cv
423.075 3.18688 421.626 2.1566 420.79 2.0277 cv
419.534 1.83531 417.988 1.80309 416.927 2.34996 cv
415.414 3.0902 416.026 2.05992 415.832 1.54527 cv
415.414 .225939 413.289 1.99547 413.128 .0970325 cv
412.228 .0970325 li
412.646 .837267 410.585 1.09508 411.938 2.1566 cv
412.388 2.54332 412.066 3.7982 412.228 4.60289 cv
412.517 5.95445 411.712 6.27672 410.649 6.53453 cv
410.231 6.63121 409.878 7.62828 409.556 6.53453 cv
409.459 6.24449 409.781 5.47203 409.942 5.47203 cv
411.068 5.40758 411.874 5.14977 410.49 4.2484 cv
409.362 3.47692 410.49 2.47887 410.071 2.09215 cv
409.524 1.60973 408.525 1.5775 407.688 1.41637 cv
406.723 1.22301 405.726 1.06188 404.76 .933947 cv
404.117 .80504 403.151 1.22301 403.151 .0325794 cv
402.539 .000352799 401.959 .000352799 401.348 .000352799 cv
399.417 1.09508 397.968 1.73863 396.938 1.73863 cv
393.494 1.70641 390.018 1.54527 386.574 1.67418 cv
383.226 1.77086 379.912 2.38219 376.563 2.38219 cv
373.538 2.34996 370.159 2.51012 367.583 1.28746 cv
364.526 -.193007 362.337 1.31969 359.794 1.70641 cv
359.119 1.80309 358.442 2.25328 357.766 2.22106 cv
354.934 2.12438 352.069 1.83531 350.267 4.69957 cv
346.468 4.89293 345.278 8.43297 342.768 10.2679 cv
342.509 10.4613 342.477 10.9115 343.153 11.3939 cv
342.8 11.555 342.509 11.7162 342.413 11.8773 cv
342.348 11.9418 342.348 12.0384 342.348 12.1351 cv
342.768 12.0384 343.378 11.9418 344.248 11.8451 cv
343.765 11.7162 343.443 11.555 343.186 11.3939 cv
343.99 11.0726 345.213 10.847 345.599 11.0726 cv
345.824 11.1693 345.889 11.5228 344.248 11.8451 cv
345.792 12.392 345.278 12.9398 345.181 13.5834 cv
345.02 14.6127 344.441 14.7425 343.7 14.4203 cv
342.96 14.098 342.285 12.8109 342.348 12.1351 cv
341.769 12.263 341.576 12.392 341.543 12.5531 cv
341.447 13.5511 341.576 14.5804 341.48 15.5795 cv
341.383 16.7054 342.413 18.1859 344.28 17.9281 cv
344.409 17.3812 344.57 16.8021 344.892 16.3509 cv
345.02 16.1586 345.696 16.3509 346.147 16.3509 cv
346.147 16.3509 346.147 16.3509 345.181 17.6713 cv
346.565 16.3832 347.112 16.2543 347.402 16.4476 cv
347.692 16.6088 347.884 17.4457 347.82 17.4779 cv
346.855 17.9925 345.824 18.4437 344.827 18.8939 cv
344.312 20.89 344.312 22.0482 342.156 21.6947 cv
342.027 21.6625 341.447 22.7884 341.576 22.9496 cv
342.864 24.3656 342.67 25.7504 341.737 27.1986 cv
341.576 27.4242 341.447 27.7455 341.543 27.9711 cv
342.156 29.6449 341.93 31.2543 341.576 32.9925 cv
341.254 34.6976 341.222 36.5648 341.576 38.2709 cv
342.091 40.7171 342.38 43.0023 340.611 45.0951 cv
340.611 56.5531 li
342.091 57.6478 341.351 59.225 341.512 60.6087 cv
341.608 61.7035 341.672 62.7015 342.252 63.8275 cv
342.768 64.8578 342.96 66.5961 341.833 67.9476 cv
341.447 68.431 341.576 69.6537 341.93 70.265 cv
342.574 71.263 342.574 72.0033 342.059 73.0336 cv
341.705 73.7093 341.769 74.5785 341.64 75.3832 cv
342.38 75.1898 343.314 75.222 343.765 74.7709 cv
343.808 74.7318 343.841 74.7132 343.882 74.6771 cv
343.89 74.7074 343.902 74.7396 343.909 74.7709 cv
343.423 75.0697 342.798 75.4398 341.996 75.892 cv
341.427 76.2132 340.905 76.6087 340.349 76.9486 cv
339.781 76.8197 339.21 76.6634 338.647 76.5414 cv
337.521 76.3168 336.426 77.9261 335.332 76.5414 cv
333.079 76.8636 330.568 75.5755 328.604 77.8295 cv
328.283 78.2152 326.093 77.8295 325.708 77.2171 cv
324.228 74.932 322.36 76.1556 320.976 76.7025 cv
319.753 77.1849 318.949 77.3783 317.79 76.7025 cv
317.242 76.3802 316.374 76.5736 315.697 76.3168 cv
313.927 75.6078 312.607 78.3119 310.804 76.8314 cv
309.324 75.64 307.619 76.4125 306.041 76.2845 cv
304.239 76.1234 302.372 75.9623 300.633 76.2523 cv
298.863 76.5736 297.351 75.3832 295.452 76.0267 cv
293.681 76.6058 291.557 76.0267 289.594 76.1234 cv
288.337 76.1556 287.147 76.1556 285.796 76.7025 cv
284.186 77.3461 281.934 77.057 280.163 76.5091 cv
279.165 76.1879 278.231 76.0267 277.233 75.9945 cv
275.721 75.8978 274.176 75.7054 272.728 75.9945 cv
271.311 76.2845 270.281 75.0931 268.801 75.5755 cv
267.48 76.0267 265.904 75.8011 264.423 75.8334 cv
262.91 75.8656 261.365 75.64 259.885 75.8334 cv
256.376 76.3168 252.804 76.2523 249.521 78.2796 cv
245.303 80.8871 243.5 82.142 241.859 84.7494 cv
241.184 85.8119 240.862 86.2943 242.471 86.4554 cv
242.6 86.4554 242.697 87.1957 242.793 87.5824 cv
242.279 87.6781 241.763 87.8714 241.28 87.807 cv
240.862 87.7425 240.314 86.6488 240.121 87.7103 cv
239.638 90.5433 238.029 93.3431 239.896 96.3685 cv
240.347 97.0775 239.993 98.3002 239.864 99.2982 cv
239.735 100.103 239.542 100.908 239.156 101.648 cv
238.094 103.675 241.924 104.899 240.025 107.184 cv
238.544 108.987 238.77 111.143 239.961 113.139 cv
238.963 114.007 239.188 115.166 239.188 116.261 cv
239.156 118.611 239.864 120.349 241.956 122.152 cv
243.115 123.149 242.729 124.276 242.761 125.369 cv
242.761 125.627 242.182 126.142 241.956 126.077 cv
240.153 125.756 240.411 126.85 239.961 128.041 cv
239.092 130.294 238.867 132.194 239.929 134.511 cv
240.476 135.734 240.057 137.375 240.09 138.857 cv
237.772 139.629 240.508 141.334 239.349 142.751 cv
238.512 143.717 239.188 145.873 239.188 147.483 cv
239.156 148.899 239.67 150.026 241.087 150.476 cv
241.216 150.347 241.313 150.315 241.248 150.54 cv
241.635 150.218 241.827 150.379 241.795 150.411 cv
241.699 150.605 241.538 150.766 241.376 150.927 cv
241.28 150.829 li
241.506 155.915 244.016 159.585 247.75 162.353 cv
249.133 163.383 251.162 163.609 252.932 164.027 cv
254.87 164.503 256.838 164.903 258.654 163.644 cv
258.688 163.654 258.721 163.666 258.755 163.676 cv
259.646 166.493 262.09 164.9 263.811 165.283 cv
263.973 165.346 264.358 164.767 264.478 164.37 cv
265.089 164.351 265.698 164.332 266.334 164.254 cv
266.322 164.974 266.654 165.334 267.738 165.443 cv
270.86 165.797 273.789 164.67 276.847 164.51 cv
277.556 163.158 278.199 164.381 278.811 164.638 cv
281.418 165.701 284.218 165.507 287.276 165.121 cv
290.752 164.702 294.325 165.025 297.866 165.121 cv
298.703 165.154 299.508 165.636 300.344 165.701 cv
303.435 165.894 303.499 165.862 303.435 168.694 cv
303.402 170.658 302.797 186.889 302.828 189.12 cv
303.096 208.704 302.469 272.835 302.399 329.647 cv
316.384 335.506 331.464 341.023 347.776 346.232 cv
366.623 352.005 387.09 357.973 408.043 362.169 cv
cp
f
827.773 259.615 mo
827.112 256.131 826.083 252.638 825.064 249.206 cv
824.009 245.789 822.668 242.51 821.383 239.264 cv
815.811 226.438 808.134 215.453 799.764 206.004 cv
795.445 201.366 791.05 196.963 786.442 192.952 cv
781.827 188.925 777.035 185.246 772.213 181.732 cv
767.275 178.334 762.4 175.007 757.271 172.053 cv
754.763 170.513 752.173 169.094 749.589 167.681 cv
746.848 166.049 744.054 165.273 741.47 163.921 cv
741.431 163.9 741.38 163.898 741.339 163.921 cv
741.271 163.958 741.247 164.042 741.285 164.109 cv
742.728 166.72 744.654 169.12 745.922 171.473 cv
750.283 178.999 li
753.157 184.007 755.991 188.93 758.631 193.898 cv
761.301 198.824 763.843 203.737 766.086 208.675 cv
768.477 213.525 770.442 218.465 772.227 223.316 cv
775.901 232.946 777.99 242.554 778.769 251.402 cv
779.016 255.88 779.049 260.03 778.584 264.285 cv
778.2 268.52 777.436 272.722 776.377 276.833 cv
772.275 293.283 763.228 308.673 751.95 320.734 cv
746.428 326.544 739.666 332.261 732.553 337.296 cv
725.372 342.331 717.585 346.862 709.261 350.936 cv
692.62 359.094 673.986 365.449 654.321 370.862 cv
634.414 376.067 614.06 380.478 593.456 383.267 cv
572.829 385.953 552 387.645 531.052 387.993 cv
510.099 388.217 489.082 387.27 468.063 385.407 cv
447.049 383.358 426.176 379.782 405.332 375.706 cv
384.489 371.531 364.006 365.644 343.579 359.383 cv
302.777 346.355 263.522 329.762 229.792 306.082 cv
221.318 300.208 213.331 293.761 205.767 286.87 cv
198.156 280.003 190.877 272.759 184.602 264.954 cv
178.261 257.161 172.643 248.944 168.059 240.271 cv
163.59 231.575 160.166 222.433 158.34 212.93 cv
156.358 203.397 156.059 193.593 157.457 183.748 cv
158.813 173.887 162.159 164.095 166.854 154.624 cv
176.369 135.654 191.464 118.61 208.274 103.302 cv
198.029 108.299 188.059 114.106 178.692 121.044 cv
169.3 127.945 160.492 135.983 152.8 145.389 cv
145.083 154.756 138.708 165.669 134.331 177.662 cv
129.944 189.652 127.968 202.711 128.106 215.639 cv
128.023 228.666 130.62 241.557 134.447 253.823 cv
138.402 266.053 143.752 277.711 150.216 288.507 cv
156.587 299.418 163.989 309.428 171.834 318.994 cv
179.756 328.524 188.373 337.453 197.472 345.749 cv
206.57 354.049 216.039 361.925 225.968 369.046 cv
235.886 376.166 246.084 382.797 256.472 389.002 cv
266.836 395.269 277.475 400.871 288.227 406.137 cv
293.593 408.803 299.002 411.292 304.42 413.79 cv
320.81 420.882 li
326.25 423.331 331.858 425.34 337.409 427.526 cv
345.779 430.692 li
348.574 431.733 351.42 432.627 354.242 433.601 cv
359.907 435.477 365.536 437.496 371.25 439.245 cv
388.451 444.348 li
411.5 450.837 435.039 455.687 458.822 459.354 cv
482.638 462.859 506.729 464.825 530.929 465.375 cv
555.141 465.633 579.434 464.386 603.609 461.502 cv
621.71 458.986 li
627.734 458.067 633.71 456.786 639.711 455.693 cv
642.704 455.096 645.716 454.612 648.692 453.917 cv
657.614 451.812 li
663.563 450.346 669.502 449.138 675.459 447.36 cv
699.267 440.742 723.369 431.557 746.304 417.886 cv
757.743 411.061 768.861 403.068 779.074 393.703 cv
781.59 391.295 784.159 388.995 786.582 386.48 cv
788.958 383.901 791.417 381.459 793.666 378.752 cv
798.167 373.522 802.767 367.76 806.626 361.678 cv
810.568 355.656 814.073 349.408 817.026 342.92 cv
820.099 336.501 822.527 329.793 824.59 323.009 cv
826.695 316.236 828.047 309.215 829.137 302.213 cv
830 295.13 830.55 288.036 830.294 280.877 cv
830.034 273.74 829.349 266.608 827.773 259.615 cv
cp
.721569 .666667 .427451 rgb
f
121.887 912.624 mo
136.429 912.624 li
134.395 886.287 li
132.971 889.643 li
121.887 912.624 li
cp
131.547 930.319 mo
132.971 925.641 li
135.75 925.099 137.275 924.557 137.547 924.014 cv
137.479 923.675 137.428 923.37 137.395 923.099 cv
137.36 922.828 137.344 922.59 137.344 922.387 cv
137.344 921.472 li
137.344 920.862 li
137.344 920.388 137.309 920.083 137.242 919.947 cv
118.43 919.947 li
118.293 920.083 118.208 920.251 118.175 920.454 cv
118.141 920.659 117.988 920.93 117.718 921.269 cv
117.819 921.269 li
116.396 924.014 li
116.396 924.421 117.819 924.964 120.667 925.641 cv
119.65 930.319 li
97.9902 930.319 li
99.0068 925.539 li
102.531 924.863 104.463 924.116 104.803 923.302 cv
135.92 861.882 li
140.395 861.882 li
145.275 923.302 li
145.275 923.981 146.902 924.726 150.157 925.539 cv
149.14 930.319 li
131.547 930.319 li
cp
.188235 .184314 .239216 rgb
f
196.221 924.217 mo
193.577 926.32 190.864 927.964 188.085 929.15 cv
185.305 930.334 182.289 930.929 179.035 930.929 cv
177.068 930.929 175.147 930.64 173.271 930.065 cv
171.393 929.49 169.702 928.625 168.197 927.471 cv
166.692 926.32 165.496 924.913 164.606 923.251 cv
163.717 921.591 163.273 919.676 163.273 917.506 cv
163.273 915.948 163.41 914.795 163.683 914.048 cv
171.275 878.762 li
173.6 867.577 181.746 861.984 195.712 861.984 cv
209.033 861.984 li
204.661 877.542 li
200.491 877.542 li
200.626 876.255 200.728 875.12 200.796 874.135 cv
200.863 873.154 200.898 872.289 200.898 871.542 cv
200.898 869.781 200.695 868.899 200.288 868.899 cv
194.085 868.899 li
187.644 868.899 183.475 873.279 181.577 882.04 cv
175.476 910.872 li
175.069 912.842 174.866 914.539 174.866 915.966 cv
174.866 921.332 177.441 924.014 182.594 924.014 cv
186.932 923.946 191.203 922.387 195.407 919.336 cv
196.221 924.217 li
cp
f
245.946 924.217 mo
243.302 926.32 240.589 927.964 237.811 929.15 cv
235.03 930.334 232.014 930.929 228.76 930.929 cv
226.793 930.929 224.872 930.64 222.996 930.065 cv
221.118 929.49 219.427 928.625 217.922 927.471 cv
216.417 926.32 215.221 924.913 214.332 923.251 cv
213.442 921.591 212.999 919.676 212.999 917.506 cv
212.999 915.948 213.135 914.795 213.408 914.048 cv
221 878.762 li
223.325 867.577 231.471 861.984 245.437 861.984 cv
258.758 861.984 li
254.386 877.542 li
250.216 877.542 li
250.352 876.255 250.453 875.12 250.521 874.135 cv
250.588 873.154 250.624 872.289 250.624 871.542 cv
250.624 869.781 250.42 868.899 250.013 868.899 cv
243.81 868.899 li
237.369 868.899 233.2 873.279 231.302 882.04 cv
225.201 910.872 li
224.794 912.842 224.591 914.539 224.591 915.966 cv
224.591 921.332 227.167 924.014 232.319 924.014 cv
236.657 923.946 240.928 922.387 245.132 919.336 cv
245.946 924.217 li
cp
f
288.451 868.899 mo
283.367 892.694 li
298.925 892.694 li
296.281 899.609 li
281.841 899.609 li
276.859 923.404 li
289.367 923.404 li
289.977 923.404 291.23 920.523 293.129 914.76 cv
297.298 914.76 li
295.061 930.319 li
259.165 930.319 li
260.182 925.743 li
263.706 925.066 265.571 924.252 265.774 923.302 cv
277.266 868.797 li
277.266 868.052 275.773 867.306 272.791 866.56 cv
273.707 861.984 li
309.603 861.984 li
305.23 877.542 li
301.061 877.542 li
301.196 876.187 301.297 874.984 301.366 873.932 cv
301.433 872.882 301.467 871.984 301.467 871.238 cv
301.467 869.679 301.297 868.899 300.959 868.899 cv
288.451 868.899 li
cp
f
348.65 880.031 mo
348.786 879.35 348.887 878.686 348.956 878.039 cv
349.022 877.393 349.057 876.797 349.057 876.252 cv
349.057 874.005 348.48 872.219 347.329 870.891 cv
346.175 869.563 344.379 868.899 341.939 868.899 cv
341.599 868.899 341.243 868.916 340.871 868.95 cv
340.498 868.985 340.142 869.036 339.803 869.104 cv
334.821 892.491 li
342.346 892.287 346.922 888.406 348.549 880.847 cv
348.65 880.031 li
cp
359.531 880.898 mo
356.887 893.101 348.175 899.27 333.397 899.406 cv
328.211 923.709 li
328.211 924.252 329.701 924.896 332.685 925.641 cv
331.668 930.319 li
310.619 930.319 li
311.636 925.539 li
315.228 924.929 317.059 924.286 317.127 923.607 cv
328.516 870.017 li
328.516 869.272 326.991 868.527 323.94 867.78 cv
325.16 861.984 li
342.549 861.984 li
354.277 861.984 360.141 866.493 360.141 875.508 cv
360.141 877.203 359.938 879 359.531 880.898 cv
cp
f
409.765 877.441 mo
405.494 877.441 li
405.629 876.101 405.73 874.928 405.799 873.924 cv
405.866 872.92 405.9 872.048 405.9 871.311 cv
405.9 869.703 405.697 868.899 405.291 868.899 cv
399.291 868.899 li
387.597 923.709 li
387.597 924.252 389.087 924.896 392.071 925.641 cv
391.054 930.319 li
370.004 930.319 li
371.021 925.539 li
374.614 924.929 376.444 924.286 376.513 923.607 cv
388.207 868.899 li
382.207 868.899 li
381.46 868.899 380.173 871.745 378.343 877.441 cv
374.174 877.441 li
376.309 861.984 li
414.036 861.984 li
409.765 877.441 li
cp
f
442.915 868.899 mo
437.83 892.694 li
453.389 892.694 li
450.745 899.609 li
436.305 899.609 li
431.322 923.404 li
443.83 923.404 li
444.44 923.404 445.694 920.523 447.592 914.76 cv
451.762 914.76 li
449.524 930.319 li
413.628 930.319 li
414.645 925.743 li
418.169 925.066 420.035 924.252 420.238 923.302 cv
431.729 868.797 li
431.729 868.052 430.237 867.306 427.254 866.56 cv
428.17 861.984 li
464.066 861.984 li
459.693 877.542 li
455.524 877.542 li
455.659 876.187 455.761 874.984 455.829 873.932 cv
455.896 872.882 455.931 871.984 455.931 871.238 cv
455.931 869.679 455.761 868.899 455.422 868.899 cv
442.915 868.899 li
cp
f
502.708 882.016 mo
503.114 880.186 503.318 878.526 503.318 877.034 cv
503.318 871.814 500.74 869.203 495.589 869.203 cv
495.249 869.203 494.995 869.221 494.827 869.254 cv
494.657 869.289 494.436 869.34 494.166 869.407 cv
482.675 923.099 li
482.742 923.167 482.98 923.201 483.387 923.201 cv
484.2 923.201 li
490.708 923.201 494.877 918.896 496.708 910.286 cv
502.708 882.016 li
cp
507.588 911.506 mo
506.231 918.082 503.725 922.862 500.063 925.844 cv
496.403 928.828 491.487 930.319 485.319 930.319 cv
464.981 930.319 li
465.998 925.641 li
469.522 924.964 471.353 924.286 471.489 923.607 cv
483.082 869.203 li
483.082 868.187 481.556 867.373 478.505 866.763 cv
479.522 861.984 li
497.115 861.984 li
508.842 861.984 514.707 866.424 514.707 875.305 cv
514.707 876.932 514.503 878.762 514.097 880.796 cv
507.588 911.506 li
cp
f
581.426 930.319 mo
582.443 925.641 li
585.967 924.964 587.797 924.286 587.934 923.607 cv
593.019 899.609 li
579.901 899.609 li
574.816 923.709 li
574.68 924.252 576.273 924.896 579.596 925.641 cv
578.579 930.319 li
557.224 930.319 li
558.241 925.641 li
561.765 924.964 563.596 924.286 563.732 923.607 cv
575.426 868.593 li
575.426 867.984 573.866 867.34 570.749 866.661 cv
571.766 861.984 li
593.121 861.984 li
592.104 866.661 li
588.509 867.409 586.646 868.085 586.511 868.696 cv
581.426 892.694 li
594.544 892.694 li
599.628 868.593 li
599.628 867.984 598.068 867.34 594.951 866.661 cv
595.968 861.984 li
617.221 861.984 li
616.203 866.661 li
612.61 867.409 610.779 868.085 610.712 868.696 cv
599.019 923.709 li
598.882 924.252 600.442 924.896 603.696 925.641 cv
602.679 930.319 li
581.426 930.319 li
cp
f
646.912 868.899 mo
641.828 892.694 li
657.387 892.694 li
654.742 899.609 li
640.303 899.609 li
635.32 923.404 li
647.828 923.404 li
648.438 923.404 649.691 920.523 651.59 914.76 cv
655.76 914.76 li
653.521 930.319 li
617.625 930.319 li
618.643 925.743 li
622.166 925.066 624.031 924.252 624.236 923.302 cv
635.727 868.797 li
635.727 868.052 634.234 867.306 631.252 866.56 cv
632.168 861.984 li
668.064 861.984 li
663.691 877.542 li
659.521 877.542 li
659.656 876.187 659.758 874.984 659.826 873.932 cv
659.893 872.882 659.928 871.984 659.928 871.238 cv
659.928 869.679 659.758 868.899 659.42 868.899 cv
646.912 868.899 li
cp
f
709.856 880.593 mo
709.992 879.78 710.111 879.017 710.213 878.305 cv
710.314 877.593 710.365 876.932 710.365 876.322 cv
710.365 873.881 709.789 872.188 708.637 871.238 cv
707.483 870.288 706.179 869.679 704.722 869.407 cv
703.263 869.137 701.907 869.036 700.654 869.102 cv
699.398 869.17 698.671 869 698.468 868.593 cv
693.384 892.694 li
697.553 892.694 li
703.992 892.559 708.093 888.626 709.856 880.898 cv
709.856 880.593 li
cp
707.519 930.217 mo
705.484 930.217 703.873 929.622 702.688 928.438 cv
701.501 927.252 700.908 925.641 700.908 923.607 cv
700.908 922.862 701.01 922.082 701.213 921.269 cv
703.349 911.405 li
703.483 910.456 703.604 909.625 703.705 908.913 cv
703.807 908.202 703.857 907.609 703.857 907.133 cv
703.857 902.118 701.315 899.609 696.23 899.609 cv
691.858 899.609 li
686.773 923.709 li
686.773 924.319 688.299 924.964 691.35 925.641 cv
690.333 930.319 li
669.182 930.319 li
670.198 925.539 li
673.791 924.929 675.621 924.286 675.689 923.607 cv
687.078 870.017 li
687.078 869.272 685.554 868.527 682.503 867.78 cv
683.723 861.984 li
703.857 861.984 li
715.72 861.984 721.653 866.357 721.653 875.102 cv
721.653 879.644 720.585 883.745 718.449 887.406 cv
716.314 891.067 713.416 893.914 709.755 895.948 cv
713.416 897.508 715.246 900.559 715.246 905.1 cv
715.246 906.592 715.043 908.252 714.637 910.082 cv
711.688 923.709 li
711.688 924.252 713.178 924.896 716.162 925.641 cv
715.246 930.217 li
707.519 930.217 li
cp
f
758.769 868.899 mo
753.684 892.694 li
769.242 892.694 li
766.599 899.609 li
752.158 899.609 li
747.176 923.404 li
759.684 923.404 li
760.294 923.404 761.547 920.523 763.446 914.76 cv
767.615 914.76 li
765.378 930.319 li
729.481 930.319 li
730.499 925.743 li
734.022 925.066 735.888 924.252 736.092 923.302 cv
747.582 868.797 li
747.582 868.052 746.091 867.306 743.108 866.56 cv
744.023 861.984 li
779.92 861.984 li
775.547 877.542 li
771.378 877.542 li
771.513 876.187 771.614 874.984 771.683 873.932 cv
771.749 872.882 771.784 871.984 771.784 871.238 cv
771.784 869.679 771.614 868.899 771.276 868.899 cv
758.769 868.899 li
cp
f
46.5601 721.238 mo
46.5601 782.787 li
47.4355 782.968 48.0933 783.1 48.5327 783.186 cv
48.9688 783.277 49.2769 783.318 49.4536 783.318 cv
52.6104 783.318 li
53.9253 783.318 li
70.4072 783.318 78.6523 773.281 78.6523 753.203 cv
78.6523 752.41 li
78.6523 731.628 69.5317 721.238 51.2949 721.238 cv
46.5601 721.238 li
cp
55.7666 642.849 mo
53.3091 642.849 50.2427 643.375 46.5601 644.427 cv
46.5601 703.351 li
50.5059 703.351 li
57.8711 703.178 63.5269 700.634 67.4727 695.722 cv
71.4185 690.815 73.3911 683.359 73.3911 673.363 cv
73.3911 653.022 67.9536 642.849 57.082 642.849 cv
55.7666 642.849 li
cp
0 789.105 mo
9.81934 787.177 14.731 785.422 14.731 783.844 cv
14.731 646.005 li
14.731 643.552 9.81934 640.309 0 636.273 cv
0 624.435 li
28.9355 624.435 li
34.3691 623.91 39.5439 623.646 44.4556 623.646 cv
83.0337 623.646 102.327 639.783 102.327 672.047 cv
102.327 690.112 95.0479 703.087 80.4937 710.979 cv
100.485 721.328 110.481 735.969 110.481 754.909 cv
110.481 755.698 li
110.481 770.605 106.215 781.916 97.6865 789.631 cv
89.1577 797.35 76.0996 801.205 58.5166 801.205 cv
0 801.205 li
0 789.105 li
cp
f
148.623 801.205 mo
148.623 789.105 li
158.442 787.177 163.354 785.422 163.354 783.844 cv
163.354 641.796 li
163.354 640.218 158.442 638.467 148.623 636.536 cv
148.623 624.435 li
209.914 624.435 li
209.914 636.536 li
200.09 638.467 195.183 640.218 195.183 641.796 cv
195.183 784.107 li
195.183 785.513 200.09 787.177 209.914 789.105 cv
209.914 801.205 li
148.623 801.205 li
cp
f
352.483 664.419 mo
340.383 664.419 li
338.628 649.688 336.7 642.323 334.596 642.323 cv
317.235 642.323 li
317.235 783.844 li
317.235 785.422 321.879 787.177 331.176 789.105 cv
331.176 801.205 li
270.675 801.205 li
270.675 788.842 li
280.494 787.264 285.406 785.599 285.406 783.844 cv
285.406 642.323 li
268.044 642.323 li
265.94 642.323 264.008 649.688 262.257 664.419 cv
250.157 664.419 li
247 624.435 li
355.64 624.435 li
352.483 664.419 li
cp
f
494.793 785.673 mo
488.652 791.033 481.858 795.221 474.407 798.246 cv
466.951 801.271 458.665 802.784 449.548 802.784 cv
443.058 802.784 436.614 801.818 430.214 799.89 cv
423.811 797.962 418.023 795.156 412.853 791.472 cv
407.678 787.789 403.469 783.232 400.226 777.794 cv
396.979 772.36 395.36 766.133 395.36 759.118 cv
395.36 667.838 li
395.36 638.903 415.352 624.435 455.335 624.435 cv
493.741 624.435 li
490.584 664.682 li
478.484 664.682 li
476.729 649.779 474.801 642.323 472.697 642.323 cv
454.809 642.323 li
436.396 642.323 427.189 653.655 427.189 676.318 cv
427.189 750.901 li
427.189 773.565 436.568 784.896 455.335 784.896 cv
467.962 784.547 479.359 780.601 489.532 773.059 cv
494.793 785.673 li
cp
f
621.847 674.941 mo
621.847 663.367 619.742 654.818 615.533 649.293 cv
611.324 643.77 604.485 641.007 595.015 641.007 cv
577.128 641.007 568.184 652.319 568.184 674.941 cv
568.184 750.7 li
568.184 773.322 577.128 784.633 595.015 784.633 cv
612.902 784.633 621.847 773.322 621.847 750.7 cv
621.847 674.941 li
cp
653.676 759.118 mo
653.676 788.053 634.473 802.521 596.067 802.521 cv
595.015 802.521 li
555.907 802.521 536.355 788.053 536.355 759.118 cv
536.355 666.524 li
536.355 637.588 555.907 623.12 595.015 623.12 cv
596.067 623.12 li
634.473 623.12 653.676 637.588 653.676 666.524 cv
653.676 759.118 li
cp
f
694.182 801.205 mo
694.182 789.105 li
704.001 787.177 708.913 785.422 708.913 783.844 cv
708.913 641.796 li
708.913 640.218 704.001 638.467 694.182 636.536 cv
694.182 624.435 li
755.473 624.435 li
755.473 636.536 li
745.649 638.467 740.742 640.218 740.742 641.796 cv
740.742 784.107 li
740.742 785.513 745.649 787.177 755.473 789.105 cv
755.473 801.205 li
694.182 801.205 li
cp
f
921.717 636.009 mo
911.894 637.942 906.986 640.132 906.986 642.586 cv
906.986 814.884 li
828.86 693.355 li
828.86 783.844 li
828.86 785.422 833.505 787.177 842.802 789.105 cv
842.802 801.205 li
793.874 801.205 li
793.874 788.842 li
803.693 787.264 808.605 785.599 808.605 783.844 cv
808.605 642.586 li
808.605 640.132 803.693 637.942 793.874 636.009 cv
793.874 624.172 li
826.229 624.172 li
886.731 719.133 li
886.731 624.172 li
921.717 624.172 li
921.717 636.009 li
cp
f
91.7388 833.023 mo
71.9175 833.023 li
68.2681 833.023 65.3101 830.066 65.3101 826.416 cv
65.3101 822.767 68.2681 819.809 71.9175 819.809 cv
91.7388 819.809 li
95.3882 819.809 98.3457 822.767 98.3457 826.416 cv
98.3457 830.066 95.3882 833.023 91.7388 833.023 cv
cp
f
155.176 833.023 mo
138.627 833.023 li
134.978 833.023 132.02 830.066 132.02 826.416 cv
132.02 822.767 134.978 819.809 138.627 819.809 cv
155.176 819.809 li
158.825 819.809 161.783 822.767 161.783 826.416 cv
161.783 830.066 158.825 833.023 155.176 833.023 cv
cp
f
251.712 833.023 mo
210.339 833.023 li
206.689 833.023 203.732 830.066 203.732 826.416 cv
203.732 822.767 206.689 819.809 210.339 819.809 cv
251.712 819.809 li
255.361 819.809 258.319 822.767 258.319 826.416 cv
258.319 830.066 255.361 833.023 251.712 833.023 cv
cp
315.149 833.023 mo
298.601 833.023 li
294.951 833.023 291.994 830.066 291.994 826.416 cv
291.994 822.767 294.951 819.809 298.601 819.809 cv
315.149 819.809 li
318.799 819.809 321.756 822.767 321.756 826.416 cv
321.756 830.066 318.799 833.023 315.149 833.023 cv
cp
411.686 833.023 mo
370.313 833.023 li
366.663 833.023 363.705 830.066 363.705 826.416 cv
363.705 822.767 366.663 819.809 370.313 819.809 cv
411.686 819.809 li
415.335 819.809 418.292 822.767 418.292 826.416 cv
418.292 830.066 415.335 833.023 411.686 833.023 cv
cp
475.123 833.023 mo
458.574 833.023 li
454.925 833.023 451.967 830.066 451.967 826.416 cv
451.967 822.767 454.925 819.809 458.574 819.809 cv
475.123 819.809 li
478.772 819.809 481.73 822.767 481.73 826.416 cv
481.73 830.066 478.772 833.023 475.123 833.023 cv
cp
571.659 833.023 mo
530.287 833.023 li
526.638 833.023 523.68 830.066 523.68 826.416 cv
523.68 822.767 526.638 819.809 530.287 819.809 cv
571.659 819.809 li
575.308 819.809 578.266 822.767 578.266 826.416 cv
578.266 830.066 575.308 833.023 571.659 833.023 cv
cp
635.096 833.023 mo
618.547 833.023 li
614.898 833.023 611.94 830.066 611.94 826.416 cv
611.94 822.767 614.898 819.809 618.547 819.809 cv
635.096 819.809 li
638.746 819.809 641.703 822.767 641.703 826.416 cv
641.703 830.066 638.746 833.023 635.096 833.023 cv
cp
731.632 833.023 mo
690.26 833.023 li
686.611 833.023 683.653 830.066 683.653 826.416 cv
683.653 822.767 686.611 819.809 690.26 819.809 cv
731.632 819.809 li
735.282 819.809 738.239 822.767 738.239 826.416 cv
738.239 830.066 735.282 833.023 731.632 833.023 cv
cp
795.071 833.023 mo
778.522 833.023 li
774.873 833.023 771.915 830.066 771.915 826.416 cv
771.915 822.767 774.873 819.809 778.522 819.809 cv
795.071 819.809 li
798.72 819.809 801.678 822.767 801.678 826.416 cv
801.678 830.066 798.72 833.023 795.071 833.023 cv
cp
f
870.057 833.023 mo
850.235 833.023 li
846.585 833.023 843.628 830.066 843.628 826.416 cv
843.628 822.767 846.585 819.809 850.235 819.809 cv
870.057 819.809 li
873.706 819.809 876.664 822.767 876.664 826.416 cv
876.664 830.066 873.706 833.023 870.057 833.023 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.0.0
%%For: ( ) ()
%%Title: (11.eps)
%%CreationDate: 10/30/2017 12:54 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B7&o7dP1TJhWrnq!6tnP*/k!Q`l9np3(EuNA-Bc&R5sltq<`*#[j2(\,O[d.%:8bp3<Q*UF][d!h%IoSEN@\B)pN-QqJ.Io
%$Ci"?$*)&M3*p.S,Ju89rn$`3O`@@E5+mWJ<fdSN)jUV,^mg^qbd.Aa1G!U+J@?o.;QlcQ]=G@MdQ="QAQnKH:*B("CBdPA.U:@&
%GIhKlIg4o0<iX&#Z&JI@2G?8N[2W:.+GC[7jBp!Q<undY#iK=sQX;KW!9Nlk(M3r[ag<]3j5(p[9)bnT>j>=adqrl+_eMB;,AJbS
%;:9a'V9oZ9%/>K?CN)"ie14_Km*[TjI4Y0G>n8'7c+nT4+WYTi"9WZ)G/jO!dQ`TsE;kMmr-ogUj!XcK"o*U5a3!G+3!Mkb,UOXi
%E1+%N?p>(8+k'tb.)CMlBUN%*Vg;;[-7jb_7.T6OYKdTM#Dt(4W*2WT!Z]7Rl<0ih7-a)?s234`g^+tb>$5duWf4?tH/ig>)9X`C
%q8^3gfe`<p<R^/`e0G)oW?+g:Z>K_mT0V,[Lh8eDP(.>-K%@*i?*I8Nm%G>@!fB(^=g*t<Id(NfX?FXM95bTICGJnXir^H2;:GTu
%X;#&R<=Ys8`O;p["_R*082P(F72e_5Te3$cEaX[cD51i&G;rV+m;e**fLC2>2TgFe'`na<91XgQcX55uCJP^JmrnB$1OGF78Xt*C
%SI(qNETgB.S?Np1KarQkK9\B(!LQp<^=rTRXoXAcbN=KY?Ht+3_.Y%OJ,ehn?;k0NAe-L8[]Njde#Z[Ormt>TC_cWY[9i-%D:!&Y
%E*dpE0C+0HZ46tj[T3GJnD2%iCIW)f!^YbNXU"&i\<hScrp/`r=JXk.q?/3'ebhcnXd4_r`UcGOB51/C*?Z/'Jm%+E\>"PEqBQYM
%n)!o8$-(BpYn/AfB8HO7#bF\<L<:FZ%jVESCNofcg3$A^C%d?9[+\se07=JPHsQ3,C;VlFk^Pq,e*V;NHocIoLicg($-^1=:&"d=
%^bii^j@a?bk_n8eeu_4Dd@96X.nofIY:*?kL&%F0csR@6[aqGrV*M]LldPt>b;*Ag,HeX'H*<?'Gc.0"o=l24b;;6hG8MtY#?!HP
%VOmh<l0=IkQq6ru8#:QBPX.M/Y1@8HhnCAjY24&f2lVm'MS_h"Q3);KHI%pGnD>82]kc+gE,h15ad7fo7ZB-IaW8D+:Z3^^P#Goo
%*6B%1q'f)<:CS:BegO9qm3q+Sd0+A$aS1XrhI#2AUP4PC+CET$3a$nAB"h&=I"CMHNLlij`43rFoO@gr&0,!mF/<aJF'o6eh4A6)
%+:TNeP=>kb)QisR_PKe2mB;8tKSq"8%'4>c!8n<q!&<&BCVr-.RUMN:HBV`UJaEjK2>8<oe,=u:DkTo]0/9e5dpC]"^igbi2lhS0
%IqWH?`\knKE10s_U;.`[C$V7U@?r8snWsb-rgI^?IedC1fCuPc14GUhksi)3otcK;38Ns!M1O7`2`BN:0k6?1hGa)Ck,^ms(FeNp
%n2Gm2jc>[@o8-0lh_cOn9U8D.i*e5)7lCJ%hdliE?Fr1bZ*rNRR=827KD;#(oH<`Yl'%O0G>2Vi-2oJ)EKg33p)<+jY4dW(U[o[Z
%>>P\`iafKT>";Atp%KM@dnbc=_Y<;2`c8eC`kc15W>?m!U1`b`leu&IPdbu+P(#q0>9BhPdn_IGS9?i(1rh2W5sDgI@q;[:4`"4P
%STJFjnBsi*k4M&UYR[YTHn:WA1^fJJ9V0%C;Qg3I1K2F&o29I4b0<Sis-0(".5rpAk,$j_T:JSYK0mO>Z]*1*.HZ"GiYa<0I'edo
%[G8E\S(D]P>&IZirPu<N>lR/Mo/3XdrV7Zrk<dr7W9O471$qu3n?],U?gN0RWggtRLPC9+#5S@OhadOul'@P0*sOa6l`4ppU43td
%7C+p*;Z.[F\*qNB%^fW@@qa-^Gj_FjDt[UWAO!?2r/JGH%hF+uD##$&XM<jOp"mll<'#@"PLVA)C]0dm2Nt2sa%g`Sf</d54^ZW2
%5<Yl0o^=Oo'=0ATV-"qf`V`jX?]PZ7cX6ZrUj-sIn:+mLO85FB`iY_5Cte`a9TeS2WO3C?Zd[HnI^o6!bI@#^ph);R=3G@D?Xg6h
%bD[2V:_:PE-HkUk+%#f#)s_gt(DkQWSRDCF_gd0q4*-@NAMh#%Inba$h`$P-]i;=]I%ABTa*6I0q@NMB%`eVAT"oH;g8rge?ea\0
%2@n^j/C_]dF'`E#dM+'uFl!W>r:fa>7h=XK3!28Ke#`j>Njo"IIeTaWP(+Xl:OPpdg.&R&d(=`@1K1R+1qM`_"7tIGIhMaf`R_57
%HGAH1^/L`'HFp2P,\Jmen\<G"VETIp/EWjXrjbrk$-P*aD-d1r8$@C<O8+OSZen.AFdcii_WS\V%Qf/Xj+$C*%6qP>C%m?ufZ1>R
%D67XHr+OVHr8)bqVjo:g)u-k[+')\D:s?#+Q)@Zp<Q"PMq?XT0=GHTrCglbOVJM79S_')YQ+?M_mqUoR4E^3.%e][EqJFBGQ60n2
%[08b3VdPEHK)3tMDI4H"g)%biIRSf01Rjf=Y!;CZ"[3F6ceo0<Hl1];"U3d$I)[2TRAJj%K85KE#=uT'acRYW7XZR>dsq#/cdJ2K
%J9gBh2_\+XRSDV^lR)F)&O2b;+)^m,raJ&L$GXmDa'68<g*DYQbLB-FrWpcJesajFo-7S!kl1EWi58'.i8\?[a[\QESV&oH*c_%O
%P7R8S)7SJLJ=M[;l`X>Shs'1bmur1>fTc7l+-kX2q_qkWHJ4^sT-n)\ntdWr/F7R<E2RQ\R7:-,HlVj6\up]NHK[^?IFR^`YW+6S
%n8=NdH*n%!Rc=!ABj2$2#H8!_GO_ApIql`GW!&Da=)7\<F;4?$/BgW0@/7n]XRG2CXclq%1+-89CuA)MqV\94qH[?+HlbSVOC*#"
%Es0ng5%^6aduSrMV-]qka[q?j%=+&MM_-#RK9n`6n2%r$A.Ak7^TGHIiUMeOeQ3N"j*b]STf%ga0,*+:>r26V04la5Lm'70r$9Ea
%'PMrsBmp]V^Sd*aE"^-VLRRpjnY8mSpbB+Cl+m;6P:1ldZo3P,;<C)j3:5\f-_*WqO]p&O=d1!?8:@<kdsi.PcdJ2KO?#O`1-^[P
%/Ks:ISjd)f#L9(=8f"9f3mH!F9Wis/B2SX=#5/_UUA/cWe%X=]l<+fc(,fq[gja@2Aer_Bq!o>1=E*/sbLq>iT!,JRF%sm8gF?f*
%&\iH(h`6=]pAVoSGo+TG5MSYt`VAPm=Z.dKan]X(a8Xn5bkY;[qR*fVbl-6sr0fJ:CHb-?pM4ib2YUuCiR^tEJBZKMH+GoYDG<VG
%SU7cT=8SFfRjW"CA8Ubbk$IGQGW"rMd*"Y$An2[JRh$,/?[";=C'/FhN5!#bjS:S%+bKMFRP1GpAX#"Md`n;]rHe8G:Lf8U5kK%O
%O_XF7fAT+.mWWY.s(ro$68G!@]j`h=s&S6s+ek:*Fd'PrHK)d>0)]utph#u:CsCIVBimUg"IO`Ve,6ut])9d=TsXKI20Q"kQ_@*l
%b>9Mhk4tKC7_]8kHTZP'NGqRA(#`LH!.Q6_)?(S+$\@4,Gf]VZ+CBESbI"*87=RO14mgAichac\s$FC_`Q%VdI#NQ4eM?fuk0(A,
%;u\iN=HWUcRn)B-`.ulV=WOHYc[4[fp^B69KYuV>H3#,$Z21soTN<"eoPJ<?%j&_2!ug*Ks2HP(#7okg`<LPuVHXR[]Pma1hhCSH
%?Ss(Ud<C=-os%A0)r4[bn+m@`1E.Qgi-Pk3Yol&b)\HH,mJKPjq3-8+Z2a\7?J%9qruL$:^Ag8IT$GjbmuRBPP55+G-V<*@s7^_V
%2;eG)n,L]-J,e24$[7+]-K6iORd^&Ifm_8S-hR!nht`l4GBH#[Ia>K><%:$q5:&#VDSSaac"8kB2'I<aqD#;eG>'`8F@kPA^?p=K
%qn'B7V44@Tk@E.;UKZsb6E#Pj8G0gTn."9@s7l*G]ljQ/.DL0J7%\@854ubC\+fc,q0C_?LMXskA3].QHflETH&$4m+oB;BSW@T$
%hBn_d2Asbl,Ls6*2^=Dgkn+3>7b*Co@9BD`NO8A!`+j)4Z2<8Hrn2M.ElU[/;`E[)cUNm!pY56F`<T2mhaXBm*VX'+".mBGr8on3
%dNIXu(*2GESkVf)Jg5&Xka=8SE(3(%@V=jMqc&pKSX*T6r2T_MSfIO&P7BdXcK>$4mE:R"9_G]sB:Jau"c<&A)!p-8DnO:50D!3,
%]^[aq]Z_<Js*[[%DnO:pj2GoBd)M""Kd$D]H/iIn.o>i$3e!BT/Bf&(o*3VZ-^(qHSsf!hIAqsnqMrKiH_U5S]kuc<[uA&M1X5X:
%-N(M!@+nsGiTEW=o9W0F#7o;_ZAG4Ib8:/=(JfNcr3:1/0TBsF1WK.CkJ;.q*SRk*a8)3lVB\)"KJtX]pJY!4(Va&QcXZ!ZgYD]9
%9L%hP9OH04r9[/K[kE/rRDq!8q3k?mrqm?m]eb.0Oma($:O/Jd`uDqYO0_VV8hfjtZhsNkaKgk6.O@XCAQjP-)!<maGkc(.QcIU&
%0<8"8kZqF&D8#;b--t;65:8Sm0@g.'M0=A\0edI5q2O,OZ_Nb1Kf3-Mg.urRDMT$o-aVbZqtS1l_]KP@d_KeF!a2,b_*h#lG9Y:#
%r&/^$5OA;^P^OP[[.3:,N%*&TIT@OXReJOKW2?!Y5)/V1qA=[+R.i>4[aL_S2*^P>bki7+VO;]OA)>7nTftqIo6#RrlFRo)qTO_V
%8jB"V<VhKsmsNU5nG067/WFOn%$[-8="m<TcP[7$J")1?R+]]rVPhkn8mT\(ZOB(E1sl+H1?F[kg,BO"H]<+)q[[%7k=,A&VO4TK
%f*rJ&Nh1.Smle?enl&0liQnIWT>,&Q[U(f_6f'W[CIM:X<l7`,7F8c,P99S>,UVm<=(f+1T3,]R*uFPC55D6ak3m`pa1K8R15UMQ
%[85]3r;"KNK76n^VpK2qHR?g[2Of<4$L_]4=m%G$q374s#M6\r<Vs1Z]]P4%ad*R_]_!5kbID2OB;paMk@Dl&+8PKF_R(E[@XcmZ
%044(i%t(p%q93b*r9-%^(L6qMC1MN9V9lR"`qFE)BEl*$bga#)kI'+F_(Em3\Tp%kYNBGiRe,KUkLJ@0YV<9CVN79n2)h`$k1/7:
%T:I'K/BPq*0P7P\o>/tiS=>jdo5\`1T6WFU0B[_LF#TCbY-p2P2Db$6>_r=ZeXSiNVS/Q7Io\_qMk,,VpN,U[T2.4<]1;d55EOj!
%,+-,H@VVJhTDA4R=J%`%5>-H5rh@a7$SpitaS:K+A:2^cBn*mq4S<$]@R>',IiWj5BPOAi,X=Xr9.Ln9?TYu*KUqNadn^5#`qqB#
%I4B*bQ;JP82Nt2?6f(b0p`XFpY>=qMU$$p<B0.nqRPit\gV9*<s2QIah7*3)X,5);_J56@-MLFc%,WeYgsPeV058-5SH8*Gip+jY
%YBMI`p(+Wf5)WcSk([gL0)g6gNU-5j's4;/<SJYm]Rp+N35=>cPGToMOEL..hJjk;GXIO0_De(r@Lqn970)2"2pqU_)EhI):G1cg
%Vb]m:7+SHS9u*mg3>(6ZZ?GH!a_Yi9:Zq9?)dUs[I\Cst:5\m=]cG,-:g&1YjkKS%&M'F*VZ(=5:&R]np2?A\UhH>5c#]WZ]ppKh
%YMkmEMSAktnP^K=kNA)-]]]7JPG!3-q_r,-ol2rtAK]EFR?rsW?6AonV#_Y4l/lF0T)J^#_K>D-a8+<$dJ*XIK;&9'Z_fr>C2K_M
%CZrK]>[jSiUM4gkRPD7(S-R(`G%f>G*;p$8H#T8`4\U3Ao^A]T4t_;h!hRHPl*n5'g"89B*T[$W%8L]eo6[#*m-*K=c=/+Pib/2m
%pQ'bJdDQj!bi3O3%t$%XO8QPqq0Q_Oh35/G`r7dZP7*e[7Inie>rmeJi"2eMF</6SSPN"#c(]8tBL'k`X#@]Wf"\]"1TgB8B8fQo
%S+p+mhbSYZ`m9*gD!'W;&b;%m:&V[M69jGj'#1WnoI]F"rsq4X3l<V=pd1/;,>E"Z2G8MS!B](/5V3_"gC(!1`(%iWk[s*c!pf"c
%\7[Rhp+"5*".up.MIo&Gr^hYUD=+d+\'mhD2`5YgEDr54ph5S0[A'X-qs?TX@"4NOaWu=9M_!V!Q7cguNJ-Bn':>9Bm$QJbCml5'
%G@n0lAas\%*(!7;HmH5Kes`.eT3kK`6C\!Y<\sD?g6\E8R5[=D_r@V`^,M7I[m!8qLE(StRHD0!q+pC#I`1gO*3oE91\fsj+>(Vh
%/G#$>QJEWM+tsTp05"<A#?8c+L-dd\Y#gU[pWC8NFk.bg'RD?Dp>FhLnk1;`Tifttl@F2lf;SpK[AI!TgO\s>)<NpC@XqcZBVoKC
%B`te?$^P@A_nWl_D8bQ'og%0$&25guS_q6:R/%m1j(>f=T7c-V!6[(W0E0qoiMV0SqC9/oCNoCF,41C""@@a6$++cBWHYuN^]0#:
%bSB*O@9HE<%Tj$1ZHB0Kq7lt=5,\l?LpDH#C[L'n.!3%;dU7K,-\oERrrtIl?240/E[<aH4W&p'DDf5A+YV6K0DcfWg`"6-PQ,:)
%?LBP!6hhVX@r)4WG[FFQ5e\TF/F`O6"YTF3d4hY1E\[Tp;7'"Bp&B<hp(2?$#kgBE<iO]$66N7M5mGLcgC=5>2gud';ulE@Yn<>C
%#6dA9_npn]bWdr,3:FQYnnI`%IT]lhG$b0pg7?='cjRp>@:EC-cDEDmFll-CKR2./PYA,Wf-e;rM9Nn(h3nZTMaeA0k\Ka'=25!/
%am7b=_Mo'q^$,Kl;>f=*nnE]^r8LKd#.B&0XUIF_rcU[(\l78W_nTD@h!$M;jKmA%FKNOs\A-p9U,sBtd5#j'Ts,%*>O$]Jh;frU
%C\htqk@ZC.:?BeNYjWJ!j;l\tr>[a+nq]ZtpBeT'WscWpX&lmqD50/&[6c53nYW:)k,c@t@AoQh_"OV-IE(rue%'Q9;o2U,:dm8n
%#uDR9@Vk&WBekZT;o4pE6]'!clpS;[rV/%6M<F&OVgq'n%EkiK9OuN%cN05doR@EsMB!s[hiaT<rl9EL:T54QB8<"=[b;1-o'6AX
%]jdB*Vq?Xai'j7FP@m?i*al4Q[B"Ti1+_e`F>?EpCjs%]-hS3$LZpF/J[`"pT*L%K^]n\D(<`)\V:"YpD,Vt\Cn5guVh2go`AIC_
%T61Vo[]=oOK7SZfHI8XBf?)`_>,P`fEU\]#iKEVIq6\d<o$kVHal2L!>CmB3qPfjFe`n%^j);4H1fY3AWdZG[dEoL/=mM)p&F(d0
%;?+t+=Y/<s6bZTs#CC6^MfCmFVe("+]g>*Pe86&k<h1hE>TQAa9Z(#cK$@`G1*&$g1JZM#DAhF4jC4NBXOji]QWaXLL@P!CY8#0a
%Cr#!P@!!qulfs%qWKSsKN@fu20A?&.))\(p]1#A.QNQ;MH3.oUmuTq4i0<c1>bKg%>uaUplU@C9q$WB7p9i/*`Uc/_%l)@^kKTWL
%&Yg?09U(%?BpIsaY7(,+YOrK/%CEL.h?HT3T%SUta-6N8HF^K@dG'07JV*l&2ioL.?*.e-7b>cB=G^+(GH/qhBL6M6Tloo.PGImh
%2g)fmc'iFo1AR:>&&t*ODB<Lt+J-Cp/!K=]bG/R2Mjq+HRYa*g"5$q=!d7XbkR[N"\X,F[0`%4DX#ui/3,(L#q='8:%chu=(.bVB
%+IhtRo0;kjX)5A)>OX%#D.9Zq7/(ZJdnm].XT!umN_hGDW).$O*N7RHRX1XUD-M-A=KetrQjJ,c2V2H,FO)cam9JuE%RuLsHN\c=
%6XOVPN;uXBlhHu@(Q?:83/T5g*/rLt6,S39LL@bJW;b:Rh7fNY"SWNJ-j.PnORl2K"emlr%q5,obfB%IefSl,V58<MSZt`-[e?U0
%+s"@S+rjD!`m^BQRao\d7NZhR_WW$fJ4nYlX$^`EH99^BkhXO@rbI0qH0*n'<i>$rQUau7/UMDL'B^D4"!e9bVl6"%H1B1Xat9#N
%$To-kfDGfDYmN%(7P9LKeafkt_2C^DhTMX7q9ZKV,+!VVB6O,hW,KAf&%RHH+Qr!sS-9#$,7^^mn8.3tj5S3BeN5WIA.^a:\C;ZY
%ofO:6i.gi0[fp)Znh#lH5Kk^[26/mBWX!QFbOrLi?/.-,msXckS%qn[1`LE)]0INbK:TFqD`a*W"@(dq6F>Q?2-SgC$/IEYI;tn7
%PA.h&:ULu7c-bKX`')A.fdl)+=RVtl5.fq'b/2lPA!Sf@d2_T(N9#_`_&?u<I>7/D;Wqb._IQdi=eKW4g!rdrpOFLU)C>-<aZAPg
%M<;'K)+]D3+SHan+#4,[g]NTG,<2*D^\_DN"#8F-=H7q\?^r8%R#1[Y)d-glYDPaG:N,=-\a8Kg*2h0"oon"SeW1g$OcAYtXo[o]
%?Q.(l'9;n:D<r,,9t60)UOif]8^;0[';P,jNAf'W-JTqt8-]%J`I+nlnQI!E4HmGo=<eSTrEJ9-%B*ARZ8B53p:Z%3e(eV<SZl;4
%!cb>A`sSJB*fY9ldAb$:FL>5U9KZTsVi_18]tFSrgd,apj;eua]S!bHd(4cIUKP&)r/aEs7(d7QIuTbE([G$N%BI9cfbgYj>RVfk
%>>tK,b2aBD6;-D2_pem0`^s]CRcL?[P&0CF1j</@6sAM7-PZsk8?FrtMfWh#.ll/u@1eYRb8`$-*bZh>*i'tA>s*%WoSJZDrYm7f
%J\H5]D&RIm5`"*YZTAe1E$_Pjf#o<!*nWZ_\qAU;D^!oCqY>3JBTcWPI\qn'KSNL>D"JX;2"53e=g2-RQC3u$H7CI^V-n!P_pYPl
%FA*a2%A\%?:Bqf>h@Z65/7GIFQNQJ6lcilNpO'K0n<V!Pm10J/`[HRI$5WK7i5[i<8GRhRPoZapq:%oq4%OCT*V?2?h/@UX\#PF6
%prt:3NUDQ)o`LfB`/:ZZ$&u<:MH]mEl/]f7[EDu878muUCOQlqQo&msl`WlN*DEad+gjI/,>;XXD7OM]0IMn?K&Dpe$7a>JP[G2"
%j;8G4:f[Po)4K4_;)^ct?0m\KQ?Kn:W;nB-!R>JR-t:1/,VME&PrB<&)-\(:2K;-W9=r\g[DSe/paNP*<O;&D[S=R7Eu8hkS/W\6
%@ipIG<O7"V@%E".9<n!]^]_T]hD)$)Y:<#F@)Qml\DQi:C7V*HD.ns7EhD;+m8G=kRI77<OC?ek.mBcr1&Xlf&j7-!&J@07VNkaP
%>W*sDAoNoMO+sI8kRFY"miZr.CAD"4TDGb-#n0WMBkhO5/s<,t`ZnF]>O@<uO&8)co&sep#!-&=<^<]cr^?aA#9HV*RGC'dG`mT0
%\hYYc.U!-!rKEoeaW>b[6gGYCrR-g!SPlH?R7+#QC74LXNcFpZoST1mfU(20-],?-Na90j;j)_72gTK@g*l:<p8J4p^[=gk#$A*'
%;^Vm'-\_Cb>BIC;LgK,G,"V5\BrU_:4n^8(gc4'i?Ri<jn[o@n'/VbW=59F,9p+[K>=[NmDM[*05k.nuff&gHGd;Mfr^dlc-I@>f
%N+U'*bfDm)U4MRa-f2Ga#c!uMk%@]t85AoleG/.8PdSfu@6BWC,pZNVU_">Sa&ro/mYt>DdG!]*BCa1K@NLU/#pl_,Zoh$1e.f`>
%>5+TH<l7GO?F)HpB/%)k:nr:(ri>-\qC"c57`X@2q\/_F4q.UECphF!8Jiah&k;%?3s5uIp!O$pZVa<s9IJ45--$-f86nG9s%_3W
%9;GYZ3>N%V--uOLGKYEP[^n?04c*KtaF?NCh[)77WeS-+2ASM<Ym&'@9e5OHrA31q/A6sRl7p_Lp=uCnlp6h*A]c.R_7crL+bh/I
%G'eHaLD@k&<^37;6+"nPZh__(;=WS9m`75Kk+\W*Ss2YQpgtUfFo[#fY8nbClf^p@7/$0U)Ed)B!-V+HcCG!^SiS[9p@gBLjF6QS
%(@uYBD>Tc>;oT&AlU@Zb5JnOY]HHpHcHE"A_)Q"7r\2]F)i<)L[C86/eLl?_)A0AU2d2=&2X@!6V-ga"N\QMHJt+&4:``Y%%krYf
%^15$43GE_nqIkL@[YbrYk$E,eSW/@Tkfdc#\L4>h9c^Lr29Zqfl"3\/=7jq^P>NP=[e>e;boUS!J4\C-iKpjc;62!\\RbQU3>CKk
%"&Ho:iIodVk@4r!;ht%"D>>n"iG]u_ZPlWY1qPc:NZ\]ib;A"UI'bDG=?3dX<iOZY)R-aOCso4:5O<QC2MHN[CR4jgfTCX*)9b8A
%o/U(WE?/EXab"N0:hXXHeg*pE!RerIpR?,o.=(^$c=aYO0r+PIAa83N6.\r*>T<O3:/4ffJNX1D[N9sL*O'=K5f_Pqpp6hV"!+sI
%TeupcFmCke[I"q+*mcrmOhPrA`c4e+Kh;0V98;ZWqZ[?+Z?h';(gOjk#'=V!A/^\G<AU'EUIjn^GRT$O!!Bh9R_XEGCE]C7*\^,(
%>mm#<^$cc/6N\?k*A0HMdD7cVBR"tK8K'X<@WZ.-4Kp&d3WZ;0T9.G,oU>G"fP5ZTC3HZ[.$rXWCJkQ]:uUMhd^*j^1i!.'k!S0q
%HM%u)Y4$)C]odRqHK!>cfl^KVgGAffl8-pVgLthE4=ZolMILg_m5*/K9;;<dk/?J%6[e6to"?6KLGWPVQY8]\;'AOFL;KR0*-!<7
%Pek-j+`XR@m>cS*P,\I6I!iNe;ZWQ3LSUV?lSXPobqM:tW_ZbhoM]mnfZ$U(dP8I3@N4QOT_]#u%g@rX)f_kaOosb"#(k1B1t;3&
%Urf-]hui</:TIdI:?o\V6eZHIqDGNnj)G:]fJJ(4Ie\p(N]nP?#%S97H(\q;B)c@c^"mr142T(M`#H2_bD:!&`er=hI^0caYL-!>
%*91l5SYQ'KDd[5b_0*>Sku#`=bJ?*I;<qY43B,[hpe>jXSqd0+Bk5?tRuN<aQ3:Q!.fL[CTVUr7`K'uZ`[%H,K_<1$"CGm)(bPR)
%Y%+<:<ReT_m?c]/[$<jV8H$@!3MSqliWH*-'`0$[pYfUuCiY^%KBr/<MkeUJO0S]kkI!MbV*mX;Z1MhCLem:oN!XWZ#!8^LjT"0+
%B-WJ;Km\65+WL830U0S-7_N'D/NB;A2JtLNCb24"A/$a)j_S'I=+u:uQ&!W?S%[@.G.Vn@YFLC-dIq"D[Sq#IO41qI[FKr(Kf_rU
%ePSqBgkf>Xm[jgk45%[)dqH?pP1(lJ<*<f:@?FtZagYf'Mckp,T#2Mph5s^*g,\-#@@1^R)f.T<a5)"5kTUu%(%cmjf\8&*_r9/2
%LU"/H3uCdhVO)Mfqnm=Bm3s[CLULY$/),nlo%i$^^9lNc-\\Cdpm\g?"2cB7b].VJ[3\tXaO_4=O0M"qHp)pX0AauQFLRijMXGT'
%NQpP8E\G+L=K]Fn6sf+Z=IdLUdu>>+UZUr=-!omaC@XML+Hb9@A;SRF7s>JED^ZcrF=6T`ICA(_b'PmBc33/Nj_ZH4%kT^(,]:#1
%%u*s=ei$1#P'F6tW!P,>h:OKtZ5Gm]HJON,<j0pX]sk7rICr[?PY,+"58fri9"%3EAsmL1DAu6P43$l33GpGkXG5GuO1eXR^[dBn
%X@FMU2'.L7,1fW<=L5Bgf\AQJCs.gY4[YOE3u's1/nN\[q@;hS/1$?=f-!)!<L7WKVS$Ca[P^l:Hb-[%g=##YS81qBm]t$`6tUZ5
%-FK\-pl<O.k!<2+QP7sAk3dBf@>??c4qYC'c"19s?eSUM[6-u=dR=g<[3)TU9-N%TYKL('I9Ja-DJQj7l/:]P)i'RF_D@lP:gb-;
%\<%<DQd,L$Y5N)/-?VZF'3hG;8r^IC117r-bi\nRC5Y_+<;12q2g`0!o%VhRdAB!8TQ_FnSRDLKIdBhgWBUQ0D=8+BFFh6G?p+6O
%`!n`aJKWcADl$PZq6l]mCnJA<1i7@a/etQBG)qe>qlrJie;`RU8uJoqa.isZjJTUY\>akJ\pZa*\Pf0A4(,2:ofb7P%(D9;V;5:r
%8j66%+pGR3qW@cdjG%CU.Dmj=(O#C20&.MGU[<6l9%Z/;3?VL'7&)>b"uitKj-KO(/BpK3]qT^=7?re,@$o$t?>hEd1taj0/FL;<
%LQ"M*m7Tku)C]bE@YNi[n"V^p[-819U]&qj&7Gb7C%#IT2CtlbV5gHF<a+gGRWNhI.PeUT8\Ns:@eAG^`174"Lb"MP@I3*C,rW4O
%H;3F_4UEJlDmEu%!NK-Gs5#_lSNk.jdtu5P_QYE,E]R'8g_!=C64\ik;qekJ':6;`^&.S%@<$4!&hja<6U+?fesCLrlXC[$%F8!s
%DQJoj*QBVGVlfAqCS@],Rh=Uq81'Hma/UDDNZf"d)1'ADl\h1+5$nnMB;GWEqJmU9lu[=;q#8n`[JC.mNJFRXfo<o;9=YYX^E+c3
%NP2_V,u@`-P%',DWuAZ(A@-GN\[[?%FuPi=UFVI-C<JZudOWbk/L\?2VFpOU'k[ZT:eZk[l'7%S/GRB$e_$_Og@4*-BLgtf<sAE*
%[LnOjguY"ZN5q\T#VXSW]Q0Ub^),FQ&@/R(XMe/3#=?:=3rQ?*X:[q;!B5.'>%2L8Wac*d:`kKUT%c1HX<(QEX[6_4"F4th9DisI
%F+7!FajjLB/)!Z6`^Lc5$R/1dH#dp>9(/XqF`Nad;r)+br5*/i3Golo@FWmrJ"b$-J[$@dYD_.Umca;+/O!O\pm'c8MHaG6:9]M1
%C_T,$K;Go$N*b:"@(4]"#;0g7L)IX\U(S;lNMD8&O?:Qc.A,]SnEM(*h&RYiYW*pDgC9uj0pK?3?LD#H7+k!>NVEcN\mr\kl`<m<
%%YFindYPK`hfnOF&/:X0Nm*>R!kA=u0fg35Pk'd^63.f4(*V3(_[ma(;Sl"d)O5\mKSCcDK*!>X7IVd8jIe/#MN"m:Jo"I4(Tn>?
%7&96)]3]CO)Vk?l^V5sfU^7lM8/_%HPZOJ:@>'GO:a17>YPqTiarU>_57&0=:ndc]%.@-&cq0Es/mi_Mr`@k&7[f)CgHai$b?*S-
%L+V$>AurZ=.'I.b3>1$2F,e9(UZ=JCA76<VN-dp^\mj>1UiA(JSOEKaEcl%p7lUAMkcpTXeaE0kQQW%W@O%14`1:A_FX,C8D/Rci
%Q@uDJEI0&&WR29VUC!SE?/kaV]HL_/?)(a_7\UQ#BY3[<A<rRF_QKMp:K.KMYHi6jY(/T`j6]+1`gX0U9(`<"cBHgUr.l)j:R^Mr
%bLU*h_r\cP&<"%FGqt]B`U[pCV-DT.7[RG"1Ne+mjM\LROse<>A.$4cPSXi>)X@Tre3I!ioFu5F$3e[G>ZuiOE;a3]\Ksc6Zfr<6
%?TKN6_B;L@UjR]$'^M-K;k^=NO?>OJ(VIZ(?hDu^1Og._G;G6.Ap/N<n>_n:Wllulk."[bQY1DnbX:>PG+ONQ87l@E?&\m<5adM_
%fc[Ji$q-,?XtF5Tj7-^O\@qDnMEjitHHO0$DD!Vu[c_hA>X.SFlYS^2bXuj\jc<iZZj;.f>'sXXOHdX3/WcDP?TmX$ai[%"^MW$Q
%+JhiH-YP9\EsiMN=%d$r,oFX+/bKPfRA5K2D<sBUI(OYq(iRiGUs`AJ6L)2!Jlq_RAbiWJiTro0[)pU4oB&uD'H4>Qm:R.TdY?L9
%fM>O8lN_Nb$\&*j'"IP`6uDNJZ#/jrmF_7R'\,IJ;?uLuVu,""qD>AsE^rM$0Ijhn?%so<IG74S1Ds88XR&l,n#qB!Obnc^^H<@7
%%6RQhlhX0S==S6d?XNNWjPcY7JZ:lP1#/IA3_]8l\GeHe_q:9@EX%!+862lO&&E%ZPMCIE7@,2IB/([1e;6?WY11Lo000"/['>un
%21)O^ZJ&+p'A2,Eg3ulZ;YE)!Oc'9"GE"Dj&^\-oNa81:YLCVdZ?)^Xo@=6nf6bIVP<CA'qN^\lF+V$-UM^^Pa5G8*ro)%Y@p`#?
%:h08G?9d8!`'7>f0A[`9aum`1gg747_/1#C46;4=?q`RJJ`$5!,$5P>)#^'Jg.n<d]Sj97^=YQXf%ur0$?@tDEjl#pAh>u5r&g90
%/AHaRp=`dD.]<tC&1-\Fof*s$Y<jk7:HPLtH:66I"h7YOk#hd)Khgp0`>552X4=GPWQ'eW6DW&Q]u:=[g)Z-V@l!;h-kFce$G!ls
%\CH0/1c&uK`n:geU)'81m%ric)=mr)aNmpC_b%+uA5U_F':5t:-Ff#8B[H#:S/FmG`HuKDs6aU],=s!5!"[neB,Sar0/XqOeBP^L
%ge3ATbG".Ffj!9l=TrL_h+ZJW6nlGRleO=ZgUE<D,LTS?];@g-U.@B>ljf5+[QD1U'/B'!n](AgL:)SSj@kB%p\9(HpLP_[\KOs8
%+foU1BMd.*ik#iZ\Tp+XQ(qeG\oXA7P+qrFQM>2,qp62!GIR"9,=:0!cYZWn%EeKa$$:D68a<GL/BKWB`N6;"0J7WK3*ka/0414%
%!^sbTV:5n%HqIEH8Ses9[]Iqa9T6t4;Pfno5*SLhh9>/)*PAGa+Et9?Y%*0%'\B)uqDeH0[:hXtp0tSUmACub=fHr&D`1ENSud^e
%VnHrOS*U?T/WWutQUkt?GZ8S\]`FS)#,CVl-,"d/p!nsL`E"k?*aN^;0MjRfBn`DX:jUAaf8$N6`GC:pdr7Z,:AQLU2]GEoN2D%W
%mI-S&73aCLrQ(Lg7s"j3Z>sAjN5Zth46:MQr?KI5.*8F^X6G9ieRO</`l:_a;.6u:G9a\?IUNkcH(E1b>9^ZuH_oI%=?O^SfOZ6&
%rm<tH3sfEcZkM7e05K!eFF0B793`RKBqsb-)gU$`4X;h[b?S;^iOU,<s1B2%@)?0Ef8^BIlHs+QCF@33,/[f+-W9#9.99#@(S:hU
%V\MrlP%8D$8^VVkWE"$JD=:nWI;/K\NI3ZbgqI\9VWDo;8mu9[T70pJaTI<fO/_<ODMb_P5Do*;RjuE:emOl9dnTfb<[b$P#>F8&
%j3l3+9eG*XZIC0^?Q[<jajFQY&UT,b0q,rH?okhu&D]5hSZc4XV$\q[]r\6NCV0[a`gO([(`,$1V:J#YXb*%N6(M&d5,^tqpKP.%
%'K;N*ap8o3]Y<)_NXL%==%@Uu_Q#7qmJLmQb$+S&$rbKB6$\X!]F.Pn=r8?BYsA^*Mu4bu&GKq3`X]$PcdM-'\SgcpN\,TIh)dVI
%-d)sACLG0bk-bIhs1D\*HXl?(Xk0$*=gIJP#BdeNB@^:mU)ofGieF_>Ama<)l'U./+?e3tUHoR/%DeUA`:d^3jCEJ(k&B*E5*SgI
%Q*p6ZluKqilHL4MK#4t'Q]CIRV<+#1b\6/0#?PHuej2>mQfqPhacjpM2S+WDddC-hGF+=Fh%rn8Z^;5?Cp?h"?K"U.#:kU[L%T\`
%Gj+];C[8>-Pmd/hZi(VE*nnK;jUb"eAK!;2p3=$5:?G=Cl/e32Ica,'7euhmcsN#\Fp+H6Go,->N61n76k'&97<_,Xp!LZ"f#f-o
%R3)G[`ID-/MtNIA(;EJDFc&uY;qPN(0qGFnU'+T7TtBj4jKiiD]i#\=K3^Vm@pscuZYJYBhU:\q,tk>s/IF^J!,g]nJa=MP^:9u)
%5C>Ru5($8DB^._kE]9J:!Y^ABOo0lKFcm_JMOl04kI"TVna9%S<dJ8(97lM$=GBEmC6Ca'Lp!&Hm<q+]pr^d\[o[RbV'B1PrAstR
%V0PFRX'A6"SK+Y99bW`(G[//pAh7;*<G4\?8IO'n@mPD3,Z)m`f"8OVqsfCLF2RH]Eoc4B(X)QU\;pY[CaV"JUB>KehLI&D;Yp'.
%=WO+LSF>fRUFU=fc7Y..\W^\TWjQ,)'s47X"MDUobu75]bq-dPRk((tm95r+-TO/u"a(cUEr\SW4:CW\Y8CXs0;-C]NH[q61M:Te
%-I27c]m?/Sl*^/nd#17?"9l?6F=/Jr2$McL3+^+ehK%"SVL6cc*j;]BEBc<JGFi9@efYi/Wk4E#3^Y"Lp?IIH2END![56V3@Mu:d
%.sA2f!\q%2@(jk]\CY:I%u7babJN3Bd[!d>kNob39><Z3%C@tKh4)1R)Ut?"pI#*gnPg.E9`5!$`U-j7ZI2p@\gQ=IoSXUD*ZW1E
%hPu/s3ZIY8o4B%fPW";>_ll"E8.l%W-EO@R.XQ6B*E*G0>s*lBM-`Z`NHWlk(Qp/d:[^l'pN`I91g1L($4sWr/at$HgX8jeI)YRA
%GcqJ)f?mIlV>Cs!7p#B#i/XBser/p3S@TjKd5i2G.59]2iShIJGYAh[Z(#9(>VUsqRHqd2s5aH&lEY66Ukh)$oE/uB->F('n**q,
%g=eRSoW5lHU*RFYl=I8cd-A^^A%O#TngQ_E?cf,!Q6no>_qNG70ii!C,ns\$Y/qjW?rUgMHb&Wl[%0tc@UsiW!n*1\:bpjcSO,^r
%XN0Xhh2n29%$@WCZci(Mjo/["l5=H5(CP5&4cSW@;WXH[e`/]-KYjH8Bj5sdYtHVE.db!Sf=ckqME/D^Rn[`_`Ii+_fBB\cM7arL
%58krWrV)<3AFW^8KOqWBFEmQ.H6j'M>t/>"mjcEH/FJ'N&#C)=p;PD[,X_mqYYX-9A57#8Q+L/aU/gSQ=1Rl[/D7)+oJ4#_eb-oC
%<q84P@D"^!j;'7O^K4ki6DTsSo$.ed(E"eV]lIIs-7dZr->>;rCjb!/5H\Bq\T$1/\"7(WpZkH/"RnsuC9#cfGZN+Npk$Y,*CnO2
%>LtsSgpi"E.;L>r%ha1_<,:_ugd>-I-LDFZ8V]%d]sE\g7a@2n`nfXiep$!dll9fmVgT-c'\aFc)kX!/&!ta8%C^5,$L24PS35Y5
%'YQl'h5+)M\5alr&oP2])r+Ot61)Ep,.BY\,CblOOloOo<_1:b:mmWC&Dmt30e9-!qm3%sppF3L)L8oObKW_39g2RL3:%%6c02T'
%%9uE+$k(J8"eGt)e5UbU0\bk7FUA@Te8%W:2QBXuFEc'-Jt_s_X]a5@eETaI-@:D!%ZRe$,P\L#lXk45oU]TZ6;8*``F*/-Kp&.7
%!6)`RnIXHWb:N\npAaMDLW89dBRt6q#Y6>),jtjXI*QR'D6s!Q=6Hh?=nTGgF-)XL&EI$pJK&pD&)S=:;7tk37!V@_HY](rLC]AV
%h<]7$-*,Yqr5?7-fI=3YmJ!<PoJ4[;!.X]cbk%9Km190&B6K9#WQ0`7o^b2Ea"a2MWTS[Yp<\^q>?]L(*;7hpOMP<YePgP0nX&1i
%r]Zt05!MpiBl1Do(XH/X(UJMM//W3\0YnL_kVB_j*possqXj;rjnu8_,A-]EhgYl`l`\E<E+=#6(gK./^nusU9qD=?ruVX_jJ)%"
%$k"/Cg@uCTeu,MS+-nS<T*==1*n:ecN)j\L+@`Q,hUg`(l72UuH7`]gnS<f*NUod'!5G+(jMH=Z#JZSGf9gTp\)>0X!YXCM.Clnp
%Hs5FFY8I'F=2V9ppp,HQ$^Y8^B0:Rq3lB]NOLl79nLL$-#];TNJI`oi>_VOOrJk6gn7sHF])TL!+#Na_(#rQ$fHsrS2_*$G&fZ6%
%8:I0(re;QJW^.b?(=Kf+'Z5=l@"XMYLN9Z:HY5@0MJmGVn$T&mEG=TePfq14*rep07c_Z)k7&?^N%G6L>Va3hElk/5*Tm$`^&7cr
%Q.AhpqS<Ipp,="__!Un=U1dNb<Q/"t7fAn[4]e!(+J$ITPkF/H!TNJH56b.i:S%Sn2]Un4*E:G^$XCeYp*VC)UPW@=%i#$5/Bf0T
%n*Vi=QfWjbG\VS&+>[1/=5TW/PPb$de;AC\E>X1i?K:^LnlGD]cA6fuW_`=.m0tLk6r73hA!="J9CJ`6kE9pb_GdX.4.E4u/;qb;
%Gr(^[T1SrYYOqSHg\'S?M"of7m't3u*W'YN[>_k[/N4aF_cY@/OSP^4,\PstWGDo^j+4l^Ra5[ndlBIE34@?>2n`;oID0R<6gDVm
%*d:m9Xc]R(a%^Qa3,m;FIDU]DE,c:rB.ZZ"+L]9g>idZZ[R5<)[HM.%O*i^3HFc>B=BhPM'4_#'\@Bh=JrAB[7W>&KoG.i^DZhcN
%Fs7bc3:>d"(Mnf-D`fTSf?\?lK,Zo;"u1;$>sPYrn(JG(K@"B_bhpiCaP;G"\#SA_&/oh5-+L2MZkH^"8tH3Q\BSK%=b]qhZ?M?-
%mGR7>Eu8.D0HYo4WOru$3/N<@Ruk,`\#u@,K;$?8>;0:jXTu>9`a4a@j=Z%#8(N=j@Ws9BpTC<b\?^H$PdV@"K/3>P%P#k)5,b?4
%UYsEtn2V=7OWUP5m]G9c_>X>moAIIX?8WR:ZCA]*c:0RVGZ]>"VH2DD_0#*.)E_2@4U*_*Xi93)K]c`D>CHmM*Ghk`F":-8GYsD;
%_0kBE#[T6p=2F4ZgHtD\g.DP;?hU]2$pNNSahd-Jo.g#D&@[81lcX[[I+qg3<m(<m@*R-2_>4L['Q!-k]a(\2n6th"FRpR?DK//S
%_2QrL=DYrP(KTOR.gp.#gT-%Q_u[1Ul7B\&0W/)bJS.at0[,.D[WB*SS?8qG7!>#[$i@!YmR":/pV)`f?02sOcR6RrjsadmA06lX
%(XC4%_SW-pd9O3H?5FCF(a/Gf1D^g5o"gZH@KV@f6o*PLE<QI`Mlin2<_gK>`^4nB8m5K@\!Ik3KS/"<\l$+C%-==\7@(\e(<%#;
%F&?XbS]0F:87aN%q0'N?4?G`64N]JE`U$<ID__!2+Y4Dcp-O[]MsIF%:MOZR;9N\@7D5../A?*OD_TCEo.j0Im&\.*9+0nfQ)3$5
%7!358q67<G6r)U)`8FX*8UYu3?eR_Y"d]inG'3&*O+ilp2fHX2bH9(HdS4uLE9VB>3k(pP/3YUb:/>Utp")rWWRX-?0*`^b4=7GJ
%EdO*XhX%@2$@\j0Q_eS9F*[LrAUc_c<:\4f[>Wc0l,hfYEaB5GQgY^$\'**0rI)6SAk:*`0<_qJ<i+;J$'mGWA[PjY=:)/f=t>3;
%&6[].Yn&?^,DJp]Psag4AEEHlhHVM2D!e@[?Q9h_1r^)-Wk.u0dS/MN=*gS5S(3eL9kZD[Dr7])f2(AUa@50021B!@X-rR,Gr>?+
%J$=6/XL2*$HaV>QMKH><g;ml4<kJ%g!IDZ6rOq,m\>%i_8ZK/([eHY@f2CkSmFj#aaL+>j^U!S.W0PrVa0"]s)/#bQDZ"$RI5S0o
%f!c<^\TKp%h-WBkmY'1&hijW(>e"*H^HG?IXM7rTPBCBMJA\J'Ru4_\S:'5L#d6?ADFdRFpPjeMTtYNb0BjDl/!dV`BBd_]78nQg
%W#JMC)dVdk@<6k1qR"?nf#q[dBVDr(Ht=dsB3RrKoB,\R]r<T*Q8d\rQ1/C0iDPD=[anb#j',bLF1/IqZ6$GPS[>YE?Ks(Zh*'lp
%XjS_lg1h>f2kbq;TcOOmmr*sASPUjO4+"^KSX:-BF=f]IU"@>Sdni2T=UXo&pIoffrbrdA<f1KK>&3(NiKNT8S+(QDG:BVa>TJOC
%j/0B#E6RcgLFt6<gIc`ggeRL%T"!$i]);:#ea`5hR%q1iSpN(FCMU1\L;-on1C'Y?AraL67HV1M]O?[6]Z;p<@!4Q:L5c2!4^6fU
%p[[W-2PW")m$/l<ClqFoD"B'!bq6[L0ok!mh;n:3Pf]IAT's2DNUS)mf(1ZkSm>U_f9?"W0+$sJHpW4oicB/<R"&##UAS6(WX&tk
%kI:gMCj-P^_VVH.+roKW/dSp*93jiu>NuJ7I]4Q0ei117H6Y)!LP`sTGdVt6/s\h(7XX+IOJRqrpjo6FY=DJO^7CStQh_GsBWdcO
%]6^q1D`eAiXKIo3RDd#+P?[j/T<$/s[^@9&ar"qicYo'(USF,qP)'LgrI3g$0i"H]lJd)R;`Xe%VoDf@>O"YW[]@.-9<duPh6!4W
%j6gAh-bU&opN:GbF/RW_2C[u=nPmKUM.oD3`*k]i9WiO_L#c/j;SG.tNH@&?AsZY)'R-=/2e+dJ.qNl]j`,_C]lO.a(HT'!m-S_U
%fD!Rt>&!HeHKetDFY*+\>DFTnrOlb3C&dO1,I@DjIu5SWh_J@c#GFtgI^"=QIQBH,ATJ)[H7O9fDJ<j-qttCp)O(!IBRXeY(bI]3
%X]Y)gW?1*-#:#Nahc4/FeXK1tD,mXU=*NtKEV6'XLnD&AG5O@L\/9.l9:K%"L<hdQ7#]=W-h?*]EM?>n]M:*8p<#u&r2c)E4qEF4
%:H,[`ZLrO4:Mm<%)l^?QZ(AOQ%)u2b7cQ,7HLo]Z8%*2JqFn)"V2ONmc=([)IIBu@.F3d;oeRTMn7fFTHMG4bhEGDuPJg<Rf<-4O
%el)B8N=E4_fd`NYB4C2mDjdY];Bk_0*k%-]Hed<E^:q+&S1iB`Nbd8CrlNmi6g&"KrqZEO;V+leSjkZNVR5ftHS6?[jNQaf@iO+T
%ou#PK3ZG^qh)F>Me&%BdS\E&f_6ZkH>!%X6WJ@f!EUiCsZ29nN&"f^DkK.@k4+CArD4SG>lDlqJVCgpc#EQRR9D>uD&U^VN/sN`N
%E,i%`/]07YPtbukEc!nY>TWBQo&[9bI;mk!]/n5UlRQ'4_sPWVrqUrT<<t3>DAJJR_/:F*ZZ]ZRFt:P4NRILZ<W(fdkNY5Q]sqen
%,5#aAH&oX&XmM`e=&r4;2s^"H!5mU1Wg0WSHY%K]VHqkNh+C15Dn"o!CQ[@drNp[Uq77j/-(h>tG>Aa>EZ`eib5G'eHZ3?Eg9L&b
%WV,T[>NordSFG(lL[oM+s)EIj'RWS*)u#DS`Rb#en0s<O"eQuO42n+uMgY6?.[]e5TLk'fkJ@&<ZQX6l]nESl;D4Fq<dlLRei$me
%KhUqmd:DRHcO\ip[Zi4)C'W/P)sohXbA4dbm\1Q/biO`6jm-0V]huEn.;)pKNE"&EfS>W4P0qG#<qWSB;.A8@`q@6\/fZ[AT%gl<
%lXh>]=lGFu99o+<gKp^_M=OZ<j"o6Wr5q[?hQ_Yirh::0jgH,[27).W)oCW]`43>2Gqb\"=\MNHUg,A?Q@I\+]X=c-]t1daQL!/E
%QsB*m[5;q`FeP1H4]ZJPgc"jFdG92Fn][hjS#^>iC,<9?4uQ'gbau3gLV).-&V"<@MYk";N]CH_jmk(./Sd.e%)]_.YP[>V9h&?#
%#PkU\NeX1/gFjN:@:t#!U(6l7q?8R$U=7k5i)rA82A/43HFaCrJ(pk#J@>'LUr0WA`n/ZDZtA!?8pg?\6dJ,`c<XS#q@ea4EYnOc
%ViOVG%ZEj6[.NIrk\WLQqsk8t6q28j,1qmtW%Y,^g&5>":]tB8!$]>eLA2D5X%&:8=o@`<YlX]VJNrq5X9Md%$#lUE?UTQZMuWe.
%)SsF#9ZT+`_ZKTNp!^$ER:K\Q5d=YrS!jWS!pE^\??G7RnMqWKg?@J`U3ueUoRRqc&5`Q`s8EfJLuCS-J,]=P4n=(L!#6mqQ=WNn
%q#Gg#"@eO3K?-Y)E!maI!MV8q?knCU7Ii_Ej+S!`YB$]Y\CHZN'bo$oL#7pLdi6+%%'WF`2":"Q"Npb!MjGPf8Hp(A.gA<A/$iYb
%Q2!V^L,5"8Hf5[[b;Kd+,hXk@'HEdaLk3K7_Rq;O"B\ZDW!]97;BVlpX:5k4L3G(c&uU1HmK<>s4i"looS;a.R,rVT,B-0^5bS6I
%A=85;$-47,.q)"G<$J"Z\BOLt4TYat3C$`54oc;u4sh6VS>m43)J2t!7YWX.)^qDV':?Z+*gh#`/-q+8#2>f\0J*)%W!HcP2NSYA
%Q\*@1Jdht$nVA`HQ3GYt>lnP:;6b\b$80,fTZFc\_aTUEk]!7?362_g2_\-i[YRpL!f@<l8/,KY&f=!RL9li?3,hk5!WWqPOsl5H
%:^%.8![TNk=>=?4#`#6#3QRp[OFaLWnMX3@)4:Op:3PcmLnK?Q4U48q7[$i'UUUBO#S)qpD$%UK3;gm-Qk9H8P,Nnu!J0fsE0ecZ
%i%1lKJ3m@<-uf5B*9r1W"be6fd#%&W#B0i'AA_E-QRK-@s#NCWe4+to-urX%@a*W5AD/#uZ>bX-Q'K6:p_o[r0O.I#(2j45"#K*d
%00TQF.f07FLr'/R`0_/(ah[0E[45_?E\MuLTT`e%TJ(:kE7P&j!q3p)YVo++PK56:E5@B^6+W]k;'hAG3M&#A^uOYF3M(kaU.hI?
%"Qt#V/kB(:67I_S=>'s^A0eHQ?!q-cG]YFDpZ9II"nW#-pQiUHD0I>"5N0s^!`3>G<0:$[$KG+k:Ct?U9(r3G/nGtSE"^+nF-.H:
%4:%)MR6FI0H0Uk1cD`X$#j?XqMCYX,6WFj=HNrE_-kIAZ-qGrk%gtWpTu\_$E@t6n-DP+5E"#j%8Ot7U5nRKrntL!:a?Ki\oudp/
%M!<$_,2,:J"i&/6YTd&<O_c.6Ju*XjJGm?",&d]6J?L1J5R,9+MQ.+%dIR>L4:<h42@qF%7A(4SARYYt#go7WaTJ'R0;8mlAQY?#
%jMCt.o)\h[P]:RX'00C)JZ?di![r:_,%+Ma]Eg()G<*mPM@Gd>k>D<b_VlaIKTO6r%KQim$je$^<uFgTa+uK3<K7'iYREH8O965[
%2(!iAH-os:]E"O&PR/2^Y:>B.3'8H?$5JR.^/?.2j!5I.iG>/<WAlbq"@c!LL1i0eR5#fg6)L`W/YW9G$I#%aCl#=X@8W_R-a)1B
%<#LKmB\+_/9t$sS-Ea"#B2g7;ib4hfdXh<'B$SLVCGO45!X]Q@8.[#7@*pI?jl(:ra35[#!g&,jn:`Fo"KMMcd&]]+ep.nc"cS8Q
%.nU')Yd,R+L`J;[rYa/kYSWnl0*3!$`+*o/&SUMCE0Z;7EL`GuJ6FpIAWhW`&eGrIPU"HoJW-OjkR9r%;JQ?G&3*gg'P-^pN9J&#
%.$/O=U9P8\TH?oP=cS;1;f*X:8=KU\;iUu*!K9YU4qJNt&K'('_TK]J#1kS0Ns+c6[.?.W&$SqGar@9Z">_C1_14)8F?BcF0sVsS
%CcIT?#T28uN8h,kU"=764M"WM2)&$%TrS5g=Vf@V@+C"2otjucM_5A'!/=K%*bIO95\J*YOC+)L.A1?bKh`&lSBV=mJ&jHG)\-YA
%3Z(CQ+T.oY_5J6>,T-#8&<r'/)$aSB&BQ2RQP44-E0u)QDhO.2Em+STN'r6$oMcQn?kj([XGmP/[-[nR-OV5O%@8=K!AY$`/[MGd
%j9:_8Z!^G5WZ<5B&:i(>kG8P?%[_J/#7"#l`s?VTJ<#L6:'_V8_1o6H-L*?;22RN&+=:+lLrO'0H*A5K!CjpPkfc:9pBtD)E<Mpa
%`5Wrs/%jlcM+)>XDo]/8qF@#,0R?h=JrL/S#3mZ@JeE@V)$dMpclf7o\5F%\0&nD]+IK+pMI?i)O3+Y[^0Yb)5itLEQm.0pYpnUZ
%,)/quQB=ks%C.L'(e2?t5Xt*::r$en3P]AG7DYRI^gf,Q.6K4d_-oYr_hYN/E^%HNK#-qG$"+dqX'XaO_uqf6[b85c_"-Z!l?&.o
%b``;9n,NNb3\o`,)KWkOcVe[+?t(RI+pos/$>Z+oLPZ225ftXs?6p^G')++EWY?=EQmNK69sSk4Ek(r[3usH'd>R^ujJgkKS#A/"
%a7[U`^a&q91f&jJ(*q2X;ZJa$niUjf"jeGbLqoG^??Fs3,>/_!gL3srPX+>H$D8On/.i@1&k%E`#9Jsf-86H0*X7L(8dR*RJJTTd
%CI1ia6,G!@AN8F3X5F$B*6<`>rOu2A"'FLGq?O5uCN;'>D2_H9aKA,B-Nkn9I-;9KR#rh+'VE;RapbA*,8&GKKS!B/<0mp=a`'Kh
%WbPHD-'IU\$%p5V,R+Ze1;g^<Gb31i6E$XJ4;@t@KB=-TWC+?sJDd@5Fq?$9A#U,>E@LC_XYu<1'<GD,THKLPCJ7)4;='>sdsqQO
%+3[lm`tt[;6Xh14kn5,bn2.P'=^bi]V9!]l%Vpra7GAdsQ3(Jq$tfsf<]MQ4r#Nhg/.h!&E0)(eB`n^uMnm."Z%>]#AP!pE6A5PJ
%ls$5:EEMI-\D,(;7k7DT^4O3NK2Z/\a<lT>'L5MjYm-DsV]]J0$p]V64EV(":+.BNL`@8$a@U93+OQ\jdQNEG][Mb3))L3%=/>g"
%C+5"*FV$99EkL]T7%/0adKQJ88Gj%#I#/1CJ.a(t'F<rW?isuI'hSKR/@cHoPusW:mQdLO@#'7jNaQ7O`$:BL3QM[HkR6Xd(885>
%:I_uGE$5c_j9<D:C%O\6pg)W9@HM.EJOea#"mVmPO^ogFKV1Xo2d!HH:^+bC/[?HF&.[D<JHit=$0ql7;?gPlP*^#.MqLM8N`<)F
%(+"NA-mCqGO3S/!4"*Ua/4pjN((;Jh<?*l<*jZPsM9.$t<ZRng5Kl%$1)WMm*OZZu$+:2pY36;6YVJo]J<XdN=dCBhY`rkdKOcBo
%'A[a4r.-p7J])^Im7hUH#"H\],R-"R_$d%Q+<fnOB>TbHiuC&Nn[<JbM3+569h9F=<Q/:01)^Pn9J.=5(<CB,:BQH24AH9lV[<o2
%0R$_.0QEBl*:YKu8_A<16`L6Ag`<_1-lI8q'thC08JAmNgIO&c&]n]AP&_g84;%W/>dKr%ARl,ZcQQ-t#E08C?/U9XN!]D@8X2Rf
%G&%MgNo:+&<>MesEsrR`DGW'=j`@.4'p<^d/u(J=J^J:&6IZ/*n:Q?ZFMpA#@lGTX7iA(dh;/5T+CD@l80#D(8-)sI.2fpAA_qu0
%kd=t7PAPB\*7^S]nB8)rctFOVeQont/R]g>$I4N\gf1[S)=Ub6X*2'"&L`M6TRDqPS@/kmd?$\N/ch99%6In76BUn[Tc=_^`anS+
%W_A!%.ObppTi8#7`04(P-K#pFDc73I)E8k7<3`&fR@l[h^5Pbdq_\FF#\/2q;DX3RfX;<)(L1T%<E>bf>@ar]`48g.m*uTs,,)'7
%;kT-[E\nZ!8mi(pAjEd3Y(W"p.>Y>:!G=qb<tr`<,[;$\;8bkb!_ZMtM&XVmU,rO6@8,H!,Z/)D,UkQnHR2i4PF@ZgUP)B=k_fJc
%Knr#],@U?JOb'bdZ>.RK&a27X"+j][Ff3#1e88]$/@eZ_[0Am8)\N<@P"E:4f]!YMG7"<s'P'nS<I5(WQAKEgll$;c!]CL4Tl1=E
%832A/=0Yr'-H8kVaB2NK2Gg4F^8TsZLMMqj/n*I!`dJM5YJKXSL_.LLOXt[CN6'FI#sh8Dh'F4RViN`t"^L$gD%B/GF`,hSP;km0
%`i]iK!.GCc'\]:sY-1P;bb$0q?jt.h):CoTc(se/Fs53B^!lDH'[T5%'3;B:6tD+2O?,?1F-5Zf`Ag<B,PGh*.j>*=j-/gHNl`[B
%7KA5J-q2.A)6!]P#&U")D\+=:.]po0#.LO!B54Z2"[qKeZO`27+Y]"K!Y>J`aA-AR<]Sj1!8/B0-4j]&lUh>=i;SBiR5C43%&Jp#
%/d)K\9SLGlO5N\KP$sY7SA>,,)b>9@!5q>0p"Tgp$3>jGY]1gGE#"ZX!7<1A49U0GSkonJVOb@%A6@S+'UCS)=aP%dLfl\=JSiq,
%L5H2s^gSk<3YN/Ik5ZP?bs_7t(kCQ"AXA"KOBri\24:InU]=XZAcd$=FTE&`OAn`h&oJ0Z&9Crn5WFu0/4*PQ%!J=1#9ZiHMBJc_
%P_1uH^cEBDChm!()N-H>6:KmK"X#E"Sp,9$@)ASpQ5Rk+"B:2u2?g<-R6"XhRj;[Z$BNq;ZK`<e<<Ug,kY)^1e!'h:!EsLg!>-?1
%69=.a@uMUm*B/ZdjK=3J/-sme:o$C2@:.7P2J<?jMh;!4!Sc!4`9J+*$3gNcERle<@&g<$Z_n^sPq8&`!O)]"Ml$JV;*ng%#q-YR
%7,-Vg\@+r#Q(u;CH7"T02GdC6gP9d]SbRKh1'Rbg"qlYdc2f\2(R"h:Rd>YKAH]V%7lX/:]o7sRoa!8Tgn8>mB:(h*b$n.DZlQ]-
%dDEG$TN/X\0qKX]L^^H5M$@'-fe]jl*_V";W;mW5Lbo[<]J=GM58DVF@%H5tgC=7W:jFR7S;!ua7]$!1&<[2t;=(o?l8V2e-PfZ_
%Jq@8g6D.tq_*o[S$+OHB$4I[e"7o$H!bsUu*3DPA&u(J\Nau;L:,]?+_[&]nTIN]C"3%D?5mBGh\4O+EANN&-,*d81OK.RG-!Gm]
%L'2s"Zr8TKZq%bKo=3Bsn<>D@B-9=&:5gt44D&!Q-9V"NA82A_.h$$]MM.+UERJd8bh<bUFF]6CR9(,t#QYs=A-6Cspf6[Bo9'Ia
%T4=o7<i#,fGq9b'+Fk/Y(IX$0<[nB.4NUq,4SC?q`u&cZ8Ts5C@?2Bf+`Y@"U+6?`-Fn:[$"]91n,C/:^q6.QMjVKs!\bK>buFqQ
%`+7)TBMO+W`Q]fO^HrF/3"f.DXAPW=Z%K>^YW<FWY@K$b&ZZiuHc@WcJ4YtAM@31:Ct$Hb<C^5mD!tp`A5A13IE7"6+s]35<HXQO
%OiW&jPGJHmQjW/h";Nl)m'Ian+V<g3p4Ce&TR\&-eY1p.aqWWZ'PSeEa0M2Q=@c-$O#n=3/6Q\sa^sq'UEVCi+P$[7Q/eFGM&]P>
%MMf%<]L.ugZjPInR%ra3M]71W_[F(OP/7[L6"PSJ;`6Z4<?]s:gKYH68MXRO:`Vj=l>j^N=Us[5.WB?tW%=h=G0`RLk9C65%Z`G<
%c=/#Q%R?tc-,JQ-)DnZ*%ZPUq`n=WA"KR\9"UUY3.OX3c[c#[t!5V!l"onX+hB@DR?gOHI5hQ1s;K==D*;s8F*[<l;X9`:tFPi1t
%K#80FG[?mm::r5L"oBbL'^<'u#7@t2kUmu\`9eBEg9lnr?[uPt`X?,G;?E6>Wf@cm>g"ZD-.mfl?mO?#l!D>ZFpS0MM[XK2XUP>K
%],:gq:<J?28398p)`,,X%jBtN-"_-!5S`#V+/T%@T2QGTief3[hZ`AS&BW9n"kenUK&B`UfhS;F3GtR"p-jM;9bj.gMTpbtdS`cW
%dpZ-]$CkqMnQ6Pq-+Os(W<,(77?7.6[.3EAbsUEp,'^p(PHe9Ki(cI3AFK;%m0ZF8BHrG8F*n;go'%SL\oB3/g;0h[H_a6@HUJ]+
%'h,Ju?lLNV+u3;3T,`_4rA=rFfO9V`-k$)ed4R\sMT"<QXH'8(-0j4R&;$VdOi:7-fFi0P^s$N_$4Lp,4NNm'b5?d-'eIFNfsLq'
%<Fn6,,h8&ZLlb05&nMH[N``cZPo44^9MGYfE+OkD!D&rnV;T>n6V\6oFkb;O\]<>K]aAI,Pe`Fk[gufmc)C_S!/d-l&f:`tH[*,3
%-/27"\Ypc@<noH#,m(mS=E"pt2tKPL5ken'cI9ag]f4NA$Y`$e#SSoR+@^lh_(E#b>mEWL[Y3kO6qOfn.*gL%qii"eJV9S!LKRNM
%'::>\`L"hN*td23F'`hMi,<k<,ZF2c.fo2jn)2Xb%tP@oHkZT.>HD%pdAgEiI1<f*L=M>W<[_i'8ZYigaU11L7c:rHJIrd%QN4j&
%e02qC/nT`,V-(%l=(TC>0!%o*?*l!R7%K-<b606Ih0>/"-enV'>F9TuiO1sMgj!k.27NfV711/.UpUR1A_^gi'I:moS3qs;X"$P]
%3kh1GJ=j-jBLb(I$g_VJNet"$E!0(#=OsJKH'tud-I?%1f0W.(**@NqbUo9G1KAJ==J@YSPZ_3uG&?Lu_:j;TJ<Mbj"=UkH<B*Gd
%A.4#5k7GG+U#7I,7A4IO"\0(3Gpm']N?5kQW5VcXH5Y<%Ic*`O&-E,VRme4sJj"0m>DBLK*"'"3C\m3H1#(h2A=f;5-2g$I3M8BW
%RT!afhNBFPXN5`Ze2;uck<VNfZ<[td&K`RaGrE-C74dU(:iZ\q'V*=XcNL+TU3f_%o\IU,ABA!?Uh/Xan0#me<r_%8d+p+?%9*J^
%i=Wu&'X4f<*+[cR5bLeHm<Qgr=O9->&Vie(aOhGSS;Y'7&]i.UnZfAF;mL/qM;YsfVP)S\0:pDI'cWM$Bqk]Zi+6`X5WU:I5_tW0
%97aR!%4XjM0pr)QpQDduM-E4J.+g+JX?'H27`rLn4fq2dQ:QCU!bTM&N[phu-R^c*`pbkiaOtD@M2b]h?>d9j6<6!&C@+_Q'n%br
%"GbNmSWG'"fffP6P+?g:=iFpb!>$KT+:\E,d:6Fe!faR[*E[6c%HVjtrQ8LYe[A@DKqpIh:\R^VLf7ku.0s=[n79Xp6eVRNGW(DT
%f`P-k,?Ora*hVdmJ<uc>O][,^mV);.38@>2*3CY66\(9"3.8NT.^=O30njb/5t(5V+O@U>!egmekElL0V\87]\7<dn\H4B4-uNuK
%^]oBn.HF/M/XPk+7Sjeg"3fA"lF=sp4W[BoP'W.'#45<SE=04Z.+&Y7*u_qK9IZVpZSW*nc6YLT$&k"TE:K.uG0:.og$U?2R#]X$
%D?:'X/(rUH,`DAD-+g1no/n],60*9ZcdNAj1BGm@8s&Wk$t2H;;fre>UM&.,Z\m[OVlCrP14ZIP8[93rFABi=S1G`t&a!3uJe:Ft
%NnL*kP0+>MEcF4H3`:CSKEF#O4MFQnY^8'K)G>)\TTZaHkeJ'`#_E&MDP1i%CbYAV&-[f3J"/OgN*V=p9eHJ]eA3aRTjStM,IJQg
%!G;lPG;un&EeAG+ijW>k[:WLR$(HIlY6,Y)8OKB5G[b<TH[lE;Xbs/P:84jZm#6!*i><)Fg%4J2<LRr,TVP1<"cse'fQ4sk6:?j=
%,bX>S4;>lA8fE`ZGW\,2$"3E&1_IRS`=nr/%8GEiA[1;D5`$-p9LYeu_Z>cZ^RTA>KYt^A&@J_Ic8_=CoUn(-!!8]-2@X3:[K\8`
%lo54a"G)pMQ2le`oE8)_!.c?\5-T)tL#.lmnbtfjFO&s?p&Eq'\#e;L>hSc`nfMa>?l/#>mmkj@/q`+J\`'jE1J(Uk)k<(RWbgth
%*Fk$g@n#a4DW6C9!bpG<@`=3>0k3DfX;6^d9CarO?a#<qi,an.hZ4eX=F:<%EoY4DojIsjSL'/di_+l2=A8d`hGFn)rfg0_#%`,i
%:Z+g>.oe]-Hd:?'ZTl"_bq:DT]IqV&Kj[tV_(dFVO'1adK&aBVN;usNl0c=pU'Jnn2iS,(ZUgX"^3iJ;=-O;M[0$R9^pIIYO-FUE
%`$@tkMF_1[a=r54Y_4E?[2BBHSA1'Y1EOU`V%MN<OBK2>D$jaY0&>^N7<SP$`rW0dWd75D=*\r3cW2u'K3--9CfY"JRCWC!p47gD
%5/@$hA5e$Q:Wb?[4S@I#WgD.%mUV"OMdZpkVuHE\ND@UGIQZqF=JNP-V"."XPasGsr"cc"Ufq#I9&o"ef4%jh-mI2&R;Abk+;H<A
%nJ\JcVrd?GCCOiefWRhd*!XE_$Z7D??S.lS=[u;n(=l=(cja6tUW@'3'@B^i!n&Y793aHN#MRAr8RRt3qQjuC00gT=Lr[SG7/\ma
%Ye_Mg5DCHaPp2s4?q;gm<tIG"fK)c473jN6<T=Ze=_Afp&d$lJ#cX2l5g/mgR!OekpT6o?$h)`h9L-.H(7=-fis=50bsB[\MA,c"
%=[`_=$mP'<i6r/1AdB]![lK31bt!:j<ID@Y3VV13:mLSjfW?h-2&^_@7`Z,j5.?J5Nq:9k.BJ*N=F@Zrn7@Q?&$k)tK,V5D3F?<P
%[&Q&h2I\I]R6YaF6T=I-^hm315C7nsni-8/6Me`I)<#hH':]hVQ3OE(YtU>Rm`N[ZbHjq^QXS!kCjE=r#V+^5_85+W1eU]2iZ/[J
%.]BL]?*-'m$UiR;nr8c+3!MQY@_bL+@d,b33uS.BGu,67V<&$m.L^i`J9AN?!`cNEfW&X9OW&B"eOWW"K3Po8>o:2#(4eV\0<&.D
%S8Eq%9,:M.$tQ=.C!`#BKMtlkP#.sPTK2S.#EBW#HsPdUc;U"XHHXOi+u?APXWCoM`pJFQ0e6I[5uram!\u7#($n2Y:^/%"/ntO>
%CDo/af,dumB_Dd(cqBf\12c%5+;eVY+4iC[KO/(pM8:\Bku*C&#NTEtn)!,@<e\r&r4YkC9R8RlqaT=8!S^:^m/tof$b2ShCrL#=
%S('\e.@U.%olP]X0?YL9nfO7.J1PWAC*"p-(p#eek!2t!C5,fToc].7(>VB(@*4A&@jc=]RG$QJihoUJ(5=e4c9%/"XX8Wg8[AhF
%1>s;toTeQg%R#bD69M*I&VcT9G;HE/<nTY:1Lau\_@gJ&E2o+76oEFd`.02_fQ,BDYg2PJ4`,iJ:I`\G1%kdFH;L:6%WAUYEpZ'r
%qq=+nIQ@k3q3h&8#SF.jMSbQh__)hLR-<7!U&#%omh&C-650UY#aF>I-=0FeZSD_ZLI^'+SoI7QR1^cmYegN_a!U6]B?LTTUq2UM
%JR0nXCGKsfDE?^X0Zq3;@IYGKaq9^HY4<UYTm53$oe(Y>HXG=KTWYJ_r?5Y,"k-(\airUTk+"lU+D#s,4G<-E,c%E@'RMAe!GoWt
%S$[$o#M1Ph%6m?'6TCfTN1OKu6M3L5R>X"l=(W\Mf$\<#i"Sc2VQnB9Ui%!1e=aJceIRh!mZ4"hB8/Jk\U#.O8Vk:S84s2f7,D%=
%_M?l57hWP8\_SpVgaX1*Ue,tu1/\bp>hU.q)2PJ0k<mS60pT/eo`&I*2Yc$!/#:n9$omsZFq4bR1ZC?mg'm%LnIs]8e?B"^A(]rb
%6anKGN(LXY_8VZ5N?3/hL1Z612fGY'aa%NeAsF9u%!&0VOLB129jZ?n?OFWtZk[=W#og^V@bm"(eC^B*Q8D?kB>h'R9*SOB\Q2-L
%W-'`Q0cS2u.ZFFWJF#MGn2!X)D(uoq:f9_9ar^mC%+ic+Z6F+&a@+u=&7BHlD(=&'dA/%C/Ep2t+?Ngqgo6IT;s/gBK6>(t>*o^;
%1HS]r?"JT??CYqb/N^<2oLck*Yh5m_dd+s>D;FhTTUB$3YB&Y'%q]PbeE7**JJ_Z*PC&,C$t7s0I"]c`DnlMuctj.NFU7!"dc*Wr
%_iP"0<F.A[FWsn@Id9Zl"HVG.p8#qLC%([B;F>K+6OWp+)g]N^"382tC)f:be7D%L&c#7#\I$miD60RN1\P"@iS2*5b*=:h7$J7r
%KE>P^e'HNACup#b,Ti]r#^V\6adcM[KX6\*Aech-\;oi2Rr;RE>li:\a4TJ5i,t9R0VaS:b'$9qYp:!Q278oT'ZKK\I'<(&2N'TR
%U)O;Kgb&dX42332Nc+M5hP#7P9GQ&/II5AaT)kL)*>MpB3XL[FY]l0g&KW)V\fTFtA(_4Q;(b:i.7;>4+sJA]k`c&c&/W`a'K"/%
%^.NDoe?93+j@H1SIf;MbV?+=TDFM)6A[DMD;L\rlneGe>rn7*"&<S@dXo[B'[5)EfEhm=pg@-p]IL^mD=&'^.WMi71J;uoL'mgpA
%RVZ,ioS5sJ@+bXH7`,N,qYU!W1o;loJP2%#02[[D*Ybh^$pDk80G`<Ri$6-50;;B1)QXEO^kj(T*.Y)IMg1m9MVTiT"^nLqQmp1b
%+;TjJ";6-<?9"V-@@Fg).m&"SE*6!M$;k,LJ/JE)4"t];^k@N],t+`\'c1.*"0.V>WO.ZoB&F/X/]&.+\RZGkfU_rQ#nkC^s%P&-
%-F0$0HkiainWfE?UjJ&#,J`?`!DnC$oI-6MllHSr7FG+r#'7JHls<_X0+dtTPVET7+A.elVjU6[4%oRL"SF7kf+>1o2?L2EAV_Pn
%+Z[&b4g7@rf,M&4Jenj$_Ng[\TT::%7-cZFRQ?:^N$]3GTGC`9<_:_@!)YF-0dP!X>#5OaInGdp6(k![D0&0X<\CETQU-mfRM-G*
%KQPl"bn*n.>=(77:o4q$c<@1tVj^S#8oQ9;,-;fH<]IoJH'saNh8a$4<Wu>u@G!ceC)mp'$!Bf_L*TD3H%$FpS`]BkCQ`F:.WF3Y
%aUZ`9KRr@J3i8!Ana,QIpO?k2KB.TAOAs't9R"upcR0Hm'cR-]:EMN>IeJF?M's^>-LN2Z0U*1ZN5jaD4I5s+OJ;]`LoTbFRqdfn
%@NA8l^7#!EPj%S_X1K:-/:EI2&j85]BbWC!!;<ia(m("@EYD@b5K$H22$+2=P4]u]U7qXY:'LWL+<qh((_dAYPDG5YY<d:d,FR6#
%Es`aM"m(!><-X-88?dANPd!4K:R[`h`W&:hO)B30<1p_8,Je@3ZlOpgC][kmf[p;5P*4e+2gaLp2H9ipd11_*f;!uS?&Rms6bZS"
%Embl"&oH9:]eU^YZSa.'2EGH.Ra<4?M2L)!Ss`DtG-RV[H,BVL7>2%$$&8V4gnnBo?D>i*5!pn_%liFZRn!rPT,@31E\[?%T_=pq
%/X,ehr/N0i:&4UF9>B#<TjCMVOu(Q?R:,U:C#i#pV8c.Vn)WsGLTHNic?fn;'edZO/DL/UVfsW`Nt/&DP&LO-L43>@IRq!1;!t&@
%VeZ!<f<+^ZcT<sd&.)l-4:UeA;;54QpM3@/Q#4\sP8ho/\>>A5.maK<^-tkPj:MD&)O&32Lr_45iJkteGbGjpN/@rT\F/c,+q?M:
%,]%H:#P)fh+)#Zk#\CESCsGWbN6m!i^)j9ulbG:jiaFc3(CLuD)tdeK]2N*-GbM4/O*HR>/:aYb@VHOfK-I<#HgI*#>,iU[WpPqN
%`ib-?=R%Dl*0!M4*-;]Y>ub0!6tgPXkFuhI$F*M&Fkt27.48obYi`!6`cKLaM&#,ah(O+C)Ds9ZTu\/tL]ScPLa[:*7c^]i_,a'C
%VU#9LjeNJb#KS./Yg*eK(W([Ph"ObD2b:Z/E6maCSO?_(4_?M0NVP(L0jYXcLcd\:Olg?9FP>HW$?X#5+oQ)QFC#3,mguK#fE,jP
%O4':^8I!QE8cLsCHTZ;09Jm\o]-:$YCXRSD9&^Pl=[Gs=0?$C2:[DjFbYC/I+49.*P(B\NUlnkt6UG8%D,-h<aBf?C[G-b/9J-5Z
%+p'jB+OT<9CR.7Y.7J.^jq*t.k-*"<Le9P_AJ()BL@aeeb!l^2OQZH"cPZP,+^<R?`a*E>1Sc3*Jc2X6O@Q>U<aG0H@j#=Z&l?.R
%Ke2Pp;q#<>ElqEYb2\XK;Ymi%X/%`d@s"_;"`9t3A.W8`%(^*Q/mHLnTah6pE$4r^m;GjHiQ-1A*A&h#Ns$R\NU7s@1I<pjJ>nA=
%%"\-g%qju3^kL[$K?5mgBW=i32E:3mAku1X&CBM@Lu)eTN_2A;a#c,-"7U\1Ohs[b7TPkk_kDoukYALkiSj$UPo[t8cD=Y"La+C)
%9ITDg,Qe.$m,Yt0h]k$lDDEI`oP'3`$\J@IU`_1<82,7!8i.ca>nUXMJ$oR.q3@/EJ1-HX;S+)c*"4P=IpLRU%Kk_HAtXI$k.%!`
%``L]O!b4EkP#0(K!DhX:XL=+M*H)!11pI6:0S5]D)d&5<a8D='82*LM,F^\#+op;$Ea=hCO*%Nc@I"p`[EbG6MeO[T:m:Ut]XC:m
%!IW7E#Z,?L-4KVtY'ko8fUbC;K`-<(.@?/XF`*;3P^L\ekuoICPjuKf4t@G8oBN=/ULK8_a\'&*O']!Xj_pfB'b/p=A0+i.Bs_Xt
%r5K).'_c8,,MBu1$"Lf>6MoME6(rM\bLWkCg^#.YGO2_AnrltBl+??=ZgNRXG(G:%<`8u'=a%$D$;I2[!J%.oL(>%CllWQ5K.i?d
%S&2OfdOgljV@E*_R`!G;dN,:Y1urG5@c4&n_q[P_0&eHTp'd?_=3Z2(E0D^UCj'0lA@[J](']R`rH\^5-L$]51!s!ugbiHmgcTXs
%8h4A:7]r4W15=c2Mu3=nR0NsE8I'16W$eL64N&P/-gn5t?HW^>JIX#,F%ufFXeMK*5g9=2Ck"u-/cCd6D6f4\l&o#j]IJh6_/^H6
%+\e`&dWZNjHZ2Y7lp`["BnW[8m13D>9@+'j3Nl6PTrhg41u?[aLT5n,;lGK503Y"XT!;2K;thP!_ETu2ne_$nN2!B8be\s*34C,\
%EQSm:X+hE)=^o;Lh2u_!mmZI4L@%Fb0Jp-(bb,1N.aiK7$NqM\YO/!$'o]#b]?#Kq3,Y#:P,2P%rKJg^VaM`R/[t92[T`MQDORGI
%(u,eQ7fmt5M_C%[kR[j>V*Cl:M8d9HIUS)76RaBRoc($d!,Ho.^h=T5`th/L@;*p2=@lL8ZIc[9E(dCR7:g9if*%bV1BAu(dZ?Ns
%F];'A^<\!T/ggA$pRE8Z<I#:*LFP0G;R5D(O,ur_nVlD<LB#^5P](R&6&]2uVWK9nF1@HXXH>nN+tlHS#5&c\`St;7#r1Y`>jLY8
%O@ZQEGheIqiT-eT\.fsn;tsjU/%%>C<,brE,WCSk4#!RPHFA&e<Y:[,r?Qp-Ll((BdM^&S#PAm9C1hG5^pnN$Qu%XR,0O66;M;N<
%\d&-b19p,c@Lp[gFSu6n=iK6W3BE*0K7Pk$)`:bB4d4=d@b<TpK>tm`+G!%F)1t'#f+G/aIL1hPC?pQn/!#\*D:#:YR%?_.m>!ZV
%^R9`te8a<NjR$g;_XA-QYBeb?-@+AnUL`tB[5B(O<.[n^_Jo@k!'[n)>Hu4k(;>;1dnXHu.:?%J6rf43@)hE_#lm9`s'52nHB4(A
%6@[rP@_:o0\-dXH2*jqq/S>hupOX4,nU:`(PJlf@2Omq/W/TG;LfI:;`ph:iXi,(Pl@3-'QY&O-li#T_X:q,M2rfs%An]u1guI(T
%?<ED)]`SmX4q!I6\su^(;pn%<;TB\k2/p"b[?e$LD%:M=1)$F)eYDH+-7Dcn^g'sAN\<12m4D.RC=`Yfk_!W:GMOp;9bLDFje@=e
%&71*C@UGNLa;s_G`L%i)lpDJc2RTSnFPZ3p@n?Mh[[EeQ=%VgHMX7sA!/,'g_s1(M/]JMm6lk-0Ig[>9V8G)nm;WmP)[,m@rI-Pu
%"m##MZRCa:V]c\Mio0f85!e7CP:-8ZZjnL_*.&Eno;Jho#Ul^<%YnBhU<Aa3G#*6t@)^rHQ8+)A;3pIqh+nt^7lW#HEW9)&E'!M!
%+150HcOluTTIRQVm;P_P2WS2g`uJ'0%2s@ES=I"%Y\gEUVcRMY#cuF5cZUetQO<?oB)cTil=3##Y42Z`0&s9u)hq:ag0U-nFXQj8
%HRg6+Vp)&b)=1ME&M2*'h?o2SG,oN,8o.OaYg'itRc71doh<s9K=il'_KU]32?!s0@YC/MNI]`?*$&D$-%Wm9%sp$5MjtRtR4O2M
%UsYL1O;u4qWb[-^3Wa(#R0ujg3F>Gi;L:CeH"&S)N+TG<C1LP9K:r@j+fXmhGHpR(9X[#35pGE?hfE1R,spR2UX8&?h%YdW&8Z?e
%Og@d;TumQ#bGbgdfse5(OCU1=8K4g5_mS_^61_V_nqb;MSFCTLbE9`40q@cq+ArG(!fY.KI=t1pc6`@R#`\_@)oWbt_e4lAA"`sN
%7p"4V<WT:-?^QME\jTsTYm7Cf<<Vm]8+q<pgn=YJc4XM]UElZ>bF(mbS^GOWAD\^n>7/lLoR*pCeA@H]YMg2E4]nSHPcR#\'u\1(
%$jsO#_gdiaL]tRlRR"Y=jrJ%q2g_Ul2oK+[GV8mb:1FX"VQ``RqT&hpRP8^r!_fp_bl#JHKHiLq]2cB[ISL"0/]?TiLRinblMZ*o
%37/S$7[Q#$\^%:K6@Q"kK.4%+fX!2=-HI"/D6]:[9%aTk=Hp+n\/Sn($BN!O.TC"Snf>N,,o3J9r%>J)HKg`BMMe")$Nd:ip)T0K
%Tb]Q;MZO3N>cm$pZ8..ck+U"-duCBJ<R+5V0-fBdRUeLH&`f=XWOV*Kk+"W3Op,7=Tj2QO7C+f+R)kB]b!jG&\.auBV\*0N_H1UM
%q341V1,p"6?;.F18`GW?+eP*@>fdpuat%Io8O<Z<Tc08^d6kJ/Fn/1B[:8S.jbTU`/YODQVU`r0ap:r.HT-N=F)3&!BBuh20%kW1
%P144AZ^\i-XIR7=i,cu>(4_E'B!gq>\n"5>ZCr$>YEbM2+Cb%_M$-:ZBgX2jOI6JEes9H6E#E@"kl"oC5.X*,gJ8PBh_pX4,UjPN
%7"Yr,e/maN6e@cID_Os1MtJ%mF((HAloOo,p7f]mh8UX+Sba\\=t!-g=?t.bV%dVhn1uU,FkCtlcm$So2bS7(4#gaG5b;DqlmD]i
%Pi,#;LJ>l4%M;Lc7Pe]@2*d7uH""cTci+,S/:Ya.YU'Q)ajAp8'l+ibLZ)k<+SO#4$(@N$-5p%h<07D\Es('(q5>TURtHG7_-h/\
%"<p[JCn8mB7BNP0^hYjW&&jK<'gqPdR7p>s"IrIjp`B;\<Tj0Ee$7>an#sk9!=u5L"Sc(IJf^f-4T\t71F$`4j2B4IDsH+>'PpVJ
%B5R;E[1(-RGPd2<[Xc@O%/r+>GEIEth?!PPeeiqmNn/0oD=.5@9C\NN=;YXWRJ#nKCs.h#0n6hg4;#eW/#d1`GpOX20:Cms&\o]j
%lN$T@<;Ql)0Qp;;3H@rFA?u2W"'[XW0bgCMUqg#''R(sQBf=j]e,p-%[+,H7JS+pk"-E(.1NLk"_!EteJK+^!V/I^<\bMsFq$Wrq
%*[!Sr3Lq9o!=*n.KOXkW:eY[Yfngt'CA#oB`"U/lQJ.]ITi+E.57fnIc,EHege4=jdX-Ka!FCu$77@d>n3\kPF%/>g&Cf8k>QBJ^
%$#4H5Qs;qF.OfX?T2<#GK-:`u"r_*sq>518'X-ZdIZeC1KD2G8]a=Ro/A"rP\:#eE!K"F86]OL9m/b%bI3g1/f+n*=.IWG\#B>'&
%6KD8Dq.\Cu&OP;;"nYYeTlXl#AMhGPfX$RV3&%!GMc"=eXTF@/79toO.,CAH>/e)!JC$Q_NH.iW=n`u'[<=K]2r0Y'59j_#('&8I
%D%J@^I(HN>W&<uTr8jO-@`.=&1@!70P(#@U3lJ0+1(oZDdM:PDh@*C.+hfTsp**bC=eGRa,jdbh^(P7%00+N]&W-u\iF>RI#!#'-
%F.fi;rO7;a7(5=;hGUt0"%X\r$N4Wn$+nm?\Z6rdQ(OP,"7(Sj"c3RiZ04E2,s;&r_(%J,LMa_8:,lo]3W@Tr"GOqR32361W6*B[
%Ed%(?7f#7A!(@#iUnR"W]F<_91&fU#GfJC+'Halp@aS)p[Eb,P$d5mPGBe&5W<GrJ(!7BQG\P]"Q@E=YW+[$#+Q$Ki"3P\>IBsuk
%C\s0<raUlbI=uhBe(18neUCa<[)7r7&-4u_k\a=,`<NSVJJS.pJMB<iGu6T>d4"H`6aLM*<T+DW->.Vu.tp4@f"AlBpD*!uNpQpW
%+d(YuYe$tZq(oj[n*Nt2R$@Lt2KtuL!(?\6(*Z';lG3!^`]ikGM1)mG]XJQe91USdU/:5Gi$Jo.RETE@\p[Iu;`uu/n=@iaT&%"K
%#001^067us.WXs+cu'tpj>6:L6[sYfD55EdmSk1Pno?";Or_5u!'C*.&r(aFfPIZU!j'$kC47$#\Z@N($".<>#k8Yil]8RSAQ*3k
%O-#^CR>HWf4euTX,n?HIZ>s$M[q"LE3X0@&cjZE'HT]FK),s>Na_j[:#:(%[&j0>N"SV_M0!^p`EPt/Up"si:%-f.qG#&a3<;Z(J
%4qU=Cf>i?SJ&jq0PaBW_.LMMerlN7,[j?ET67!WEjk4h0##S9\D3l2="FMc6k,6HkO60VuYr$=7/p1<]4N>qK!A5D`2!jP^^*Ve)
%0pm-GPKgpqmanRu'!]!$;c8(RiAK?.3p`.5QmIF6=(R[!bHn*0^pM9#^I<:95]o[DfR.!]RCeAUfE2i<%L&-Ug6Wf,?!+?l(1M6e
%7IT&a:Kbo*B1.$rj2BLa@Z]DoOJ\ie:k6g]CY:#1:\0<aWM0Mo.LtT,eZFtt@lr[$hjr"nk^=6gpt='-7<R:EYI^dIURVF"$:ud@
%^H^M&BE;7kj]^SGU_#m#=POD>A`\7HS*o)A*kug#-qGHMr%X\sFCk2$>9fU^XWtV[p0MEk#,#I$mX+7/BjSlO(#;VmrcGGW-m7%Z
%^'r3f=Wl^=\q9/oAJ`MODN"D\&YEsTk)jJU*?g.lp6*8fae"b\mLKngN=_Y2gm`kdUPVSR/toWm^`i<_&4q\=T=+N^`,.%\,E@:.
%-9Do!9/L$p<c0XR<LMdc'S<f5KFUtfO!(?:8*[*7iim^]V@:/)>-[2+`U7T::c-XJ]AFH#,@qd1)8K!CV):IN]8IqL9BMgL:/m?`
%>4i_nhm/AV1IluAPln6@7Z-qAO%fb`2[J4pe@/51Wjo9WIqZJ=OB&3!!`l\V6$TcRjP)!h4Wa!u\2sO!9Y7=rH3^69Q1!to]aPp0
%1V4RP87(fb$uelCs)Fa[O)CE"m'f,IJ@BaG"b'mg%9k4-:W\FZ`.p<Igs=tO`<^<=F`'A)b8t5\VZ;@:[iE#MR5`$9CDq^+*=e.-
%->C$:H\XKl@a=]@pW1:$:+?Frd5H&a419gC^070816:eLhicJWoL,E0S`aO9e:hdDFMSpe9!N'a,=TDC1(mP5*j)F7kXsAn6$[!.
%6>6(-5Jpa9DHAFZVP:PZ'C90m@TK9#A)c>Nh/c+C)@cQL8`H!pDcKK4bDF2k;n@k>bAZgEfBS?IY6d"BA_k<WZ\'-DC*EtIjm":^
%-$oa7@=>MEE1.[ae$7qP<k`5ZIh.#gU[kD9.1B_K4b9[i[%6?\:?8G%8#CDoE/Ps.mYd%j&9f?m,[jHgeZ"N[8L8D>e]mB(Jtg7N
%8pG6kgF%/_$H:F[>a\j$.8QNBd\_.M&+\d)?%%HjpB\01CAUt](Vq_54=';)gsB4/L%lm>2gEq<'W$V7+HfmBgR=t34A\KQ2!b7[
%V=o9BHaer16(%D(_&(nZi"Iaj,+o3.`#cU;@R>0:oc'i4S\?%C]80o,S4$dkh])q1oB61"i#/hY?kbI_5SieE;a?PZiJTDG!>K7h
%GZT473%_4P)>>WODN=Bm"N=M?*tr,J=!u^X>a`+2UOn`/\_6poeCWR"DNHBlNg4FfVS-2ReJf:#+@bQN>oXr&.,&egU@KZJ2-!*#
%:K9@#LtE7Y;on5V`5859I5%po`+]e9&@Ud!X$\>*3bSc>s#FE[!XtVZm:gG$lTd]hA4@GKg$SW4/m!5Zc_u;bp=6ICa98if'oY-f
%E6t>ap><YiRJs]f,(GJJ=k4RD9s4kXl,-!3;'2LTM$6#>C7D]`j<Ko:%*Y_"#2%.,G)AE70;rI\0YA`4-(s@&eo=3_R8,XAWsfW8
%q.O\G&gL"-HM3m>_c_+Z-sWOmJj,s*+Vr.<.ds14-Ck.i7U>a)15(pr%+<#24UHE>H(4mn$*ljV55ML&;=NsDCS1=\3ZFgq1a*<i
%9sk:b)M-i%*N`a0g+/rfK^oF[b#TQ=Wp0X$#]!$Mm798Df)6$PP[R4Tks)]KX_\t%PgNbIR)t*m]2pF_Do7O(!UOf9FCV#rBiZ<,
%]Yj*u;'DOCc^&9M^fn)%2Pd,[C^P+eN6OR5$FY9N=0&T1]@:8WqG];McG=uEpD5V!$TGg8W3@QK>=/UtB!\+e3NFs@V#"lgC<ZS%
%*D<j0fYipq/^p!hR?o`og#am]]+1l?;QEbW'"He5</Lgr4FJaQ68&dg#"KMK,Hr)eqg:o3dfMDK8_"Q.PRU?UI2;).Suc`1p6YH3
%d%WBuXhG.hn`Z]0IlQC)bKg19W`3Dp%G;NJ6ja[7NB']99Cd,WZ/ZhrPd<mr7C9%]EDhNN!G5B15Cpg=6N<=iASI1HQO$K^Ph<U0
%h(uu^79t5\_:WB3fKcKO*tm='Pf2Ldl>"iPgHm0)i)+5F=Zl2=EU@DEZ3;tg2)^J+)),_oTX0fD%2Xb=0;-Oh:8:T8g4>*.)oe$V
%`"RdOi0HJ^86eU7."$OI=eHgj!kf;M7o`C=AKoO_oR%2qs/AhR]\lDYYg1P&I:>(&25YagaFXtI-fuC..fS+^NfRs^hM_A4!h2=\
%9RGGs1#]"qG$i%AWbdVC(Y3jb%([o7[WFr?Cp6.#J]RkFCa@Z`D"kIs_>d!E=FmQ0iBfk4dS38tL&J29WTAPYW('kLUW\CSN7%[>
%d&Pd:I_<Ll0X7K&1"g<IOf;10?`LPq]"sr?%KV)C^^T)dX3Bd8022A^17R4p)/'/C<3'4mm#d]N+H%t2N8d(0hs2P;15oM33P_<5
%j%h0se9:%G,r)Mkj$b5<`rC'T!UOVpf>G[W+-GK(M=3q5SY?7sFf>fHAY,JD"4(W7"lO2>aV;D7\duuo4:HJ8,bd=Z4bYPi9LcO$
%,=iYf<a+*u0*Til>G2hHq9H'qs$A`BHsu`*7ZM(W-jJ.8gignkPoCLNR2.bPT[QMF+MK>[JtdTb0Z=MY7dQh"j)59%(Ejat*ZNl!
%YI`8G/<I<:@3`%t$6stBEmSsFp(Hrc@oDjHaD*9Jm/A0c4\,ZQB;7%XeQ/G35^:.nd9tt'+tX*jR7+-#Wn602Qji!TCfqqj[2$SX
%bt7$;2#pKA/H3"?GhnKV-1U"lY7VES3r]V,CX_O_j9Q=Yb,]*_*&04A'226#/Z+GH"R+IfG2m+MMWTY!)OV1h1R[kNW);iEGb(rP
%1]jtXZM0!AmRcR$BL>W*:)eA)JDjtLMQ[,MH`<hnFL11"kW!_-bGJ7HKY5CEAtb20U<.j%B(\WJE;jBfi.+s;*?c$hd*gG+M+h_"
%UNZ^A?/=s7WZV2LY`Xht&SZhbV^X!iYskU@L_21&R09!ORn=fU<$P?VEu>W&,.qYmMNuSIV5_CL^UhVu$s`KXSsE@<P[KOG?rP.'
%.A;S$'E)XbBYH]mM3O=nP-Nl\$)Tqh2=d0X1RjO^'PIuT/J=``d_%oSa!FS<,g[Y[j`J5oi4@nImN:%4cXX[a#oH+Y"qJWC#]"lT
%VW0qc'Y-%4mYelXkRIPkQL2)okT>8*T!3\7-*@4HiEq*4+c.sG">\1.?.\YNL.?r^'/!KWK+^@aYa%WGP$A(`W^.&af]FtmWs<Sm
%"X?j[Z%/AL1.Zf\l'iJZ2^L@$n'*cJ*(I?!fEjh?%"o:ii<Ll/<:2JTL1%Y>S8mk%b7BpR&ke)")kq[G`XM)XZ.>T`VgE.QL+.]2
%9R9)N5I43VK"5G`QpPLTh+*&jZEjL`Z<:5m6%5Xu,lh1#TUb0FOj6bY..AE]nnXn;do[4oi=RXTo_%1E.buYqA0TOQgQ]f'0qqVf
%l,$tSUTWY^&K(SfVnh55EkRsn>f+/cgs3a],R5'Y7TS<)9^q&3_2K^@2]!EK^n_^1%>oh=#9E_<7S(ELKS$R\qsi+!h6p9_,!ihf
%^u&rSKos(p2`D,-ZhP$b<h#g1?Q_mIA^R07ZI?c85tO-H+/,GGa9U<4b*[T_]$@N>0HGeeel[bM#i^RQo23I'Fs@<GlWH(L$,!^@
%.4<ZF2DfV#)1%Cc0@"p%U$4BhZb)Bc1Ad_bK7MW\S4L/S^eMokAs>c=h9BboL>pGhETUHb-4faomt92LJP&ugY?R0/=tjV-`*UAO
%mQBe8Q*q4>d)"M[!U:AmOB*ga'Y8L]8>,Onk2S0F@K_8l<ESOF"(QuaM*\#u,JY<?7';@B@iS)j$H6*mV`M[@pfOCU.qI;f]Q`0N
%m"&"jYmNS@F!\D-q!SEtnB__L+ZZdBL?L0F/<Q]A[8nhXP0f<;7al)t)'SJ#nG<`\c`K6t%s/CnJt>Rr'@j+-4#3?3/4;o.IhpE\
%\4/r0dL1a'22+V/+R(2XQb8QuT#oQmW/.UUJA6&Jbp]rt_K]r!k<rtEc_*M/&qo;L=HC3>H4,6b`<,^#;78FQ8UGbQ\h4/<+cC'[
%PI.gu/D_.[#_Y[<T`j-[1^"A5Q.Ah7qcjQkVWK'L>DA_s"Anq"@k1#k)=2)0acbs!$^mK<n>ikY10eK9]1[YoWl_snlf.,JWlc!+
%oj.jYad'h>r$BN1bmnEsP/N4^:/K[$%='miZsek.pk@>V6%s@oO^qOr":%JRar"tAY%0r()]0-a;`g:?+!tlp.*Z/(B=I]d"-kE7
%.+/K_!>'0)\i1H2N1!Xo#J4ZeDCcISDG2W;aBsa>ZH0as6\c:sM!WfK5*nb9PF.&:[R_^L[</lgKJ3P2bpaoH-4;k\<u(BWJN33E
%&.C[C.7V\O1/t-JCY>m$1:D^oG$S$9`s%6h-+1*VQ"]Z63n8;LRkBg58.cAIFSlbBr\6;QFG[8eA:06,/e2FC;`#hAbr>^+)5IjP
%`I!]#Z33fZ3Zp,/JZb4r.+4N6Eue88NG8($&&BZ'ECY?a<a(6tnR6=i9<j<\:!j6#"t@^aF[/H)="U"YS49b-LWRV(,J,X=bq$,p
%X6H'HRZ?T]'qOe*>,rO<^o^QAg9o_Jls2,uPo=MFU,`q<kTk3<>%@UH0!ZT5'F>=A7!0+%6@oHME%g.T'lR+WLR4WJCn)iD0UsT3
%;V:qCmS],R/*7_$g/J*Bl3<ra5R'62+QJWYgH(M90q0kPmh,F!FH8K5W,K)Z0=aQP'9IDr7;PMKPOSj4>,/QJfsFjaH.hC*[53Y'
%T=Vl_YLqa<_4$sc/L5=q%(X`3h'AScDg9>:]3I1BCYsr/NK2qk4JIG/HY1j70+[I;!kD9k/-[E('X3NnWkdF/e8D^*[O(^cN!jT4
%'8+hHh$B.?1(q?H5n413mkK.uJLp'("hKDNSksP^#=1Y_Xp&DG5u:4cK41LQ?],O^'i-I?Q]"$_MLGe1L-kS@je9S5XTfRV>FnSo
%PT!-t0=Zn'HUlak=,TPN%&QQh0N+jM$!Q@EJTCsmP\R&r6NX62[([a[Ar*5E*a5<GB0bFM%O;JSoISHHW:(FhCnSLF<KokXY@nX`
%]Rh"!Lh%?sEsA+=d94r;k)@#"Q!8"/.$1Jf813B@$&[HG#g[5dJElunm-eEqPm[En\s>ppS@nS4/f/j<KTF_hP"PsV8Pp"?"mP<N
%L%7hJD54R3%4!Ml$sY5%Hs^ZUScV&=euf.i=cu;5.ndS>ed.AU@bl?f+FDn4G`_f*iP!+:?`@aO\;.\"ZnOa9H4X!.8\o(VP<H!-
%!(Bq&FLO8ulgSYAJfIP<&..=KX<^)J1D.+f-;fElJe[Fn2`Sn2`'o<Y+T#lY_^(R3AQeQOJqm+1=?mt7YZZaI891:.)_ubo#>[Ju
%#BlrK1dc=VcHAkTd@O'&C*5C/@9Tb7&"4.TUF!`o[2oofpf)uTK$PX@,%atd:m.NClWko4SQ.JN\iY/P+AZc2#.(%-^OT'D'IF2f
%;c*U<@u)ss^g%k:1uPHeC`2D?:INq?]TCA7W[KIr"gCW'NKR\<3RV]@9`YZ>C1RpIH5:'<GaX/+@j%a#W#QKJ9LKK5-fm.!"Pi1'
%khrb4N<2nBMTdhn%(JV0B'V7(2?hRR2i^^nKq#f.WQ/SHkG;UTP+Od-jHo\_++KYbrlr4Vnq[8=it)1Ls$;j=5Q\MSD'%)I*55fP
%)M7d@TTH]5OL&O^/!+^kIJc?*_R5,Z[jIKO-E:'.hA7^`!R\kn#p\2jIQm6dACR)u&B?ZKo+#F'J2rPin?4s>J.eA_KP];XFo[Eq
%<,t?&F!?)7>$_P8FYghK,W(*]C4rYnrG3]hFblTiF<1'bMZa+*8<nN*A*D5Y2@bArY*BBM$'d],,J#6.9Ne\h`W1rA/q_6:!5_OO
%k8!;)qS40W0E&W@6bpt]nHcqP1'W8+4ER)Z2as$WXkE1Pg.$Z;,bJrVgNZ*gd[iD=rYq:Eb7dWQ;aVmZB]muo_bgP(p$`f.#mSsf
%f0\'dFRC25O32?%G8gc^gU6O&ULZ>b)^g3=O>psNX)C#L5?6npIFt%po-f-KfVe2>A<iS8`D\?<&GTt<ZI?:S^?KO*2+?[VDeNdC
%9gt8'fPOpuL+&<go*F`Mi$>lkgjFP7pCm?gWLs`(918m/!M9bn%)c7i@d0sB-a)G!5"P>(FBcZCKX8F$[ZCI1p`J6p9Hh?"['])7
%aO5YolEA,bUHYW(Yl/72MGt:P%IFb+fhm3[=fe#A'j=dkF"^0teeIm(KB*77]hG\cp)]H5[m=a$kg`'Ok56qnSYL*d[SoRr%b2S'
%CIE2:LMCX2fH!bp-K3@V_`_R/d7u$F^KrI;9Xh<k;a6S@:/dSJR%VJ49pM#R1^V.MmUimbj+E$-+R:/;`c0=eB6s[$?tj5lKnCdq
%kdO!&&'u[Sr-Pa5ViD5a%a\_#fa8u.Dpb/W$kne+Z)6eV:kQ!CgKIX^N.c#f"ud5IVW)GY2TV":]9^_UkK'&S$ouBc<W_9b9&r'^
%_i;iN0Ys%r)<<m%]n[0b@!?dE_g[CW//B3P/?NojmC7U+`?REW8,D+]0PL_T^rFo<<>,WH%j:@Wfl$:9.Q_Btnfq[u7GE[jeKVS/
%O)to<Pes078XPsPe\L>pfB3:E[!.>HAhV<PRI%AGL4-aeDO,IQ.gm:8GhV6*`3u=`]"o`-D]OcA8"](hSE+(JaN&G>'ALBk-`H'b
%C71@sLE0(O$_6\K:!NV=#Is/FEqb(\Nnh2,'@Wpn$h'erq%#5r[qLB>bC6uJ'4^m%$C>:<RrIkY9Se:uE=&=Mm3D(Khe/!\Wo+0L
%mH)Akag@CF!]PhuE,NcsK/Y?&aja-3=)=R81,ZEY2a-I<9^kcLHdTA*@*Qikl+(>>KtJq=I;R(/LS\!t5EZ=\Lg(a[A3.P*10qC]
%VFG`dl!$uIM2t9??SBMhJs>gYR:*1S)?#XjN<,tu9.&_mW9F2G9LqlWY2Cn":aRP3bq4M-Q21p7NGE_D-?Nd7Pd?-Q6Ae-Jmue!Z
%#(iIh#pqo?,2j,--[5uq'6h9G$+S-aAI@(TP%JhC-5N\J947;?T_>C6oe?aMHu`g_JdKQ=OcIal0NIc"dUp)o'@&k1nWlkUo'"1T
%,h!'kP3Kb(aTUdel_.N<XV71F3AI(B\B:T,&km06/ffNM<Q1fLae_ddcAPrmEZ/6,r@;l4)Pf->ff\!.6Rq.rL>3/sRRO3j.B*03
%3$QP)g>-^U)J-=ED)WB&LrK8u4Qg%WR&m;:Pq'%iOC;`&-Vc8<FaP8()l;:!2,l<&YU3(.4;W'Ch*p=A<2IhI5*Z1%[@+.FLpQ/`
%CJnG0f2/Y?p"O*PA2QVXI_nbTB._R<^5JCjqsfQ]1!G5_"EC80!=Z"!6;1'9\O_H5Jg]JcDUIj,/O;G^])*j7UU0>fKQORmkr!mD
%_h[?JKoSQOnr9uf.Rb>^@6XlXAb%Mj!q4r6$On),$91>14<nYr,#n%?i%S\)CE9#bCoMsGgo1k5-!EJo"0]`JS9&;u+Zb<,.NT8a
%'prPFZY97#%!LYjZ=&h!TLe"#IM/BoD-4KN(2K,P8^j!u`jL.SgNc!W@T6nf)[#ad08=<k?'t!PEtb;KZAC?u`n>Ae>W/;Fio+T8
%<2HB9ijAU5&d\h5q8MPh8Y.r$?7qtb`<Y\L!WI>[#M+`Z$l/U0G!.&K5sI?Gg=:(uod+G,iWPtL%Yg0ONia7Uk?Z2+cc+XA"E**<
%Q4kHr-V.]RB50Hs/da9mmZfarP]bBgI(E\!*>UH>Lf2YmLKI:7+p=oXLk(I^#9>CJD==HqVukMd#H+iYl/h<M\I!i-W8_poQ(q.0
%;YX%lBnPdb*/D((RiYX1.>$U$k0D3Bc:'ZF&esA<+$bRdm#B-D@86nZrN"Xt7,:MLc_C\0^P+f,I[o\u(Pj,e%@cZa$C[<C2YNR0
%j5353ddX3V$c0tKM^5uLVB;R&:4SGbYUOb"dALVqY&%/hRX51&]iWP#!LK['UNGCIfE(<K?Fp15jZi?IOOU=,[le*1.)R'6/lgnJ
%r58$$M[s/nE_*!.p=60F"pkd9pJVKe@X6(kljp6Sd@3nX:<ZD[G@.S9mAljuOHusSa;=Ao8>\a&W,P>e_7$B:9u02N5`8hofFm`Y
%Q\6?@>VGLTP_<;BJYY8lCg049VT<U9l&gX_!VBG1EOV%SVE>"B\nSpf1q(#Y!YV;3O#Ko+O[NBPqi&"37,T\oqm+Wh7R\<RE$PYO
%]0=CVR+?&FL"@3JXjOtnS@dmPbrCT_ind+TI!:nlU'MquKl1PGa*2^kbJf=<JXPZnDCX1%e[\Z1;ibJ;]CPi:*+?T3(Yku\,3@<[
%F#T-C7<@k>2+cjOqdV9=X-3!L0MrV4_l/oR3LDh(@8@%?=oDW+_O$!;=C")I/n'h`[dnl-A#2a-oqGk)qV+ZU1e_jR#*f`@-NH^?
%oncq`L.RQSP'o-'%J.GB_^*!5[B%_59^lXD[J`uW8*/7SgZFl>JFJTZ.AdLnH6`h7WY3e;nCI3FV^tYM:e=kD"V[Q:AA8gPi):eN
%8&6HQbdEdt&N9D4Ql#)rjuJ.Y&.Y#$^599o%`-=KU#Dr>T=lN%(&mN[U9.0_aIMV9PK7_Q?gMmlP^(uGo[AR'VqOhG:GUICmG_ib
%.@cX&Wn+l\833;_^;+[\*TsMB!><tAk`3?nEVOi[.``9O_-NC->k5tRaV;:&p25-]7dH_EC"*NaApq>O_mTUJ"kE;[)_,Gt:SU8/
%G%qo7RY(s4W^cO1Nguo^SE11b^NaU^o7^H3h1[VI[%3`E5u954lJ1\1hR+X9>//k[/J;@'h.BJ"U7(MCm#*[j!focO&L*ba@+<fB
%60>4QS`i=/V%KAsqr,BH=#\bt;WNf&#EH`W@_8_n1=%Vk=rqBG)q3(_TKD@U^CBI)7h@]D$RD@3)o'jc"+cs="6WDh-@hosG9d@A
%;\K9UV1I%:Dje*Z9lpVV57I"gq#MCEe-3?WFu+*#kndRL]$,(h,=<h0j2<hG'XQ@J87Hci*TCd*#nEj4&fh@4Q,eCJ76f02ff,a`
%^[mDI0-&Z^h;a]J//Q%T(@5PQ:+bmlZ;[aj/S49n\=H5=j'%)>o;6(CcVu9O(E=?8FB=7`D8b0[f<*$K/j#5,H5f@l0tcdgljctW
%]*4*..b=4Q"UBgc.:\./@\o=3gC?f/k`\5Q9.F0YlBm%($%a)l#hZ[*HM,</4sW/@AS-l1g<Q7"nof#98+`Z:n?B[,>Y.o)ob0G?
%q(^;XN]qf6(/R+MW[2/V?J%Gr[;mWse%X1dV9PY0lqkdU&?&Xdf.Zo<c/r>q'AlHG]$V,Y'iCm&AoDps81IAqHbVR_nQ\;pd29$I
%[hU&:<2oVLA@=ajpPJrE4he')1'$Y`>T4XK9s`AsA#%]1UD%uairW;/k'LUEa)c^c^n74k>:-Snj]!&V;pT(9b+ZDPq_KC\f`^&h
%K;_O"jm+aUKglfj00$=n(I.>6C>2Oti3&6:#>Up(m%I^6g]ZpA(5f`W?-Q,q8lp:<Ze6PPU)*L?Ts,]d=5AST/6hME]==<#8:NjA
%7kWP1L2o@r$)[Raa5q@6Z;!@2Z>\O*C_f@5ZK4A]X08u/ELp>lRt=*Ule]7DC%:dpVd]Ru/aKB2VnhF4TArt=\CGDISEce['-&=2
%WnG=g&eqdC/PsiPX_-JK<jQ_seEgrX^97jW#*-EGk7G:r'/0Jf41rWaYrHPdK"Qus2TuZle-uOmChU7Xmict:#eN;WgCc*nU,d&%
%m1Qik[Xb%noGb0\6lDU%0"'Q)P8=aI;u\4Y7<iJ1'^'7Z3R[qL2um/T$L"=uqS"=;,ln2RB[q)cb4oN9\STf'=9g^ZA\T0P^]en`
%"$AN!?+j#Fb4G%7J)JHG-0)fkaP%hl]u`F=ium52O_!fYr1KU!GJ2ss`>;j'nCd7la1Q!RmQ$kCalb&2"61(_e#V\?j.5nDI'A*B
%MYg>aGDQ4*/M=BC6d5@CH%T#-f\&'F2^O*)N)diH]$E%bh<4,q?IeCa]?_.Xa/\o-[elT^aLgXq0$/*\WuLfSjFO4b_WL!)/F0*,
%$t3^_(j!JJ#$ElcfYE&nL'9GNBo_8mQ=[Z:H;jY6i#bO2V*n3Yi)tlWB*iAg/@*eK.bD8!N+Z*PT.bTkG0$`1[n9@;RTm\!Fb=pm
%@'=P/fLs=U0X;=_%NTrnEHJmgnV@bY,rC).dc9,d2su<#.d3in7(,O"j))OPF)qZ]nK!1)=HHdh+jP_^*jF<$ifm<7mmV4Ef=&XY
%Y]Ybi-j&Ue06-kkK7ubI#07tgf[fOB(eT)YE0qZCRm-18arSA25pEW3;P1E)hHNkgBF%;>7hP^DpC.4j3EfRHmH>`Ep$P<6J/aat
%CSpLGAdEs.]=%0^&:DBja$\XNn<g:*:8l.7I\/>u7'O19CHAeTT&m8m-u%o?c@Eb^Nh3$>c![2Z1QtR=57WchXabWpl5lSoF>nSZ
%IA0QJM\b5K2c4>FVXB^bB'aThhUGAd$b)M\jZ6#KQ1o=Z?ppVKUVR[<P_/dB0:;S)Vd#LabdGF5Xih@4d_`%hQY#P9bmW.18Z2*U
%=+^@Qb]c47"F)Z9\oe["m6^6->;o"%?_uLBNf>nOYARVuLfIbd$Km,T_Fa0g:bT:qMCap6F)*:r/=t2Jm2AMHQ[NrLZ9I$oohm>4
%O#5=d?T3gKahn%[E/KTG7qjKD"K24h:cK+-adFu)Kp1HMEKFgd%6buqJmB@d;qMF)5a,fX^A6G2GYSX&/5Xda:I"j*]Q3#FMF(t@
%+9!U0'X=n7;]c8*?cX(;3tQO#8r,u.BTPQf^c,DrIbWA0km!($aRDeB3;FL*(&iHsdHUbHp#g&36ps2X0f*?*c"Xg<-]XZ*[0%D9
%D-uP%\8g#YMR'=gk9a*=$Fri#1Q\#B98c(+]o?DBo8qp"<kjs`a2m,`E^:mFCd!%"+N'i-1795SktN]6A\VI'.A2u:7ci'CVFPD`
%:&CoVY/h[h=H_rier\>a#8/0C[(O1\[4D(9-]V@gY<[>?&d).J(s!@*N(9Hr_r_^#+[O[-o'F%=@#_6>jZYs^4S'(u5\iic=!s.D
%YPFL3]r1N-?U!Ym5JFHY:Hs"?/25]P,M?tWO,YVSMb%_JU'*1#So)r]CGf;?I][AYKX<bJT&knP>j5SWr50XW'Las@(55@0i.o8D
%$RQWgI-J[b:B[SF5r$,j&l9+E>_oG:9RZU,mSLPP^B<+de2X.c/c[&]"%6U#0YZBW#-f-3`:1.5dd^fn=Cp0gjn\V@jg=,5f:tkP
%rd)J<%Tb=*@'QN<gYoY2e2X2(EiBc%5jHAmWsT^F:+J[W5$dqol]Hp::!^epEo<Z8=S.IieD%cKGQ%6Qp4fCfhDg*:VPNUaCEQb$
%cNZ]I2q5/bDk=*>NY!ld2iOhE[_")df&rmrCDdN%;/+H<p::\Br[dN5,!.(!lJ1Rcf,+?E5GT>SpYmFN;*[G8k#8Qmi$$ba**KTV
%4FOm%jJT+ecH!>MHilS#R2_=5l"U0@chS44W4#fod[Oo7E?BrqBWf5Nbf8ddFRD?!]>4'Wcjh&!5*C%&]^VdNo>f=O"[-J+=9%#<
%j%J*Sp(]eu'+1M&-`Ec#n591"M+`-bA8Rhc.A/I1X!cPFd5sdV-ENge:-"2-RCC[T3&,"c_'Ms'%649*_g>=piP'qj79`LJ)"".c
%Q=1K\kI!,oIP))nA1])$>o^=cZ\#Xb>bQE+P/]r(#DtM(0KnQJgu,HR&,^ft0_^>pSaM5jB,^1qD'W\d!.#D&4MXPE\+Z.dcLifl
%]=oDdP!;le3q=6>ioL>ngE<[K"0Q:h.cAc0p)@:8%E:EW<0UWheR5Wi_leQmG5Se@n<<cdJUJ'Ei"O@Ke,W5@B-WPJL5^Rp=Ii7S
%B1oN:?&koI\#jtB'RLWo.PoC=/SgH,`OHjWW6*4g0XX@c)n%IYMZe1LC_Bmd)_\+11iJ5Vd@.RUYr2]kCd[S0MlPrc'304u9k8:m
%c%,A4n(*?8MmGsD@O;J4>eJK$r<2BB]Ke.p))K'b,GCV7lGj8BC6Fh39[sJ,p+?oSB;L6&K+&?E>H]gAF_r!!TBh^[$u-:)OMh6J
%)qT;HHKl%8opj_Mef]A/Is;$rj2*6D^dC.(h98Y+5.">NmLbgI,cW*_Q0@n\Aq+^q")$MojN2*@%Pe$K+7WdiUr,t%H^8N$g=Jl:
%<G2QpAob>t_jF/4+dlpX%ob.)qnT+BL>03+*4XTS*;prn2L@+THK0V\0=`M1@gXL,8O@eQTnd.ql,5^\):Xq#j,.[iGbiK=UR_BU
%?/,1^'>1d<JYUqTKJO]'32cn1peCMC:liRTcoJQEC<lf.)ceM+^\0D%ZU"D%([+fpp752II@?f:)9iRKKY!o^6P"PY[;&HMhI[?q
%YhW&//J+F;\q`Qc)i]:U9ri=V3Z^_l^D!%XY/@$X2&ag"\L7r."M[_C4AI^L'">;op;Qn)JGp>^?k:PKLs\'/'8MTPQpS'M`oKl#
%XD9ILpp3E/<@NCpp0"\6ci`kGI/D3pJ*K.,PMgU%O2&EeLQX0sAuq?Y6+>uMV@hQUhVb.2SG9)EhRKPIkMs"fH-YeVE\I?P`<i&A
%H]rpa5EoDN3j'J<mtZLTg:$-"]b>e#g_2o[g`&1(pO(c$UsIgk?1,Q?SaFnpp`^6bO()\\E;Oa%,4MQfQm>?`<"La6E=i$rWkQO.
%0)8gl/2+890DiOu#L-3K3Ya0tD0Q`7U2m(L5.0/Rp)TC-V"<%7;drh><aHU)`6X,<S';f1<WBi'6ci%/JQG:i?,n5nCeJr0R>uWH
%a8S9l]hBNO\1d+<ZtJWaRI0J8m@H&&AaEC!V5k6L0/s5P](/kSBWYJ3c[jug5PE.lE1bJV^M!5qbPF0hYZCGu=4%D%Fr"#fiUd^0
%qhF3jJ4j2=f5[#i024fj+"F'-2i)!_:d<BVEoO_k^KdOcgl!6)@g7sAH^V+uZr']DD?Ksc(l2p1/uLr#_N'JDpjS-BeG[+RXk>W\
%'mfb=J((S)i\=<3hd;<(Zs6#^k5mB[<84fjqJ]oE@IEZ[#C*AnM>IW$UHV>!9]>hSa-<dr"`Cbh%tSPIWS;;Tlbq(o*Vf4=Hd(Ya
%5?Y8Kr)S<jp][(eK1/:kmj1H[X?5eD?41E>me$nqf$#tS=1uCZ?#En_G`D!HI8/\q?ItF&mmZZMV0C74OGm#%*F+*JM4HFanE2Zh
%;4e[(AC^=s&ishdR53BG,.kh2p?-`GD5O;toGJ^,,#(ePSr&uq3U7'^2`sUd96&26>g@E-kAhapRS;=X`W51M/_@<=ka^3+5Hf#7
%q7Q&A$YF12*53iQg9m5;-EKoJ1Zr5!dWic9(=I`#p8NE`#BnDgK^J0P+nmIVcTdceSF="Q!M$6WrVI#?An(LY]<H?c#QDBS1$\A=
%T.HD6-K;+9!4YGg,_oZA0<;YQWmL2`X_*81=K^bu^f(AB\;ACMe1FbJ.9m7,9_hl=J1E\:7ib1dai^7LJtCW*TEkHIkV;A/TV&<S
%()0m`CW'EmZI05V3`A)c"blhcWf$"C:t2b45Q"d5'0I*'_JMTb;>5[6;`O6WF3<ZO2p(!,b?DJ2H[5F7-['t("+U$`1$Z)t5$9aI
%d(u6R&764fje4]JXXDk-WHmqgI%O*3]QJuC4D0*$p4hb/HRXsmSBH1QpfpQT(X8HLHkUMuV<d04f_M3Or7Mh*W6bJ=ABepN_'<?r
%d^>N7Lf-n!HT>(10^n*s9]`i5Ee;n`T"$H:1$Z*8`tZhl4D&sn-i.!WFc/9"^iYf#ofVTZcA<S:o+oBFchkG[RB7g).JD9flZ+oE
%bumd>\X]=Hm\*nFH%@AZBt"G!K'03ggtqN?FYC]oKl]9#.A,qZfXe*%HOuEXjF!MP$Ti!Ei6Q0YUHU@/af9dd9saD/WnktV-2#i,
%Oj?kdX$f6[-/(-0$4;)_==!B4$P2aT+]$ndc"#6n0g2CQBt)-IcRUZ4<@1rpAV#qCf7CQ=@qI+&?fN.!H/VP"mJ@[@pY5`js8L%\
%IeW=1;uQ07s/1ACpuu.8q9/5V^OY5?kF_bKbCB?2:]L$9rUQ9sJ,&&2J,2CEI/3#&J,8b$s7FXPr9s;S?iKhe?iKoJJ,[VE?iKmd
%rqq7si/dRRr9ecYrt#/"`uk:&6OL^T~>
%AI9_PrivateDataEnd
